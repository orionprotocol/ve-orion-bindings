pub use ve_orn_yield_distributor_v4::*;
#[allow(
    clippy::too_many_arguments,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
pub mod ve_orn_yield_distributor_v4 {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!veORNYieldDistributorV4 was auto-generated with ethers-rs Abigen. More information at: <https://github.com/gakonst/ethers-rs>
    use ::ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ::ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ::ethers::providers::Middleware;
    use std::sync::Arc;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_emittedToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_veORN_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"event\",\"name\":\"DefaultInitialization\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OldYieldCollected\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OwnerChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OwnerNominated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RecoveredERC20\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"yieldRate\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RewardAdded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"YieldCollected\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"YieldDurationUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"yieldRate\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"YieldPeriodRenewed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"acceptOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"checkpoint\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"checkpointOtherUser\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"eligibleCurrentVeORN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eligible_veorn_bal\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"stored_ending_timestamp\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emittedToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emitted_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fractionParticipating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield0\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getYieldForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"greylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"greylistAddress\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastTimeYieldApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"nominateNewOwner\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"notifyRewardAmount\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recoverERC20\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_notifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_yieldCollectionPaused\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setPauses\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_timelock\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setTimelock\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yieldDuration\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setYieldDuration\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_rate0\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"sync_too\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setYieldRate\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sync\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notifier_addr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"toggleRewardNotifier\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalVeORNParticipating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalVeORNSupplyStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"userIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"userVeORNCheckpointed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"userVeORNEndpointCheckpointed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"userYieldPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"yieldCollectionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"yieldDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"yieldPerVeORN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"yieldPerVeORNStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"yieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"yields\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static VEORNYIELDDISTRIBUTORV4_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        98,
        9,
        58,
        128,
        96,
        10,
        85,
        96,
        0,
        96,
        12,
        129,
        144,
        85,
        96,
        15,
        129,
        144,
        85,
        96,
        16,
        85,
        96,
        22,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        52,
        128,
        21,
        98,
        0,
        0,
        49,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        0,
        28,
        77,
        56,
        3,
        128,
        98,
        0,
        28,
        77,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        98,
        0,
        0,
        84,
        145,
        98,
        0,
        1,
        158,
        86,
        91,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        98,
        0,
        0,
        176,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        25,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        101,
        114,
        32,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        32,
        99,
        97,
        110,
        110,
        111,
        116,
        32,
        98,
        101,
        32,
        48,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        129,
        23,
        130,
        85,
        96,
        64,
        128,
        81,
        146,
        131,
        82,
        96,
        32,
        131,
        1,
        145,
        144,
        145,
        82,
        127,
        181,
        50,
        7,
        59,
        56,
        200,
        49,
        69,
        227,
        229,
        19,
        83,
        119,
        160,
        139,
        249,
        170,
        181,
        91,
        192,
        253,
        124,
        17,
        121,
        205,
        79,
        185,
        149,
        210,
        165,
        21,
        156,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        96,
        1,
        96,
        2,
        129,
        144,
        85,
        96,
        5,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        144,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        150,
        135,
        22,
        144,
        129,
        23,
        144,
        146,
        85,
        96,
        4,
        128,
        84,
        130,
        22,
        144,
        146,
        23,
        144,
        145,
        85,
        96,
        3,
        128,
        84,
        130,
        22,
        147,
        134,
        22,
        147,
        144,
        147,
        23,
        144,
        146,
        85,
        66,
        96,
        8,
        85,
        96,
        6,
        128,
        84,
        144,
        146,
        22,
        146,
        132,
        22,
        146,
        144,
        146,
        23,
        144,
        85,
        145,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        11,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        145,
        23,
        144,
        85,
        98,
        0,
        1,
        251,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        98,
        0,
        1,
        153,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        128,
        133,
        135,
        3,
        18,
        21,
        98,
        0,
        1,
        181,
        87,
        96,
        0,
        128,
        253,
        91,
        98,
        0,
        1,
        192,
        133,
        98,
        0,
        1,
        129,
        86,
        91,
        147,
        80,
        98,
        0,
        1,
        208,
        96,
        32,
        134,
        1,
        98,
        0,
        1,
        129,
        86,
        91,
        146,
        80,
        98,
        0,
        1,
        224,
        96,
        64,
        134,
        1,
        98,
        0,
        1,
        129,
        86,
        91,
        145,
        80,
        98,
        0,
        1,
        240,
        96,
        96,
        134,
        1,
        98,
        0,
        1,
        129,
        86,
        91,
        144,
        80,
        146,
        149,
        145,
        148,
        80,
        146,
        80,
        86,
        91,
        97,
        26,
        66,
        128,
        98,
        0,
        2,
        11,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        2,
        71,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        137,
        128,
        241,
        31,
        17,
        97,
        1,
        59,
        87,
        128,
        99,
        194,
        196,
        197,
        193,
        17,
        97,
        0,
        184,
        87,
        128,
        99,
        225,
        114,
        207,
        33,
        17,
        97,
        0,
        124,
        87,
        128,
        99,
        225,
        114,
        207,
        33,
        20,
        97,
        5,
        33,
        87,
        128,
        99,
        233,
        33,
        143,
        246,
        20,
        97,
        5,
        42,
        87,
        128,
        99,
        235,
        226,
        177,
        43,
        20,
        97,
        5,
        61,
        87,
        128,
        99,
        252,
        147,
        155,
        177,
        20,
        97,
        5,
        70,
        87,
        128,
        99,
        255,
        246,
        202,
        233,
        20,
        97,
        5,
        78,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        194,
        196,
        197,
        193,
        20,
        97,
        4,
        236,
        87,
        128,
        99,
        200,
        243,
        60,
        145,
        20,
        97,
        4,
        244,
        87,
        128,
        99,
        206,
        57,
        149,
        239,
        20,
        97,
        4,
        253,
        87,
        128,
        99,
        218,
        57,
        70,
        66,
        20,
        97,
        5,
        6,
        87,
        128,
        99,
        220,
        102,
        99,
        199,
        20,
        97,
        5,
        14,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        159,
        138,
        131,
        90,
        17,
        97,
        0,
        255,
        87,
        128,
        99,
        159,
        138,
        131,
        90,
        20,
        97,
        4,
        118,
        87,
        128,
        99,
        164,
        188,
        141,
        213,
        20,
        97,
        4,
        137,
        87,
        128,
        99,
        168,
        117,
        244,
        114,
        20,
        97,
        4,
        172,
        87,
        128,
        99,
        173,
        17,
        72,
        203,
        20,
        97,
        4,
        204,
        87,
        128,
        99,
        189,
        172,
        179,
        3,
        20,
        97,
        4,
        217,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        137,
        128,
        241,
        31,
        20,
        97,
        4,
        23,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        4,
        42,
        87,
        128,
        99,
        145,
        81,
        155,
        218,
        20,
        97,
        4,
        61,
        87,
        128,
        99,
        148,
        29,
        159,
        101,
        20,
        97,
        4,
        80,
        87,
        128,
        99,
        148,
        142,
        37,
        162,
        20,
        97,
        4,
        99,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        77,
        236,
        150,
        77,
        17,
        97,
        1,
        201,
        87,
        128,
        99,
        105,
        153,
        172,
        147,
        17,
        97,
        1,
        141,
        87,
        128,
        99,
        105,
        153,
        172,
        147,
        20,
        97,
        3,
        195,
        87,
        128,
        99,
        116,
        234,
        11,
        152,
        20,
        97,
        3,
        204,
        87,
        128,
        99,
        121,
        186,
        80,
        151,
        20,
        97,
        3,
        223,
        87,
        128,
        99,
        124,
        38,
        40,
        113,
        20,
        97,
        3,
        231,
        87,
        128,
        99,
        132,
        91,
        91,
        136,
        20,
        97,
        3,
        239,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        77,
        236,
        150,
        77,
        20,
        97,
        3,
        95,
        87,
        128,
        99,
        80,
        254,
        152,
        172,
        20,
        97,
        3,
        127,
        87,
        128,
        99,
        83,
        164,
        123,
        183,
        20,
        97,
        3,
        159,
        87,
        128,
        99,
        86,
        217,
        255,
        243,
        20,
        97,
        3,
        178,
        87,
        128,
        99,
        104,
        43,
        0,
        250,
        20,
        97,
        3,
        186,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        49,
        202,
        32,
        140,
        17,
        97,
        2,
        16,
        87,
        128,
        99,
        49,
        202,
        32,
        140,
        20,
        97,
        2,
        226,
        87,
        128,
        99,
        50,
        201,
        65,
        35,
        20,
        97,
        3,
        5,
        87,
        128,
        99,
        56,
        53,
        159,
        194,
        20,
        97,
        3,
        14,
        87,
        128,
        99,
        60,
        107,
        22,
        171,
        20,
        97,
        3,
        57,
        87,
        128,
        99,
        66,
        201,
        47,
        110,
        20,
        97,
        3,
        76,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        98,
        140,
        194,
        98,
        20,
        97,
        2,
        76,
        87,
        128,
        99,
        16,
        117,
        53,
        199,
        20,
        97,
        2,
        114,
        87,
        128,
        99,
        20,
        179,
        5,
        55,
        20,
        97,
        2,
        146,
        87,
        128,
        99,
        22,
        39,
        84,
        12,
        20,
        97,
        2,
        197,
        87,
        128,
        99,
        25,
        174,
        198,
        210,
        20,
        97,
        2,
        218,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        95,
        97,
        2,
        90,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        97,
        5,
        86,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        2,
        95,
        97,
        2,
        128,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        96,
        19,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        2,
        181,
        97,
        2,
        160,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        96,
        17,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        2,
        105,
        86,
        91,
        97,
        2,
        216,
        97,
        2,
        211,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        97,
        6,
        243,
        86,
        91,
        0,
        91,
        97,
        2,
        95,
        97,
        7,
        191,
        86,
        91,
        97,
        2,
        181,
        97,
        2,
        240,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        96,
        21,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        2,
        95,
        96,
        15,
        84,
        129,
        86,
        91,
        96,
        5,
        84,
        97,
        3,
        33,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        2,
        105,
        86,
        91,
        97,
        2,
        216,
        97,
        3,
        71,
        54,
        96,
        4,
        97,
        23,
        173,
        86,
        91,
        97,
        7,
        221,
        86,
        91,
        97,
        2,
        216,
        97,
        3,
        90,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        97,
        9,
        7,
        86,
        91,
        97,
        2,
        95,
        97,
        3,
        109,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        96,
        18,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        2,
        95,
        97,
        3,
        141,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        96,
        14,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        96,
        1,
        84,
        97,
        3,
        33,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        2,
        95,
        97,
        9,
        111,
        86,
        91,
        97,
        2,
        95,
        96,
        12,
        84,
        129,
        86,
        91,
        97,
        2,
        95,
        96,
        9,
        84,
        129,
        86,
        91,
        97,
        2,
        216,
        97,
        3,
        218,
        54,
        96,
        4,
        97,
        23,
        173,
        86,
        91,
        97,
        9,
        125,
        86,
        91,
        97,
        2,
        216,
        97,
        10,
        146,
        86,
        91,
        97,
        2,
        95,
        97,
        11,
        124,
        86,
        91,
        97,
        4,
        2,
        97,
        3,
        253,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        97,
        12,
        236,
        86,
        91,
        96,
        64,
        128,
        81,
        146,
        131,
        82,
        96,
        32,
        131,
        1,
        145,
        144,
        145,
        82,
        1,
        97,
        2,
        105,
        86,
        91,
        97,
        2,
        216,
        97,
        4,
        37,
        54,
        96,
        4,
        97,
        23,
        198,
        86,
        91,
        97,
        13,
        181,
        86,
        91,
        96,
        0,
        84,
        97,
        3,
        33,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        2,
        216,
        97,
        4,
        75,
        54,
        96,
        4,
        97,
        23,
        254,
        86,
        91,
        97,
        14,
        82,
        86,
        91,
        97,
        2,
        216,
        97,
        4,
        94,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        97,
        14,
        168,
        86,
        91,
        97,
        2,
        216,
        97,
        4,
        113,
        54,
        96,
        4,
        97,
        24,
        46,
        86,
        91,
        97,
        15,
        16,
        86,
        91,
        97,
        2,
        216,
        97,
        4,
        132,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        97,
        15,
        98,
        86,
        91,
        97,
        2,
        181,
        97,
        4,
        151,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        96,
        11,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        2,
        95,
        97,
        4,
        186,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        96,
        13,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        96,
        22,
        84,
        97,
        2,
        181,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        2,
        216,
        97,
        4,
        231,
        54,
        96,
        4,
        97,
        23,
        146,
        86,
        91,
        97,
        15,
        110,
        86,
        91,
        97,
        2,
        216,
        97,
        15,
        207,
        86,
        91,
        97,
        2,
        95,
        96,
        8,
        84,
        129,
        86,
        91,
        97,
        2,
        95,
        96,
        16,
        84,
        129,
        86,
        91,
        97,
        2,
        95,
        97,
        15,
        218,
        86,
        91,
        96,
        6,
        84,
        97,
        3,
        33,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        2,
        95,
        96,
        10,
        84,
        129,
        86,
        91,
        96,
        4,
        84,
        97,
        3,
        33,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        2,
        95,
        96,
        7,
        84,
        129,
        86,
        91,
        97,
        2,
        95,
        97,
        16,
        31,
        86,
        91,
        97,
        2,
        216,
        97,
        16,
        63,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        17,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        96,
        255,
        22,
        97,
        5,
        126,
        87,
        80,
        96,
        0,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        97,
        5,
        138,
        132,
        97,
        12,
        236,
        86,
        91,
        144,
        146,
        80,
        144,
        80,
        98,
        15,
        66,
        64,
        96,
        0,
        131,
        144,
        3,
        97,
        6,
        48,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        20,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        130,
        17,
        97,
        5,
        198,
        87,
        80,
        96,
        0,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        20,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        97,
        5,
        234,
        144,
        132,
        144,
        97,
        16,
        200,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        20,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        145,
        146,
        80,
        144,
        97,
        6,
        18,
        144,
        66,
        144,
        97,
        16,
        200,
        86,
        91,
        144,
        80,
        97,
        6,
        43,
        129,
        97,
        6,
        37,
        98,
        15,
        66,
        64,
        133,
        97,
        16,
        221,
        86,
        91,
        144,
        97,
        16,
        233,
        86,
        91,
        146,
        80,
        80,
        80,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        18,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        128,
        133,
        17,
        21,
        97,
        6,
        89,
        87,
        128,
        145,
        80,
        97,
        6,
        107,
        86,
        91,
        97,
        6,
        104,
        96,
        2,
        97,
        6,
        37,
        135,
        132,
        97,
        16,
        245,
        86,
        91,
        145,
        80,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        14,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        97,
        6,
        233,
        144,
        97,
        6,
        227,
        97,
        6,
        161,
        98,
        15,
        66,
        64,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        24,
        104,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        138,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        13,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        97,
        6,
        37,
        144,
        135,
        144,
        97,
        6,
        221,
        144,
        97,
        6,
        214,
        144,
        97,
        6,
        208,
        97,
        15,
        218,
        86,
        91,
        144,
        97,
        16,
        200,
        86,
        91,
        136,
        144,
        97,
        16,
        221,
        86,
        91,
        144,
        97,
        16,
        221,
        86,
        91,
        144,
        97,
        16,
        245,
        86,
        91,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        7,
        106,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        47,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        110,
        108,
        121,
        32,
        116,
        104,
        101,
        32,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        109,
        97,
        121,
        32,
        112,
        101,
        114,
        102,
        96,
        68,
        130,
        1,
        82,
        110,
        55,
        185,
        54,
        144,
        58,
        52,
        52,
        185,
        144,
        48,
        177,
        186,
        52,
        183,
        183,
        96,
        137,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        144,
        106,
        28,
        107,
        215,
        227,
        9,
        30,
        168,
        102,
        147,
        221,
        2,
        154,
        131,
        28,
        25,
        4,
        156,
        231,
        127,
        29,
        206,
        44,
        224,
        186,
        177,
        202,
        203,
        171,
        206,
        34,
        144,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        96,
        0,
        97,
        7,
        216,
        96,
        10,
        84,
        96,
        9,
        84,
        97,
        16,
        221,
        144,
        145,
        144,
        99,
        255,
        255,
        255,
        255,
        22,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        11,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        8,
        53,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        22,
        96,
        36,
        130,
        1,
        82,
        117,
        20,
        217,
        91,
        153,
        25,
        92,
        136,
        27,
        155,
        221,
        8,
        29,
        218,
        26,
        93,
        25,
        91,
        26,
        92,
        221,
        25,
        89,
        96,
        82,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        7,
        97,
        86,
        91,
        96,
        4,
        84,
        97,
        8,
        77,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        48,
        132,
        97,
        17,
        1,
        86,
        91,
        97,
        8,
        85,
        97,
        16,
        63,
        86,
        91,
        96,
        7,
        84,
        66,
        16,
        97,
        8,
        116,
        87,
        96,
        10,
        84,
        97,
        8,
        108,
        144,
        130,
        144,
        97,
        16,
        233,
        86,
        91,
        96,
        9,
        85,
        97,
        8,
        183,
        86,
        91,
        96,
        7,
        84,
        96,
        0,
        144,
        97,
        8,
        132,
        144,
        66,
        97,
        16,
        200,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        8,
        157,
        96,
        9,
        84,
        131,
        97,
        16,
        221,
        144,
        145,
        144,
        99,
        255,
        255,
        255,
        255,
        22,
        86,
        91,
        96,
        10,
        84,
        144,
        145,
        80,
        97,
        8,
        177,
        144,
        97,
        6,
        37,
        133,
        132,
        97,
        16,
        245,
        86,
        91,
        96,
        9,
        85,
        80,
        80,
        91,
        66,
        96,
        8,
        129,
        144,
        85,
        96,
        10,
        84,
        97,
        8,
        202,
        145,
        144,
        97,
        16,
        245,
        86,
        91,
        96,
        7,
        85,
        96,
        9,
        84,
        96,
        64,
        128,
        81,
        131,
        129,
        82,
        96,
        32,
        129,
        1,
        146,
        144,
        146,
        82,
        127,
        108,
        7,
        238,
        5,
        220,
        242,
        98,
        241,
        58,
        191,
        157,
        135,
        184,
        70,
        238,
        120,
        157,
        47,
        144,
        254,
        153,
        29,
        73,
        90,
        205,
        125,
        127,
        193,
        9,
        238,
        31,
        85,
        145,
        1,
        97,
        7,
        180,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        9,
        42,
        87,
        80,
        96,
        6,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        9,
        70,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        7,
        97,
        144,
        97,
        24,
        127,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        11,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        129,
        22,
        96,
        255,
        144,
        145,
        22,
        21,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        97,
        7,
        216,
        66,
        96,
        7,
        84,
        97,
        17,
        97,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        9,
        160,
        87,
        80,
        96,
        6,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        9,
        188,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        7,
        97,
        144,
        97,
        24,
        127,
        86,
        91,
        96,
        7,
        84,
        21,
        128,
        97,
        9,
        204,
        87,
        80,
        96,
        7,
        84,
        66,
        17,
        91,
        97,
        10,
        93,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        86,
        96,
        36,
        130,
        1,
        82,
        127,
        80,
        114,
        101,
        118,
        105,
        111,
        117,
        115,
        32,
        121,
        105,
        101,
        108,
        100,
        32,
        112,
        101,
        114,
        105,
        111,
        100,
        32,
        109,
        117,
        115,
        116,
        32,
        98,
        101,
        32,
        99,
        111,
        96,
        68,
        130,
        1,
        82,
        127,
        109,
        112,
        108,
        101,
        116,
        101,
        32,
        98,
        101,
        102,
        111,
        114,
        101,
        32,
        99,
        104,
        97,
        110,
        103,
        105,
        110,
        103,
        32,
        116,
        104,
        101,
        32,
        100,
        117,
        114,
        97,
        116,
        96,
        100,
        130,
        1,
        82,
        117,
        26,
        91,
        219,
        136,
        25,
        155,
        220,
        136,
        29,
        26,
        25,
        72,
        27,
        153,
        93,
        200,
        28,
        25,
        92,
        154,
        91,
        217,
        96,
        82,
        27,
        96,
        132,
        130,
        1,
        82,
        96,
        164,
        1,
        97,
        7,
        97,
        86,
        91,
        96,
        10,
        129,
        144,
        85,
        96,
        64,
        81,
        129,
        129,
        82,
        127,
        206,
        101,
        63,
        6,
        185,
        4,
        75,
        0,
        231,
        217,
        208,
        27,
        155,
        66,
        40,
        232,
        72,
        18,
        9,
        44,
        182,
        163,
        131,
        113,
        136,
        155,
        239,
        25,
        55,
        13,
        33,
        247,
        144,
        96,
        32,
        1,
        97,
        7,
        180,
        86,
        91,
        96,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        11,
        10,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        53,
        96,
        36,
        130,
        1,
        82,
        127,
        89,
        111,
        117,
        32,
        109,
        117,
        115,
        116,
        32,
        98,
        101,
        32,
        110,
        111,
        109,
        105,
        110,
        97,
        116,
        101,
        100,
        32,
        98,
        101,
        102,
        111,
        114,
        101,
        32,
        121,
        111,
        117,
        96,
        68,
        130,
        1,
        82,
        116,
        2,
        6,
        54,
        22,
        226,
        6,
        22,
        54,
        54,
        87,
        7,
        66,
        6,
        247,
        118,
        230,
        87,
        39,
        54,
        134,
        151,
        96,
        92,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        7,
        97,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        84,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        132,
        22,
        129,
        82,
        146,
        144,
        145,
        22,
        96,
        32,
        131,
        1,
        82,
        127,
        181,
        50,
        7,
        59,
        56,
        200,
        49,
        69,
        227,
        229,
        19,
        83,
        119,
        160,
        139,
        249,
        170,
        181,
        91,
        192,
        253,
        124,
        17,
        121,
        205,
        79,
        185,
        149,
        210,
        165,
        21,
        156,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        1,
        128,
        84,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        144,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        23,
        144,
        145,
        85,
        22,
        144,
        85,
        86,
        91,
        96,
        0,
        97,
        11,
        134,
        97,
        17,
        119,
        86,
        91,
        96,
        22,
        84,
        96,
        255,
        22,
        21,
        97,
        11,
        217,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        26,
        96,
        36,
        130,
        1,
        82,
        127,
        89,
        105,
        101,
        108,
        100,
        32,
        99,
        111,
        108,
        108,
        101,
        99,
        116,
        105,
        111,
        110,
        32,
        105,
        115,
        32,
        112,
        97,
        117,
        115,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        7,
        97,
        86,
        91,
        51,
        97,
        11,
        227,
        129,
        97,
        17,
        206,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        21,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        21,
        97,
        12,
        67,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        27,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        32,
        104,
        97,
        115,
        32,
        98,
        101,
        101,
        110,
        32,
        103,
        114,
        101,
        121,
        108,
        105,
        115,
        116,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        7,
        97,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        14,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        145,
        80,
        129,
        21,
        97,
        12,
        204,
        87,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        14,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        85,
        96,
        5,
        84,
        97,
        12,
        132,
        145,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        132,
        97,
        19,
        171,
        86,
        91,
        96,
        5,
        84,
        96,
        64,
        128,
        81,
        132,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        96,
        32,
        131,
        1,
        82,
        51,
        145,
        127,
        57,
        152,
        3,
        152,
        6,
        246,
        219,
        126,
        93,
        131,
        165,
        55,
        22,
        56,
        204,
        71,
        221,
        46,
        154,
        229,
        0,
        213,
        213,
        97,
        217,
        94,
        198,
        56,
        31,
        83,
        227,
        205,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        91,
        80,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        20,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        66,
        144,
        85,
        97,
        12,
        233,
        96,
        1,
        96,
        2,
        85,
        86,
        91,
        144,
        86,
        91,
        96,
        3,
        84,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        0,
        146,
        131,
        146,
        131,
        146,
        144,
        145,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        13,
        61,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        13,
        97,
        145,
        144,
        97,
        24,
        174,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        19,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        146,
        80,
        144,
        80,
        129,
        21,
        128,
        21,
        144,
        97,
        13,
        141,
        87,
        80,
        129,
        66,
        16,
        21,
        91,
        21,
        97,
        13,
        155,
        87,
        96,
        0,
        146,
        80,
        97,
        13,
        175,
        86,
        91,
        129,
        66,
        16,
        97,
        13,
        171,
        87,
        96,
        0,
        146,
        80,
        97,
        13,
        175,
        86,
        91,
        128,
        146,
        80,
        91,
        80,
        145,
        80,
        145,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        13,
        216,
        87,
        80,
        96,
        6,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        13,
        244,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        7,
        97,
        144,
        97,
        24,
        127,
        86,
        91,
        96,
        0,
        84,
        97,
        14,
        12,
        144,
        131,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        97,
        19,
        171,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        129,
        82,
        96,
        32,
        129,
        1,
        131,
        144,
        82,
        127,
        85,
        53,
        6,
        16,
        254,
        87,
        9,
        109,
        140,
        15,
        250,
        48,
        190,
        237,
        233,
        135,
        50,
        107,
        204,
        252,
        176,
        180,
        65,
        88,
        4,
        22,
        77,
        13,
        213,
        12,
        232,
        177,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        14,
        117,
        87,
        80,
        96,
        6,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        14,
        145,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        7,
        97,
        144,
        97,
        24,
        127,
        86,
        91,
        96,
        9,
        130,
        144,
        85,
        128,
        21,
        97,
        14,
        164,
        87,
        97,
        14,
        164,
        97,
        16,
        63,
        86,
        91,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        14,
        203,
        87,
        80,
        96,
        6,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        14,
        231,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        7,
        97,
        144,
        97,
        24,
        127,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        21,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        129,
        22,
        96,
        255,
        144,
        145,
        22,
        21,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        15,
        51,
        87,
        80,
        96,
        6,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        15,
        79,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        7,
        97,
        144,
        97,
        24,
        127,
        86,
        91,
        96,
        22,
        128,
        84,
        96,
        255,
        25,
        22,
        145,
        21,
        21,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        97,
        15,
        107,
        129,
        97,
        17,
        206,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        15,
        145,
        87,
        80,
        96,
        6,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        15,
        173,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        7,
        97,
        144,
        97,
        24,
        127,
        86,
        91,
        96,
        6,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        97,
        15,
        216,
        51,
        97,
        17,
        206,
        86,
        91,
        86,
        91,
        96,
        0,
        96,
        16,
        84,
        96,
        0,
        3,
        97,
        15,
        237,
        87,
        80,
        96,
        12,
        84,
        144,
        86,
        91,
        97,
        7,
        216,
        97,
        16,
        22,
        96,
        16,
        84,
        97,
        6,
        37,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        6,
        221,
        96,
        9,
        84,
        97,
        6,
        221,
        96,
        8,
        84,
        97,
        6,
        208,
        97,
        9,
        111,
        86,
        91,
        96,
        12,
        84,
        144,
        97,
        16,
        245,
        86,
        91,
        96,
        0,
        97,
        7,
        216,
        96,
        16,
        84,
        97,
        6,
        37,
        98,
        15,
        66,
        64,
        96,
        15,
        84,
        97,
        16,
        221,
        144,
        145,
        144,
        99,
        255,
        255,
        255,
        255,
        22,
        86,
        91,
        97,
        16,
        71,
        97,
        15,
        218,
        86,
        91,
        96,
        12,
        85,
        96,
        3,
        84,
        96,
        64,
        128,
        81,
        99,
        24,
        22,
        13,
        221,
        96,
        224,
        27,
        129,
        82,
        144,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        145,
        99,
        24,
        22,
        13,
        221,
        145,
        96,
        4,
        128,
        130,
        1,
        146,
        96,
        32,
        146,
        144,
        145,
        144,
        130,
        144,
        3,
        1,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        16,
        148,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        16,
        184,
        145,
        144,
        97,
        24,
        174,
        86,
        91,
        96,
        16,
        85,
        97,
        16,
        195,
        97,
        9,
        111,
        86,
        91,
        96,
        8,
        85,
        86,
        91,
        96,
        0,
        97,
        16,
        212,
        130,
        132,
        97,
        24,
        199,
        86,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        16,
        212,
        130,
        132,
        97,
        24,
        104,
        86,
        91,
        96,
        0,
        97,
        16,
        212,
        130,
        132,
        97,
        24,
        218,
        86,
        91,
        96,
        0,
        97,
        16,
        212,
        130,
        132,
        97,
        24,
        252,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        129,
        22,
        96,
        36,
        131,
        1,
        82,
        132,
        22,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        128,
        130,
        1,
        132,
        144,
        82,
        130,
        81,
        128,
        131,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        132,
        144,
        145,
        1,
        144,
        145,
        82,
        96,
        32,
        129,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        23,
        144,
        82,
        97,
        17,
        91,
        144,
        133,
        144,
        97,
        20,
        198,
        86,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        131,
        16,
        97,
        17,
        112,
        87,
        129,
        97,
        16,
        212,
        86,
        91,
        80,
        144,
        145,
        144,
        80,
        86,
        91,
        96,
        2,
        128,
        84,
        3,
        97,
        17,
        200,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        7,
        97,
        86,
        91,
        96,
        2,
        128,
        85,
        86,
        91,
        97,
        17,
        214,
        97,
        16,
        63,
        86,
        91,
        97,
        17,
        223,
        129,
        97,
        21,
        157,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        18,
        96,
        32,
        82,
        96,
        64,
        128,
        130,
        32,
        84,
        96,
        3,
        84,
        145,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        148,
        144,
        148,
        82,
        147,
        145,
        146,
        145,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        18,
        61,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        18,
        97,
        145,
        144,
        97,
        24,
        174,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        18,
        96,
        32,
        82,
        96,
        64,
        128,
        130,
        32,
        133,
        144,
        85,
        96,
        3,
        84,
        144,
        81,
        99,
        203,
        249,
        254,
        95,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        147,
        144,
        147,
        82,
        147,
        148,
        80,
        146,
        144,
        145,
        22,
        144,
        99,
        203,
        249,
        254,
        95,
        144,
        96,
        36,
        1,
        96,
        64,
        128,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        18,
        194,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        18,
        230,
        145,
        144,
        97,
        25,
        15,
        86,
        91,
        96,
        32,
        128,
        130,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        19,
        144,
        146,
        82,
        96,
        64,
        144,
        145,
        32,
        85,
        144,
        80,
        130,
        130,
        16,
        97,
        19,
        52,
        87,
        96,
        0,
        97,
        19,
        27,
        131,
        133,
        97,
        16,
        200,
        86,
        91,
        96,
        15,
        84,
        144,
        145,
        80,
        97,
        19,
        43,
        144,
        130,
        97,
        16,
        245,
        86,
        91,
        96,
        15,
        85,
        80,
        97,
        19,
        85,
        86,
        91,
        96,
        0,
        97,
        19,
        64,
        132,
        132,
        97,
        16,
        200,
        86,
        91,
        96,
        15,
        84,
        144,
        145,
        80,
        97,
        19,
        80,
        144,
        130,
        97,
        16,
        200,
        86,
        91,
        96,
        15,
        85,
        80,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        17,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        17,
        91,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        17,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        96,
        20,
        144,
        145,
        82,
        144,
        32,
        66,
        144,
        85,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        36,
        131,
        1,
        82,
        96,
        68,
        128,
        131,
        1,
        133,
        144,
        82,
        131,
        81,
        128,
        132,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        100,
        144,
        146,
        1,
        131,
        82,
        96,
        32,
        130,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        23,
        144,
        82,
        145,
        81,
        96,
        0,
        146,
        131,
        146,
        144,
        135,
        22,
        145,
        97,
        20,
        7,
        145,
        144,
        97,
        25,
        160,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        134,
        90,
        241,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        20,
        68,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        20,
        73,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        128,
        21,
        97,
        20,
        115,
        87,
        80,
        128,
        81,
        21,
        128,
        97,
        20,
        115,
        87,
        80,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        20,
        115,
        145,
        144,
        97,
        25,
        188,
        86,
        91,
        97,
        20,
        191,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        114,
        97,
        110,
        115,
        102,
        101,
        114,
        72,
        101,
        108,
        112,
        101,
        114,
        58,
        32,
        84,
        82,
        65,
        78,
        83,
        70,
        69,
        82,
        95,
        70,
        65,
        73,
        76,
        69,
        68,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        7,
        97,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        21,
        27,
        130,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        32,
        129,
        82,
        96,
        32,
        1,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        129,
        82,
        80,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        21,
        230,
        144,
        146,
        145,
        144,
        99,
        255,
        255,
        255,
        255,
        22,
        86,
        91,
        128,
        81,
        144,
        145,
        80,
        21,
        97,
        21,
        152,
        87,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        21,
        57,
        145,
        144,
        97,
        25,
        188,
        86,
        91,
        97,
        21,
        152,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        42,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        69,
        82,
        67,
        50,
        48,
        32,
        111,
        112,
        101,
        114,
        97,
        116,
        105,
        111,
        110,
        32,
        100,
        105,
        100,
        32,
        110,
        96,
        68,
        130,
        1,
        82,
        105,
        27,
        221,
        8,
        28,
        221,
        88,
        216,
        217,
        89,
        89,
        96,
        178,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        7,
        97,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        97,
        15,
        107,
        87,
        96,
        0,
        97,
        21,
        183,
        130,
        97,
        5,
        86,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        14,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        147,
        144,
        147,
        85,
        96,
        12,
        84,
        96,
        13,
        144,
        145,
        82,
        145,
        144,
        32,
        85,
        80,
        80,
        86,
        91,
        96,
        96,
        97,
        21,
        245,
        132,
        132,
        96,
        0,
        133,
        97,
        21,
        253,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        130,
        71,
        16,
        21,
        97,
        22,
        94,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        32,
        102,
        111,
        96,
        68,
        130,
        1,
        82,
        101,
        28,
        136,
        24,
        216,
        91,
        27,
        96,
        210,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        7,
        97,
        86,
        91,
        96,
        0,
        128,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        135,
        96,
        64,
        81,
        97,
        22,
        122,
        145,
        144,
        97,
        25,
        160,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        22,
        183,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        22,
        188,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        97,
        22,
        205,
        135,
        131,
        131,
        135,
        97,
        22,
        216,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        131,
        21,
        97,
        23,
        71,
        87,
        130,
        81,
        96,
        0,
        3,
        97,
        23,
        64,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        97,
        23,
        64,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        7,
        97,
        86,
        91,
        80,
        129,
        97,
        21,
        245,
        86,
        91,
        97,
        21,
        245,
        131,
        131,
        129,
        81,
        21,
        97,
        23,
        92,
        87,
        129,
        81,
        128,
        131,
        96,
        32,
        1,
        253,
        91,
        128,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        7,
        97,
        145,
        144,
        97,
        25,
        217,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        23,
        141,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        23,
        164,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        16,
        212,
        130,
        97,
        23,
        118,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        23,
        191,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        23,
        217,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        23,
        226,
        131,
        97,
        23,
        118,
        86,
        91,
        148,
        96,
        32,
        147,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        128,
        21,
        21,
        129,
        20,
        97,
        15,
        107,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        24,
        17,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        24,
        35,
        129,
        97,
        23,
        240,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        24,
        64,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        24,
        75,
        129,
        97,
        23,
        240,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        16,
        215,
        87,
        97,
        16,
        215,
        97,
        24,
        82,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        96,
        21,
        144,
        130,
        1,
        82,
        116,
        78,
        111,
        116,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        111,
        114,
        32,
        116,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        96,
        88,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        24,
        192,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        97,
        16,
        215,
        87,
        97,
        16,
        215,
        97,
        24,
        82,
        86,
        91,
        96,
        0,
        130,
        97,
        24,
        247,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        16,
        215,
        87,
        97,
        16,
        215,
        97,
        24,
        82,
        86,
        91,
        96,
        0,
        96,
        64,
        130,
        132,
        3,
        18,
        21,
        97,
        25,
        33,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        81,
        96,
        64,
        129,
        1,
        129,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        21,
        97,
        25,
        82,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        82,
        130,
        81,
        96,
        15,
        129,
        144,
        11,
        129,
        20,
        97,
        25,
        103,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        82,
        96,
        32,
        146,
        131,
        1,
        81,
        146,
        129,
        1,
        146,
        144,
        146,
        82,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        25,
        151,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        25,
        127,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        25,
        178,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        25,
        124,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        25,
        206,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        24,
        75,
        129,
        97,
        23,
        240,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        130,
        81,
        128,
        96,
        32,
        132,
        1,
        82,
        97,
        25,
        248,
        129,
        96,
        64,
        133,
        1,
        96,
        32,
        135,
        1,
        97,
        25,
        124,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        145,
        144,
        145,
        1,
        96,
        64,
        1,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        52,
        146,
        73,
        37,
        65,
        176,
        173,
        120,
        199,
        109,
        111,
        121,
        246,
        224,
        187,
        206,
        179,
        84,
        206,
        136,
        181,
        75,
        136,
        221,
        109,
        36,
        192,
        148,
        19,
        120,
        52,
        51,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    lazy_static::lazy_static! {
        pub static ref VEORNYIELDDISTRIBUTORV4_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from(
            __BYTECODE.to_vec(),
        );
    }
    pub struct veORNYieldDistributorV4<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for veORNYieldDistributorV4<M> {
        fn clone(&self) -> Self {
            veORNYieldDistributorV4(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for veORNYieldDistributorV4<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for veORNYieldDistributorV4<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(veORNYieldDistributorV4))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> veORNYieldDistributorV4<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                VEORNYIELDDISTRIBUTORV4_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                VEORNYIELDDISTRIBUTORV4_ABI.clone(),
                VEORNYIELDDISTRIBUTORV4_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `acceptOwnership` (0x79ba5097) function
        pub fn accept_ownership(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([121, 186, 80, 151], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `checkpoint` (0xc2c4c5c1) function
        pub fn checkpoint(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([194, 196, 197, 193], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `checkpointOtherUser` (0x9f8a835a) function
        pub fn checkpoint_other_user(
            &self,
            user_addr: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([159, 138, 131, 90], user_addr)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `earned` (0x008cc262) function
        pub fn earned(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([0, 140, 194, 98], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `eligibleCurrentVeORN` (0x845b5b88) function
        pub fn eligible_current_ve_orn(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (::ethers::core::types::U256, ::ethers::core::types::U256),
        > {
            self.0
                .method_hash([132, 91, 91, 136], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `emittedToken` (0xe9218ff6) function
        pub fn emitted_token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([233, 33, 143, 246], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `emitted_token_address` (0x38359fc2) function
        pub fn emitted_token_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([56, 53, 159, 194], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `fractionParticipating` (0xfc939bb1) function
        pub fn fraction_participating(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([252, 147, 155, 177], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getYield` (0x7c262871) function
        pub fn get_yield(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([124, 38, 40, 113], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getYieldForDuration` (0x19aec6d2) function
        pub fn get_yield_for_duration(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([25, 174, 198, 210], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `greylist` (0x31ca208c) function
        pub fn greylist(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([49, 202, 32, 140], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `greylistAddress` (0x941d9f65) function
        pub fn greylist_address(
            &self,
            address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([148, 29, 159, 101], address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastTimeYieldApplicable` (0x56d9fff3) function
        pub fn last_time_yield_applicable(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([86, 217, 255, 243], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastUpdateTime` (0xc8f33c91) function
        pub fn last_update_time(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([200, 243, 60, 145], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `nominateNewOwner` (0x1627540c) function
        pub fn nominate_new_owner(
            &self,
            owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([22, 39, 84, 12], owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `nominatedOwner` (0x53a47bb7) function
        pub fn nominated_owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([83, 164, 123, 183], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `notifyRewardAmount` (0x3c6b16ab) function
        pub fn notify_reward_amount(
            &self,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([60, 107, 22, 171], amount)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `periodFinish` (0xebe2b12b) function
        pub fn period_finish(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([235, 226, 177, 43], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `recoverERC20` (0x8980f11f) function
        pub fn recover_erc20(
            &self,
            token_address: ::ethers::core::types::Address,
            token_amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([137, 128, 241, 31], (token_address, token_amount))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `reward_notifiers` (0xa4bc8dd5) function
        pub fn reward_notifiers(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([164, 188, 141, 213], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setPauses` (0x948e25a2) function
        pub fn set_pauses(
            &self,
            yield_collection_paused: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([148, 142, 37, 162], yield_collection_paused)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setTimelock` (0xbdacb303) function
        pub fn set_timelock(
            &self,
            new_timelock: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([189, 172, 179, 3], new_timelock)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setYieldDuration` (0x74ea0b98) function
        pub fn set_yield_duration(
            &self,
            yield_duration: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([116, 234, 11, 152], yield_duration)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setYieldRate` (0x91519bda) function
        pub fn set_yield_rate(
            &self,
            new_rate_0: ::ethers::core::types::U256,
            sync_too: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([145, 81, 155, 218], (new_rate_0, sync_too))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sync` (0xfff6cae9) function
        pub fn sync(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([255, 246, 202, 233], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `timelock_address` (0xdc6663c7) function
        pub fn timelock_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([220, 102, 99, 199], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `toggleRewardNotifier` (0x42c92f6e) function
        pub fn toggle_reward_notifier(
            &self,
            notifier_addr: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([66, 201, 47, 110], notifier_addr)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalVeORNParticipating` (0x32c94123) function
        pub fn total_ve_orn_participating(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([50, 201, 65, 35], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalVeORNSupplyStored` (0xce3995ef) function
        pub fn total_ve_orn_supply_stored(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([206, 57, 149, 239], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `userIsInitialized` (0x14b30537) function
        pub fn user_is_initialized(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([20, 179, 5, 55], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `userVeORNCheckpointed` (0x4dec964d) function
        pub fn user_ve_orn_checkpointed(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([77, 236, 150, 77], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `userVeORNEndpointCheckpointed` (0x107535c7) function
        pub fn user_ve_orn_endpoint_checkpointed(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([16, 117, 53, 199], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `userYieldPerTokenPaid` (0xa875f472) function
        pub fn user_yield_per_token_paid(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([168, 117, 244, 114], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `yieldCollectionPaused` (0xad1148cb) function
        pub fn yield_collection_paused(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([173, 17, 72, 203], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `yieldDuration` (0xe172cf21) function
        pub fn yield_duration(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([225, 114, 207, 33], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `yieldPerVeORN` (0xda394642) function
        pub fn yield_per_ve_orn(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([218, 57, 70, 66], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `yieldPerVeORNStored` (0x682b00fa) function
        pub fn yield_per_ve_orn_stored(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([104, 43, 0, 250], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `yieldRate` (0x6999ac93) function
        pub fn yield_rate(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([105, 153, 172, 147], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `yields` (0x50fe98ac) function
        pub fn yields(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([80, 254, 152, 172], p0)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `DefaultInitialization` event
        pub fn default_initialization_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, DefaultInitializationFilter> {
            self.0.event()
        }
        ///Gets the contract's `OldYieldCollected` event
        pub fn old_yield_collected_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OldYieldCollectedFilter> {
            self.0.event()
        }
        ///Gets the contract's `OwnerChanged` event
        pub fn owner_changed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnerChangedFilter> {
            self.0.event()
        }
        ///Gets the contract's `OwnerNominated` event
        pub fn owner_nominated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnerNominatedFilter> {
            self.0.event()
        }
        ///Gets the contract's `RecoveredERC20` event
        pub fn recovered_erc20_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RecoveredERC20Filter> {
            self.0.event()
        }
        ///Gets the contract's `RewardAdded` event
        pub fn reward_added_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RewardAddedFilter> {
            self.0.event()
        }
        ///Gets the contract's `YieldCollected` event
        pub fn yield_collected_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, YieldCollectedFilter> {
            self.0.event()
        }
        ///Gets the contract's `YieldDurationUpdated` event
        pub fn yield_duration_updated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, YieldDurationUpdatedFilter> {
            self.0.event()
        }
        ///Gets the contract's `YieldPeriodRenewed` event
        pub fn yield_period_renewed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, YieldPeriodRenewedFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<M, veORNYieldDistributorV4Events> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for veORNYieldDistributorV4<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "DefaultInitialization", abi = "DefaultInitialization()")]
    pub struct DefaultInitializationFilter();
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OldYieldCollected",
        abi = "OldYieldCollected(address,uint256,address)"
    )]
    pub struct OldYieldCollectedFilter {
        #[ethevent(indexed)]
        pub user: ::ethers::core::types::Address,
        pub yield_: ::ethers::core::types::U256,
        pub token_address: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "OwnerChanged", abi = "OwnerChanged(address,address)")]
    pub struct OwnerChangedFilter {
        pub old_owner: ::ethers::core::types::Address,
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "OwnerNominated", abi = "OwnerNominated(address)")]
    pub struct OwnerNominatedFilter {
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "RecoveredERC20", abi = "RecoveredERC20(address,uint256)")]
    pub struct RecoveredERC20Filter {
        pub token: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "RewardAdded", abi = "RewardAdded(uint256,uint256)")]
    pub struct RewardAddedFilter {
        pub reward: ::ethers::core::types::U256,
        pub yield_rate: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "YieldCollected",
        abi = "YieldCollected(address,uint256,address)"
    )]
    pub struct YieldCollectedFilter {
        #[ethevent(indexed)]
        pub user: ::ethers::core::types::Address,
        pub yield_: ::ethers::core::types::U256,
        pub token_address: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "YieldDurationUpdated", abi = "YieldDurationUpdated(uint256)")]
    pub struct YieldDurationUpdatedFilter {
        pub new_duration: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "YieldPeriodRenewed",
        abi = "YieldPeriodRenewed(address,uint256)"
    )]
    pub struct YieldPeriodRenewedFilter {
        pub token: ::ethers::core::types::Address,
        pub yield_rate: ::ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum veORNYieldDistributorV4Events {
        DefaultInitializationFilter(DefaultInitializationFilter),
        OldYieldCollectedFilter(OldYieldCollectedFilter),
        OwnerChangedFilter(OwnerChangedFilter),
        OwnerNominatedFilter(OwnerNominatedFilter),
        RecoveredERC20Filter(RecoveredERC20Filter),
        RewardAddedFilter(RewardAddedFilter),
        YieldCollectedFilter(YieldCollectedFilter),
        YieldDurationUpdatedFilter(YieldDurationUpdatedFilter),
        YieldPeriodRenewedFilter(YieldPeriodRenewedFilter),
    }
    impl ::ethers::contract::EthLogDecode for veORNYieldDistributorV4Events {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = DefaultInitializationFilter::decode_log(log) {
                return Ok(veORNYieldDistributorV4Events::DefaultInitializationFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = OldYieldCollectedFilter::decode_log(log) {
                return Ok(veORNYieldDistributorV4Events::OldYieldCollectedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = OwnerChangedFilter::decode_log(log) {
                return Ok(veORNYieldDistributorV4Events::OwnerChangedFilter(decoded));
            }
            if let Ok(decoded) = OwnerNominatedFilter::decode_log(log) {
                return Ok(veORNYieldDistributorV4Events::OwnerNominatedFilter(decoded));
            }
            if let Ok(decoded) = RecoveredERC20Filter::decode_log(log) {
                return Ok(veORNYieldDistributorV4Events::RecoveredERC20Filter(decoded));
            }
            if let Ok(decoded) = RewardAddedFilter::decode_log(log) {
                return Ok(veORNYieldDistributorV4Events::RewardAddedFilter(decoded));
            }
            if let Ok(decoded) = YieldCollectedFilter::decode_log(log) {
                return Ok(veORNYieldDistributorV4Events::YieldCollectedFilter(decoded));
            }
            if let Ok(decoded) = YieldDurationUpdatedFilter::decode_log(log) {
                return Ok(veORNYieldDistributorV4Events::YieldDurationUpdatedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = YieldPeriodRenewedFilter::decode_log(log) {
                return Ok(veORNYieldDistributorV4Events::YieldPeriodRenewedFilter(
                    decoded,
                ));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for veORNYieldDistributorV4Events {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                veORNYieldDistributorV4Events::DefaultInitializationFilter(element) => {
                    element.fmt(f)
                }
                veORNYieldDistributorV4Events::OldYieldCollectedFilter(element) => element.fmt(f),
                veORNYieldDistributorV4Events::OwnerChangedFilter(element) => element.fmt(f),
                veORNYieldDistributorV4Events::OwnerNominatedFilter(element) => element.fmt(f),
                veORNYieldDistributorV4Events::RecoveredERC20Filter(element) => element.fmt(f),
                veORNYieldDistributorV4Events::RewardAddedFilter(element) => element.fmt(f),
                veORNYieldDistributorV4Events::YieldCollectedFilter(element) => element.fmt(f),
                veORNYieldDistributorV4Events::YieldDurationUpdatedFilter(element) => {
                    element.fmt(f)
                }
                veORNYieldDistributorV4Events::YieldPeriodRenewedFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `acceptOwnership` function with signature `acceptOwnership()` and selector `0x79ba5097`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "acceptOwnership", abi = "acceptOwnership()")]
    pub struct AcceptOwnershipCall;
    ///Container type for all input parameters for the `checkpoint` function with signature `checkpoint()` and selector `0xc2c4c5c1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "checkpoint", abi = "checkpoint()")]
    pub struct CheckpointCall;
    ///Container type for all input parameters for the `checkpointOtherUser` function with signature `checkpointOtherUser(address)` and selector `0x9f8a835a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "checkpointOtherUser", abi = "checkpointOtherUser(address)")]
    pub struct CheckpointOtherUserCall {
        pub user_addr: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `earned` function with signature `earned(address)` and selector `0x008cc262`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "earned", abi = "earned(address)")]
    pub struct EarnedCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `eligibleCurrentVeORN` function with signature `eligibleCurrentVeORN(address)` and selector `0x845b5b88`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "eligibleCurrentVeORN", abi = "eligibleCurrentVeORN(address)")]
    pub struct EligibleCurrentVeORNCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `emittedToken` function with signature `emittedToken()` and selector `0xe9218ff6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "emittedToken", abi = "emittedToken()")]
    pub struct EmittedTokenCall;
    ///Container type for all input parameters for the `emitted_token_address` function with signature `emitted_token_address()` and selector `0x38359fc2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "emitted_token_address", abi = "emitted_token_address()")]
    pub struct EmittedTokenAddressCall;
    ///Container type for all input parameters for the `fractionParticipating` function with signature `fractionParticipating()` and selector `0xfc939bb1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "fractionParticipating", abi = "fractionParticipating()")]
    pub struct FractionParticipatingCall;
    ///Container type for all input parameters for the `getYield` function with signature `getYield()` and selector `0x7c262871`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getYield", abi = "getYield()")]
    pub struct GetYieldCall;
    ///Container type for all input parameters for the `getYieldForDuration` function with signature `getYieldForDuration()` and selector `0x19aec6d2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getYieldForDuration", abi = "getYieldForDuration()")]
    pub struct GetYieldForDurationCall;
    ///Container type for all input parameters for the `greylist` function with signature `greylist(address)` and selector `0x31ca208c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "greylist", abi = "greylist(address)")]
    pub struct GreylistCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `greylistAddress` function with signature `greylistAddress(address)` and selector `0x941d9f65`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "greylistAddress", abi = "greylistAddress(address)")]
    pub struct GreylistAddressCall {
        pub address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `lastTimeYieldApplicable` function with signature `lastTimeYieldApplicable()` and selector `0x56d9fff3`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lastTimeYieldApplicable", abi = "lastTimeYieldApplicable()")]
    pub struct LastTimeYieldApplicableCall;
    ///Container type for all input parameters for the `lastUpdateTime` function with signature `lastUpdateTime()` and selector `0xc8f33c91`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lastUpdateTime", abi = "lastUpdateTime()")]
    pub struct LastUpdateTimeCall;
    ///Container type for all input parameters for the `nominateNewOwner` function with signature `nominateNewOwner(address)` and selector `0x1627540c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "nominateNewOwner", abi = "nominateNewOwner(address)")]
    pub struct NominateNewOwnerCall {
        pub owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `nominatedOwner` function with signature `nominatedOwner()` and selector `0x53a47bb7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "nominatedOwner", abi = "nominatedOwner()")]
    pub struct NominatedOwnerCall;
    ///Container type for all input parameters for the `notifyRewardAmount` function with signature `notifyRewardAmount(uint256)` and selector `0x3c6b16ab`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "notifyRewardAmount", abi = "notifyRewardAmount(uint256)")]
    pub struct NotifyRewardAmountCall {
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `periodFinish` function with signature `periodFinish()` and selector `0xebe2b12b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "periodFinish", abi = "periodFinish()")]
    pub struct PeriodFinishCall;
    ///Container type for all input parameters for the `recoverERC20` function with signature `recoverERC20(address,uint256)` and selector `0x8980f11f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "recoverERC20", abi = "recoverERC20(address,uint256)")]
    pub struct RecoverERC20Call {
        pub token_address: ::ethers::core::types::Address,
        pub token_amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `reward_notifiers` function with signature `reward_notifiers(address)` and selector `0xa4bc8dd5`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "reward_notifiers", abi = "reward_notifiers(address)")]
    pub struct RewardNotifiersCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `setPauses` function with signature `setPauses(bool)` and selector `0x948e25a2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setPauses", abi = "setPauses(bool)")]
    pub struct SetPausesCall {
        pub yield_collection_paused: bool,
    }
    ///Container type for all input parameters for the `setTimelock` function with signature `setTimelock(address)` and selector `0xbdacb303`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setTimelock", abi = "setTimelock(address)")]
    pub struct SetTimelockCall {
        pub new_timelock: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `setYieldDuration` function with signature `setYieldDuration(uint256)` and selector `0x74ea0b98`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setYieldDuration", abi = "setYieldDuration(uint256)")]
    pub struct SetYieldDurationCall {
        pub yield_duration: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `setYieldRate` function with signature `setYieldRate(uint256,bool)` and selector `0x91519bda`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setYieldRate", abi = "setYieldRate(uint256,bool)")]
    pub struct SetYieldRateCall {
        pub new_rate_0: ::ethers::core::types::U256,
        pub sync_too: bool,
    }
    ///Container type for all input parameters for the `sync` function with signature `sync()` and selector `0xfff6cae9`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "sync", abi = "sync()")]
    pub struct SyncCall;
    ///Container type for all input parameters for the `timelock_address` function with signature `timelock_address()` and selector `0xdc6663c7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "timelock_address", abi = "timelock_address()")]
    pub struct TimelockAddressCall;
    ///Container type for all input parameters for the `toggleRewardNotifier` function with signature `toggleRewardNotifier(address)` and selector `0x42c92f6e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "toggleRewardNotifier", abi = "toggleRewardNotifier(address)")]
    pub struct ToggleRewardNotifierCall {
        pub notifier_addr: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `totalVeORNParticipating` function with signature `totalVeORNParticipating()` and selector `0x32c94123`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "totalVeORNParticipating", abi = "totalVeORNParticipating()")]
    pub struct TotalVeORNParticipatingCall;
    ///Container type for all input parameters for the `totalVeORNSupplyStored` function with signature `totalVeORNSupplyStored()` and selector `0xce3995ef`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "totalVeORNSupplyStored", abi = "totalVeORNSupplyStored()")]
    pub struct TotalVeORNSupplyStoredCall;
    ///Container type for all input parameters for the `userIsInitialized` function with signature `userIsInitialized(address)` and selector `0x14b30537`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "userIsInitialized", abi = "userIsInitialized(address)")]
    pub struct UserIsInitializedCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `userVeORNCheckpointed` function with signature `userVeORNCheckpointed(address)` and selector `0x4dec964d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "userVeORNCheckpointed", abi = "userVeORNCheckpointed(address)")]
    pub struct UserVeORNCheckpointedCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `userVeORNEndpointCheckpointed` function with signature `userVeORNEndpointCheckpointed(address)` and selector `0x107535c7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "userVeORNEndpointCheckpointed",
        abi = "userVeORNEndpointCheckpointed(address)"
    )]
    pub struct UserVeORNEndpointCheckpointedCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `userYieldPerTokenPaid` function with signature `userYieldPerTokenPaid(address)` and selector `0xa875f472`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "userYieldPerTokenPaid", abi = "userYieldPerTokenPaid(address)")]
    pub struct UserYieldPerTokenPaidCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `yieldCollectionPaused` function with signature `yieldCollectionPaused()` and selector `0xad1148cb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "yieldCollectionPaused", abi = "yieldCollectionPaused()")]
    pub struct YieldCollectionPausedCall;
    ///Container type for all input parameters for the `yieldDuration` function with signature `yieldDuration()` and selector `0xe172cf21`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "yieldDuration", abi = "yieldDuration()")]
    pub struct YieldDurationCall;
    ///Container type for all input parameters for the `yieldPerVeORN` function with signature `yieldPerVeORN()` and selector `0xda394642`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "yieldPerVeORN", abi = "yieldPerVeORN()")]
    pub struct YieldPerVeORNCall;
    ///Container type for all input parameters for the `yieldPerVeORNStored` function with signature `yieldPerVeORNStored()` and selector `0x682b00fa`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "yieldPerVeORNStored", abi = "yieldPerVeORNStored()")]
    pub struct YieldPerVeORNStoredCall;
    ///Container type for all input parameters for the `yieldRate` function with signature `yieldRate()` and selector `0x6999ac93`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "yieldRate", abi = "yieldRate()")]
    pub struct YieldRateCall;
    ///Container type for all input parameters for the `yields` function with signature `yields(address)` and selector `0x50fe98ac`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "yields", abi = "yields(address)")]
    pub struct YieldsCall(pub ::ethers::core::types::Address);
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum veORNYieldDistributorV4Calls {
        AcceptOwnership(AcceptOwnershipCall),
        Checkpoint(CheckpointCall),
        CheckpointOtherUser(CheckpointOtherUserCall),
        Earned(EarnedCall),
        EligibleCurrentVeORN(EligibleCurrentVeORNCall),
        EmittedToken(EmittedTokenCall),
        EmittedTokenAddress(EmittedTokenAddressCall),
        FractionParticipating(FractionParticipatingCall),
        GetYield(GetYieldCall),
        GetYieldForDuration(GetYieldForDurationCall),
        Greylist(GreylistCall),
        GreylistAddress(GreylistAddressCall),
        LastTimeYieldApplicable(LastTimeYieldApplicableCall),
        LastUpdateTime(LastUpdateTimeCall),
        NominateNewOwner(NominateNewOwnerCall),
        NominatedOwner(NominatedOwnerCall),
        NotifyRewardAmount(NotifyRewardAmountCall),
        Owner(OwnerCall),
        PeriodFinish(PeriodFinishCall),
        RecoverERC20(RecoverERC20Call),
        RewardNotifiers(RewardNotifiersCall),
        SetPauses(SetPausesCall),
        SetTimelock(SetTimelockCall),
        SetYieldDuration(SetYieldDurationCall),
        SetYieldRate(SetYieldRateCall),
        Sync(SyncCall),
        TimelockAddress(TimelockAddressCall),
        ToggleRewardNotifier(ToggleRewardNotifierCall),
        TotalVeORNParticipating(TotalVeORNParticipatingCall),
        TotalVeORNSupplyStored(TotalVeORNSupplyStoredCall),
        UserIsInitialized(UserIsInitializedCall),
        UserVeORNCheckpointed(UserVeORNCheckpointedCall),
        UserVeORNEndpointCheckpointed(UserVeORNEndpointCheckpointedCall),
        UserYieldPerTokenPaid(UserYieldPerTokenPaidCall),
        YieldCollectionPaused(YieldCollectionPausedCall),
        YieldDuration(YieldDurationCall),
        YieldPerVeORN(YieldPerVeORNCall),
        YieldPerVeORNStored(YieldPerVeORNStoredCall),
        YieldRate(YieldRateCall),
        Yields(YieldsCall),
    }
    impl ::ethers::core::abi::AbiDecode for veORNYieldDistributorV4Calls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AcceptOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::AcceptOwnership(decoded));
            }
            if let Ok(decoded) =
                <CheckpointCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::Checkpoint(decoded));
            }
            if let Ok(decoded) =
                <CheckpointOtherUserCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::CheckpointOtherUser(decoded));
            }
            if let Ok(decoded) =
                <EarnedCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::Earned(decoded));
            }
            if let Ok(decoded) =
                <EligibleCurrentVeORNCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::EligibleCurrentVeORN(decoded));
            }
            if let Ok(decoded) =
                <EmittedTokenCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::EmittedToken(decoded));
            }
            if let Ok(decoded) =
                <EmittedTokenAddressCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::EmittedTokenAddress(decoded));
            }
            if let Ok(decoded) =
                <FractionParticipatingCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::FractionParticipating(decoded));
            }
            if let Ok(decoded) =
                <GetYieldCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::GetYield(decoded));
            }
            if let Ok(decoded) =
                <GetYieldForDurationCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::GetYieldForDuration(decoded));
            }
            if let Ok(decoded) =
                <GreylistCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::Greylist(decoded));
            }
            if let Ok(decoded) =
                <GreylistAddressCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::GreylistAddress(decoded));
            }
            if let Ok(decoded) =
                <LastTimeYieldApplicableCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(veORNYieldDistributorV4Calls::LastTimeYieldApplicable(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <LastUpdateTimeCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::LastUpdateTime(decoded));
            }
            if let Ok(decoded) =
                <NominateNewOwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::NominateNewOwner(decoded));
            }
            if let Ok(decoded) =
                <NominatedOwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::NominatedOwner(decoded));
            }
            if let Ok(decoded) =
                <NotifyRewardAmountCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::NotifyRewardAmount(decoded));
            }
            if let Ok(decoded) =
                <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::Owner(decoded));
            }
            if let Ok(decoded) =
                <PeriodFinishCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::PeriodFinish(decoded));
            }
            if let Ok(decoded) =
                <RecoverERC20Call as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::RecoverERC20(decoded));
            }
            if let Ok(decoded) =
                <RewardNotifiersCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::RewardNotifiers(decoded));
            }
            if let Ok(decoded) =
                <SetPausesCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::SetPauses(decoded));
            }
            if let Ok(decoded) =
                <SetTimelockCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::SetTimelock(decoded));
            }
            if let Ok(decoded) =
                <SetYieldDurationCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::SetYieldDuration(decoded));
            }
            if let Ok(decoded) =
                <SetYieldRateCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::SetYieldRate(decoded));
            }
            if let Ok(decoded) = <SyncCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::Sync(decoded));
            }
            if let Ok(decoded) =
                <TimelockAddressCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::TimelockAddress(decoded));
            }
            if let Ok(decoded) =
                <ToggleRewardNotifierCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::ToggleRewardNotifier(decoded));
            }
            if let Ok(decoded) =
                <TotalVeORNParticipatingCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(veORNYieldDistributorV4Calls::TotalVeORNParticipating(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TotalVeORNSupplyStoredCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(veORNYieldDistributorV4Calls::TotalVeORNSupplyStored(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <UserIsInitializedCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::UserIsInitialized(decoded));
            }
            if let Ok(decoded) =
                <UserVeORNCheckpointedCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::UserVeORNCheckpointed(decoded));
            }
            if let Ok(decoded) =
                <UserVeORNEndpointCheckpointedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(veORNYieldDistributorV4Calls::UserVeORNEndpointCheckpointed(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <UserYieldPerTokenPaidCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::UserYieldPerTokenPaid(decoded));
            }
            if let Ok(decoded) =
                <YieldCollectionPausedCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::YieldCollectionPaused(decoded));
            }
            if let Ok(decoded) =
                <YieldDurationCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::YieldDuration(decoded));
            }
            if let Ok(decoded) =
                <YieldPerVeORNCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::YieldPerVeORN(decoded));
            }
            if let Ok(decoded) =
                <YieldPerVeORNStoredCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::YieldPerVeORNStored(decoded));
            }
            if let Ok(decoded) =
                <YieldRateCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::YieldRate(decoded));
            }
            if let Ok(decoded) =
                <YieldsCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(veORNYieldDistributorV4Calls::Yields(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for veORNYieldDistributorV4Calls {
        fn encode(self) -> Vec<u8> {
            match self {
                veORNYieldDistributorV4Calls::AcceptOwnership(element) => element.encode(),
                veORNYieldDistributorV4Calls::Checkpoint(element) => element.encode(),
                veORNYieldDistributorV4Calls::CheckpointOtherUser(element) => element.encode(),
                veORNYieldDistributorV4Calls::Earned(element) => element.encode(),
                veORNYieldDistributorV4Calls::EligibleCurrentVeORN(element) => element.encode(),
                veORNYieldDistributorV4Calls::EmittedToken(element) => element.encode(),
                veORNYieldDistributorV4Calls::EmittedTokenAddress(element) => element.encode(),
                veORNYieldDistributorV4Calls::FractionParticipating(element) => element.encode(),
                veORNYieldDistributorV4Calls::GetYield(element) => element.encode(),
                veORNYieldDistributorV4Calls::GetYieldForDuration(element) => element.encode(),
                veORNYieldDistributorV4Calls::Greylist(element) => element.encode(),
                veORNYieldDistributorV4Calls::GreylistAddress(element) => element.encode(),
                veORNYieldDistributorV4Calls::LastTimeYieldApplicable(element) => element.encode(),
                veORNYieldDistributorV4Calls::LastUpdateTime(element) => element.encode(),
                veORNYieldDistributorV4Calls::NominateNewOwner(element) => element.encode(),
                veORNYieldDistributorV4Calls::NominatedOwner(element) => element.encode(),
                veORNYieldDistributorV4Calls::NotifyRewardAmount(element) => element.encode(),
                veORNYieldDistributorV4Calls::Owner(element) => element.encode(),
                veORNYieldDistributorV4Calls::PeriodFinish(element) => element.encode(),
                veORNYieldDistributorV4Calls::RecoverERC20(element) => element.encode(),
                veORNYieldDistributorV4Calls::RewardNotifiers(element) => element.encode(),
                veORNYieldDistributorV4Calls::SetPauses(element) => element.encode(),
                veORNYieldDistributorV4Calls::SetTimelock(element) => element.encode(),
                veORNYieldDistributorV4Calls::SetYieldDuration(element) => element.encode(),
                veORNYieldDistributorV4Calls::SetYieldRate(element) => element.encode(),
                veORNYieldDistributorV4Calls::Sync(element) => element.encode(),
                veORNYieldDistributorV4Calls::TimelockAddress(element) => element.encode(),
                veORNYieldDistributorV4Calls::ToggleRewardNotifier(element) => element.encode(),
                veORNYieldDistributorV4Calls::TotalVeORNParticipating(element) => element.encode(),
                veORNYieldDistributorV4Calls::TotalVeORNSupplyStored(element) => element.encode(),
                veORNYieldDistributorV4Calls::UserIsInitialized(element) => element.encode(),
                veORNYieldDistributorV4Calls::UserVeORNCheckpointed(element) => element.encode(),
                veORNYieldDistributorV4Calls::UserVeORNEndpointCheckpointed(element) => {
                    element.encode()
                }
                veORNYieldDistributorV4Calls::UserYieldPerTokenPaid(element) => element.encode(),
                veORNYieldDistributorV4Calls::YieldCollectionPaused(element) => element.encode(),
                veORNYieldDistributorV4Calls::YieldDuration(element) => element.encode(),
                veORNYieldDistributorV4Calls::YieldPerVeORN(element) => element.encode(),
                veORNYieldDistributorV4Calls::YieldPerVeORNStored(element) => element.encode(),
                veORNYieldDistributorV4Calls::YieldRate(element) => element.encode(),
                veORNYieldDistributorV4Calls::Yields(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for veORNYieldDistributorV4Calls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                veORNYieldDistributorV4Calls::AcceptOwnership(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::Checkpoint(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::CheckpointOtherUser(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::Earned(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::EligibleCurrentVeORN(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::EmittedToken(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::EmittedTokenAddress(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::FractionParticipating(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::GetYield(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::GetYieldForDuration(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::Greylist(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::GreylistAddress(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::LastTimeYieldApplicable(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::LastUpdateTime(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::NominateNewOwner(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::NominatedOwner(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::NotifyRewardAmount(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::Owner(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::PeriodFinish(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::RecoverERC20(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::RewardNotifiers(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::SetPauses(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::SetTimelock(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::SetYieldDuration(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::SetYieldRate(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::Sync(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::TimelockAddress(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::ToggleRewardNotifier(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::TotalVeORNParticipating(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::TotalVeORNSupplyStored(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::UserIsInitialized(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::UserVeORNCheckpointed(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::UserVeORNEndpointCheckpointed(element) => {
                    element.fmt(f)
                }
                veORNYieldDistributorV4Calls::UserYieldPerTokenPaid(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::YieldCollectionPaused(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::YieldDuration(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::YieldPerVeORN(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::YieldPerVeORNStored(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::YieldRate(element) => element.fmt(f),
                veORNYieldDistributorV4Calls::Yields(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AcceptOwnershipCall> for veORNYieldDistributorV4Calls {
        fn from(var: AcceptOwnershipCall) -> Self {
            veORNYieldDistributorV4Calls::AcceptOwnership(var)
        }
    }
    impl ::std::convert::From<CheckpointCall> for veORNYieldDistributorV4Calls {
        fn from(var: CheckpointCall) -> Self {
            veORNYieldDistributorV4Calls::Checkpoint(var)
        }
    }
    impl ::std::convert::From<CheckpointOtherUserCall> for veORNYieldDistributorV4Calls {
        fn from(var: CheckpointOtherUserCall) -> Self {
            veORNYieldDistributorV4Calls::CheckpointOtherUser(var)
        }
    }
    impl ::std::convert::From<EarnedCall> for veORNYieldDistributorV4Calls {
        fn from(var: EarnedCall) -> Self {
            veORNYieldDistributorV4Calls::Earned(var)
        }
    }
    impl ::std::convert::From<EligibleCurrentVeORNCall> for veORNYieldDistributorV4Calls {
        fn from(var: EligibleCurrentVeORNCall) -> Self {
            veORNYieldDistributorV4Calls::EligibleCurrentVeORN(var)
        }
    }
    impl ::std::convert::From<EmittedTokenCall> for veORNYieldDistributorV4Calls {
        fn from(var: EmittedTokenCall) -> Self {
            veORNYieldDistributorV4Calls::EmittedToken(var)
        }
    }
    impl ::std::convert::From<EmittedTokenAddressCall> for veORNYieldDistributorV4Calls {
        fn from(var: EmittedTokenAddressCall) -> Self {
            veORNYieldDistributorV4Calls::EmittedTokenAddress(var)
        }
    }
    impl ::std::convert::From<FractionParticipatingCall> for veORNYieldDistributorV4Calls {
        fn from(var: FractionParticipatingCall) -> Self {
            veORNYieldDistributorV4Calls::FractionParticipating(var)
        }
    }
    impl ::std::convert::From<GetYieldCall> for veORNYieldDistributorV4Calls {
        fn from(var: GetYieldCall) -> Self {
            veORNYieldDistributorV4Calls::GetYield(var)
        }
    }
    impl ::std::convert::From<GetYieldForDurationCall> for veORNYieldDistributorV4Calls {
        fn from(var: GetYieldForDurationCall) -> Self {
            veORNYieldDistributorV4Calls::GetYieldForDuration(var)
        }
    }
    impl ::std::convert::From<GreylistCall> for veORNYieldDistributorV4Calls {
        fn from(var: GreylistCall) -> Self {
            veORNYieldDistributorV4Calls::Greylist(var)
        }
    }
    impl ::std::convert::From<GreylistAddressCall> for veORNYieldDistributorV4Calls {
        fn from(var: GreylistAddressCall) -> Self {
            veORNYieldDistributorV4Calls::GreylistAddress(var)
        }
    }
    impl ::std::convert::From<LastTimeYieldApplicableCall> for veORNYieldDistributorV4Calls {
        fn from(var: LastTimeYieldApplicableCall) -> Self {
            veORNYieldDistributorV4Calls::LastTimeYieldApplicable(var)
        }
    }
    impl ::std::convert::From<LastUpdateTimeCall> for veORNYieldDistributorV4Calls {
        fn from(var: LastUpdateTimeCall) -> Self {
            veORNYieldDistributorV4Calls::LastUpdateTime(var)
        }
    }
    impl ::std::convert::From<NominateNewOwnerCall> for veORNYieldDistributorV4Calls {
        fn from(var: NominateNewOwnerCall) -> Self {
            veORNYieldDistributorV4Calls::NominateNewOwner(var)
        }
    }
    impl ::std::convert::From<NominatedOwnerCall> for veORNYieldDistributorV4Calls {
        fn from(var: NominatedOwnerCall) -> Self {
            veORNYieldDistributorV4Calls::NominatedOwner(var)
        }
    }
    impl ::std::convert::From<NotifyRewardAmountCall> for veORNYieldDistributorV4Calls {
        fn from(var: NotifyRewardAmountCall) -> Self {
            veORNYieldDistributorV4Calls::NotifyRewardAmount(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for veORNYieldDistributorV4Calls {
        fn from(var: OwnerCall) -> Self {
            veORNYieldDistributorV4Calls::Owner(var)
        }
    }
    impl ::std::convert::From<PeriodFinishCall> for veORNYieldDistributorV4Calls {
        fn from(var: PeriodFinishCall) -> Self {
            veORNYieldDistributorV4Calls::PeriodFinish(var)
        }
    }
    impl ::std::convert::From<RecoverERC20Call> for veORNYieldDistributorV4Calls {
        fn from(var: RecoverERC20Call) -> Self {
            veORNYieldDistributorV4Calls::RecoverERC20(var)
        }
    }
    impl ::std::convert::From<RewardNotifiersCall> for veORNYieldDistributorV4Calls {
        fn from(var: RewardNotifiersCall) -> Self {
            veORNYieldDistributorV4Calls::RewardNotifiers(var)
        }
    }
    impl ::std::convert::From<SetPausesCall> for veORNYieldDistributorV4Calls {
        fn from(var: SetPausesCall) -> Self {
            veORNYieldDistributorV4Calls::SetPauses(var)
        }
    }
    impl ::std::convert::From<SetTimelockCall> for veORNYieldDistributorV4Calls {
        fn from(var: SetTimelockCall) -> Self {
            veORNYieldDistributorV4Calls::SetTimelock(var)
        }
    }
    impl ::std::convert::From<SetYieldDurationCall> for veORNYieldDistributorV4Calls {
        fn from(var: SetYieldDurationCall) -> Self {
            veORNYieldDistributorV4Calls::SetYieldDuration(var)
        }
    }
    impl ::std::convert::From<SetYieldRateCall> for veORNYieldDistributorV4Calls {
        fn from(var: SetYieldRateCall) -> Self {
            veORNYieldDistributorV4Calls::SetYieldRate(var)
        }
    }
    impl ::std::convert::From<SyncCall> for veORNYieldDistributorV4Calls {
        fn from(var: SyncCall) -> Self {
            veORNYieldDistributorV4Calls::Sync(var)
        }
    }
    impl ::std::convert::From<TimelockAddressCall> for veORNYieldDistributorV4Calls {
        fn from(var: TimelockAddressCall) -> Self {
            veORNYieldDistributorV4Calls::TimelockAddress(var)
        }
    }
    impl ::std::convert::From<ToggleRewardNotifierCall> for veORNYieldDistributorV4Calls {
        fn from(var: ToggleRewardNotifierCall) -> Self {
            veORNYieldDistributorV4Calls::ToggleRewardNotifier(var)
        }
    }
    impl ::std::convert::From<TotalVeORNParticipatingCall> for veORNYieldDistributorV4Calls {
        fn from(var: TotalVeORNParticipatingCall) -> Self {
            veORNYieldDistributorV4Calls::TotalVeORNParticipating(var)
        }
    }
    impl ::std::convert::From<TotalVeORNSupplyStoredCall> for veORNYieldDistributorV4Calls {
        fn from(var: TotalVeORNSupplyStoredCall) -> Self {
            veORNYieldDistributorV4Calls::TotalVeORNSupplyStored(var)
        }
    }
    impl ::std::convert::From<UserIsInitializedCall> for veORNYieldDistributorV4Calls {
        fn from(var: UserIsInitializedCall) -> Self {
            veORNYieldDistributorV4Calls::UserIsInitialized(var)
        }
    }
    impl ::std::convert::From<UserVeORNCheckpointedCall> for veORNYieldDistributorV4Calls {
        fn from(var: UserVeORNCheckpointedCall) -> Self {
            veORNYieldDistributorV4Calls::UserVeORNCheckpointed(var)
        }
    }
    impl ::std::convert::From<UserVeORNEndpointCheckpointedCall> for veORNYieldDistributorV4Calls {
        fn from(var: UserVeORNEndpointCheckpointedCall) -> Self {
            veORNYieldDistributorV4Calls::UserVeORNEndpointCheckpointed(var)
        }
    }
    impl ::std::convert::From<UserYieldPerTokenPaidCall> for veORNYieldDistributorV4Calls {
        fn from(var: UserYieldPerTokenPaidCall) -> Self {
            veORNYieldDistributorV4Calls::UserYieldPerTokenPaid(var)
        }
    }
    impl ::std::convert::From<YieldCollectionPausedCall> for veORNYieldDistributorV4Calls {
        fn from(var: YieldCollectionPausedCall) -> Self {
            veORNYieldDistributorV4Calls::YieldCollectionPaused(var)
        }
    }
    impl ::std::convert::From<YieldDurationCall> for veORNYieldDistributorV4Calls {
        fn from(var: YieldDurationCall) -> Self {
            veORNYieldDistributorV4Calls::YieldDuration(var)
        }
    }
    impl ::std::convert::From<YieldPerVeORNCall> for veORNYieldDistributorV4Calls {
        fn from(var: YieldPerVeORNCall) -> Self {
            veORNYieldDistributorV4Calls::YieldPerVeORN(var)
        }
    }
    impl ::std::convert::From<YieldPerVeORNStoredCall> for veORNYieldDistributorV4Calls {
        fn from(var: YieldPerVeORNStoredCall) -> Self {
            veORNYieldDistributorV4Calls::YieldPerVeORNStored(var)
        }
    }
    impl ::std::convert::From<YieldRateCall> for veORNYieldDistributorV4Calls {
        fn from(var: YieldRateCall) -> Self {
            veORNYieldDistributorV4Calls::YieldRate(var)
        }
    }
    impl ::std::convert::From<YieldsCall> for veORNYieldDistributorV4Calls {
        fn from(var: YieldsCall) -> Self {
            veORNYieldDistributorV4Calls::Yields(var)
        }
    }
    ///Container type for all return fields from the `earned` function with signature `earned(address)` and selector `0x008cc262`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct EarnedReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `eligibleCurrentVeORN` function with signature `eligibleCurrentVeORN(address)` and selector `0x845b5b88`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct EligibleCurrentVeORNReturn {
        pub eligible_veorn_bal: ::ethers::core::types::U256,
        pub stored_ending_timestamp: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `emittedToken` function with signature `emittedToken()` and selector `0xe9218ff6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct EmittedTokenReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `emitted_token_address` function with signature `emitted_token_address()` and selector `0x38359fc2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct EmittedTokenAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `fractionParticipating` function with signature `fractionParticipating()` and selector `0xfc939bb1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct FractionParticipatingReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getYield` function with signature `getYield()` and selector `0x7c262871`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GetYieldReturn {
        pub yield_0: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `getYieldForDuration` function with signature `getYieldForDuration()` and selector `0x19aec6d2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GetYieldForDurationReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `greylist` function with signature `greylist(address)` and selector `0x31ca208c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GreylistReturn(pub bool);
    ///Container type for all return fields from the `lastTimeYieldApplicable` function with signature `lastTimeYieldApplicable()` and selector `0x56d9fff3`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LastTimeYieldApplicableReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lastUpdateTime` function with signature `lastUpdateTime()` and selector `0xc8f33c91`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LastUpdateTimeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `nominatedOwner` function with signature `nominatedOwner()` and selector `0x53a47bb7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct NominatedOwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `periodFinish` function with signature `periodFinish()` and selector `0xebe2b12b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct PeriodFinishReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `reward_notifiers` function with signature `reward_notifiers(address)` and selector `0xa4bc8dd5`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardNotifiersReturn(pub bool);
    ///Container type for all return fields from the `timelock_address` function with signature `timelock_address()` and selector `0xdc6663c7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct TimelockAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `totalVeORNParticipating` function with signature `totalVeORNParticipating()` and selector `0x32c94123`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct TotalVeORNParticipatingReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `totalVeORNSupplyStored` function with signature `totalVeORNSupplyStored()` and selector `0xce3995ef`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct TotalVeORNSupplyStoredReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `userIsInitialized` function with signature `userIsInitialized(address)` and selector `0x14b30537`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct UserIsInitializedReturn(pub bool);
    ///Container type for all return fields from the `userVeORNCheckpointed` function with signature `userVeORNCheckpointed(address)` and selector `0x4dec964d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct UserVeORNCheckpointedReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `userVeORNEndpointCheckpointed` function with signature `userVeORNEndpointCheckpointed(address)` and selector `0x107535c7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct UserVeORNEndpointCheckpointedReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `userYieldPerTokenPaid` function with signature `userYieldPerTokenPaid(address)` and selector `0xa875f472`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct UserYieldPerTokenPaidReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `yieldCollectionPaused` function with signature `yieldCollectionPaused()` and selector `0xad1148cb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct YieldCollectionPausedReturn(pub bool);
    ///Container type for all return fields from the `yieldDuration` function with signature `yieldDuration()` and selector `0xe172cf21`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct YieldDurationReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `yieldPerVeORN` function with signature `yieldPerVeORN()` and selector `0xda394642`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct YieldPerVeORNReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `yieldPerVeORNStored` function with signature `yieldPerVeORNStored()` and selector `0x682b00fa`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct YieldPerVeORNStoredReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `yieldRate` function with signature `yieldRate()` and selector `0x6999ac93`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct YieldRateReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `yields` function with signature `yields(address)` and selector `0x50fe98ac`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct YieldsReturn(pub ::ethers::core::types::U256);
}
