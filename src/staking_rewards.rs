pub use staking_rewards::*;
#[allow(
    clippy::too_many_arguments,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
pub mod staking_rewards {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!StakingRewards was auto-generated with ethers-rs Abigen. More information at: <https://github.com/gakonst/ethers-rs>
    use ::ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ::ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ::ethers::providers::Middleware;
    use std::sync::Arc;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RewardAdded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RewardPaid\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Staked\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Withdrawn\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exit\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getReward\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"notifyRewardAmount\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setRewardDistribution\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"snx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stake\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"uni\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static STAKINGREWARDS_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        0,
        96,
        6,
        85,
        96,
        0,
        96,
        7,
        85,
        52,
        128,
        21,
        97,
        0,
        26,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        18,
        190,
        56,
        3,
        128,
        97,
        18,
        190,
        131,
        57,
        129,
        129,
        1,
        96,
        64,
        82,
        96,
        64,
        129,
        16,
        21,
        97,
        0,
        61,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        81,
        96,
        32,
        144,
        145,
        1,
        81,
        97,
        0,
        87,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        97,
        0,
        212,
        22,
        86,
        91,
        96,
        3,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        131,
        22,
        23,
        144,
        129,
        144,
        85,
        96,
        64,
        81,
        145,
        22,
        144,
        96,
        0,
        144,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        144,
        130,
        144,
        163,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        132,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        145,
        130,
        22,
        23,
        144,
        145,
        85,
        96,
        5,
        128,
        84,
        146,
        144,
        147,
        22,
        145,
        22,
        23,
        144,
        85,
        97,
        0,
        216,
        86,
        91,
        51,
        144,
        86,
        91,
        97,
        17,
        215,
        128,
        97,
        0,
        231,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        1,
        87,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        139,
        135,
        99,
        71,
        17,
        97,
        0,
        195,
        87,
        128,
        99,
        223,
        19,
        109,
        101,
        17,
        97,
        0,
        124,
        87,
        128,
        99,
        223,
        19,
        109,
        101,
        20,
        97,
        3,
        5,
        87,
        128,
        99,
        231,
        210,
        121,
        152,
        20,
        97,
        3,
        13,
        87,
        128,
        99,
        233,
        250,
        216,
        238,
        20,
        97,
        3,
        21,
        87,
        128,
        99,
        235,
        226,
        177,
        43,
        20,
        97,
        3,
        29,
        87,
        128,
        99,
        237,
        201,
        175,
        149,
        20,
        97,
        3,
        37,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        3,
        45,
        87,
        97,
        1,
        87,
        86,
        91,
        128,
        99,
        139,
        135,
        99,
        71,
        20,
        97,
        2,
        114,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        2,
        152,
        87,
        128,
        99,
        143,
        50,
        213,
        155,
        20,
        97,
        2,
        188,
        87,
        128,
        99,
        166,
        148,
        252,
        58,
        20,
        97,
        2,
        216,
        87,
        128,
        99,
        200,
        243,
        60,
        145,
        20,
        97,
        2,
        245,
        87,
        128,
        99,
        205,
        61,
        175,
        157,
        20,
        97,
        2,
        253,
        87,
        97,
        1,
        87,
        86,
        91,
        128,
        99,
        60,
        107,
        22,
        171,
        17,
        97,
        1,
        21,
        87,
        128,
        99,
        60,
        107,
        22,
        171,
        20,
        97,
        2,
        15,
        87,
        128,
        99,
        61,
        24,
        185,
        18,
        20,
        97,
        2,
        44,
        87,
        128,
        99,
        112,
        160,
        130,
        49,
        20,
        97,
        2,
        52,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        2,
        90,
        87,
        128,
        99,
        123,
        10,
        71,
        238,
        20,
        97,
        2,
        98,
        87,
        128,
        99,
        128,
        250,
        165,
        125,
        20,
        97,
        2,
        106,
        87,
        97,
        1,
        87,
        86,
        91,
        128,
        98,
        140,
        194,
        98,
        20,
        97,
        1,
        92,
        87,
        128,
        99,
        7,
        0,
        3,
        125,
        20,
        97,
        1,
        148,
        87,
        128,
        99,
        13,
        104,
        183,
        97,
        20,
        97,
        1,
        186,
        87,
        128,
        99,
        24,
        22,
        13,
        221,
        20,
        97,
        1,
        226,
        87,
        128,
        99,
        27,
        224,
        82,
        137,
        20,
        97,
        1,
        234,
        87,
        128,
        99,
        46,
        26,
        125,
        77,
        20,
        97,
        1,
        242,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        130,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        1,
        114,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        3,
        83,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        1,
        130,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        1,
        170,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        3,
        217,
        86,
        91,
        97,
        1,
        224,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        1,
        208,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        3,
        235,
        86,
        91,
        0,
        91,
        97,
        1,
        130,
        97,
        4,
        102,
        86,
        91,
        97,
        1,
        130,
        97,
        4,
        109,
        86,
        91,
        97,
        1,
        224,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        2,
        8,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        4,
        116,
        86,
        91,
        97,
        1,
        224,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        2,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        5,
        91,
        86,
        91,
        97,
        1,
        224,
        97,
        6,
        213,
        86,
        91,
        97,
        1,
        130,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        2,
        74,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        7,
        167,
        86,
        91,
        97,
        1,
        224,
        97,
        7,
        194,
        86,
        91,
        97,
        1,
        130,
        97,
        8,
        101,
        86,
        91,
        97,
        1,
        130,
        97,
        8,
        107,
        86,
        91,
        97,
        1,
        130,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        2,
        136,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        8,
        126,
        86,
        91,
        97,
        2,
        160,
        97,
        8,
        144,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        2,
        196,
        97,
        8,
        159,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        21,
        21,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        1,
        224,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        2,
        238,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        8,
        197,
        86,
        91,
        97,
        1,
        130,
        97,
        9,
        169,
        86,
        91,
        97,
        1,
        130,
        97,
        9,
        175,
        86,
        91,
        97,
        1,
        130,
        97,
        10,
        3,
        86,
        91,
        97,
        2,
        160,
        97,
        10,
        9,
        86,
        91,
        97,
        1,
        224,
        97,
        10,
        24,
        86,
        91,
        97,
        1,
        130,
        97,
        10,
        51,
        86,
        91,
        97,
        2,
        160,
        97,
        10,
        57,
        86,
        91,
        97,
        1,
        224,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        3,
        67,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        10,
        72,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        11,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        84,
        96,
        10,
        144,
        146,
        82,
        130,
        32,
        84,
        97,
        3,
        211,
        145,
        144,
        97,
        3,
        199,
        144,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        144,
        97,
        3,
        187,
        144,
        97,
        3,
        166,
        144,
        97,
        3,
        154,
        97,
        9,
        175,
        86,
        91,
        144,
        99,
        255,
        255,
        255,
        255,
        97,
        10,
        173,
        22,
        86,
        91,
        97,
        3,
        175,
        136,
        97,
        7,
        167,
        86,
        91,
        144,
        99,
        255,
        255,
        255,
        255,
        97,
        10,
        246,
        22,
        86,
        91,
        144,
        99,
        255,
        255,
        255,
        255,
        97,
        11,
        79,
        22,
        86,
        91,
        144,
        99,
        255,
        255,
        255,
        255,
        97,
        11,
        145,
        22,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        11,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        3,
        243,
        97,
        8,
        159,
        86,
        91,
        97,
        4,
        68,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        96,
        4,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        1,
        84,
        91,
        144,
        86,
        91,
        98,
        9,
        58,
        128,
        129,
        86,
        91,
        51,
        97,
        4,
        125,
        97,
        9,
        175,
        86,
        91,
        96,
        9,
        85,
        97,
        4,
        136,
        97,
        8,
        107,
        86,
        91,
        96,
        8,
        85,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        97,
        4,
        207,
        87,
        97,
        4,
        163,
        129,
        97,
        3,
        83,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        11,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        147,
        144,
        147,
        85,
        96,
        9,
        84,
        96,
        10,
        144,
        145,
        82,
        145,
        144,
        32,
        85,
        91,
        96,
        0,
        130,
        17,
        97,
        5,
        24,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        17,
        96,
        36,
        130,
        1,
        82,
        112,
        4,
        54,
        22,
        230,
        230,
        247,
        66,
        7,
        118,
        151,
        70,
        134,
        71,
        38,
        23,
        114,
        3,
        96,
        124,
        27,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        97,
        5,
        33,
        130,
        97,
        11,
        235,
        86,
        91,
        96,
        64,
        128,
        81,
        131,
        129,
        82,
        144,
        81,
        51,
        145,
        127,
        112,
        132,
        245,
        71,
        102,
        24,
        216,
        230,
        11,
        17,
        239,
        13,
        125,
        63,
        6,
        145,
        70,
        85,
        173,
        184,
        121,
        62,
        40,
        255,
        127,
        1,
        141,
        76,
        118,
        213,
        5,
        213,
        145,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        4,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        5,
        111,
        97,
        12,
        76,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        5,
        180,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        128,
        128,
        96,
        32,
        1,
        130,
        129,
        3,
        130,
        82,
        96,
        33,
        129,
        82,
        96,
        32,
        1,
        128,
        97,
        17,
        88,
        96,
        33,
        145,
        57,
        96,
        64,
        1,
        145,
        80,
        80,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        5,
        190,
        97,
        9,
        175,
        86,
        91,
        96,
        9,
        85,
        97,
        5,
        201,
        97,
        8,
        107,
        86,
        91,
        96,
        8,
        85,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        97,
        6,
        16,
        87,
        97,
        5,
        228,
        129,
        97,
        3,
        83,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        11,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        147,
        144,
        147,
        85,
        96,
        9,
        84,
        96,
        10,
        144,
        145,
        82,
        145,
        144,
        32,
        85,
        91,
        96,
        6,
        84,
        66,
        16,
        97,
        6,
        52,
        87,
        97,
        6,
        44,
        130,
        98,
        9,
        58,
        128,
        99,
        255,
        255,
        255,
        255,
        97,
        11,
        79,
        22,
        86,
        91,
        96,
        7,
        85,
        97,
        6,
        130,
        86,
        91,
        96,
        6,
        84,
        96,
        0,
        144,
        97,
        6,
        74,
        144,
        66,
        99,
        255,
        255,
        255,
        255,
        97,
        10,
        173,
        22,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        6,
        99,
        96,
        7,
        84,
        131,
        97,
        10,
        246,
        144,
        145,
        144,
        99,
        255,
        255,
        255,
        255,
        22,
        86,
        91,
        144,
        80,
        97,
        6,
        124,
        98,
        9,
        58,
        128,
        97,
        3,
        187,
        134,
        132,
        99,
        255,
        255,
        255,
        255,
        97,
        11,
        145,
        22,
        86,
        91,
        96,
        7,
        85,
        80,
        80,
        91,
        66,
        96,
        8,
        129,
        144,
        85,
        97,
        6,
        155,
        144,
        98,
        9,
        58,
        128,
        99,
        255,
        255,
        255,
        255,
        97,
        11,
        145,
        22,
        86,
        91,
        96,
        6,
        85,
        96,
        64,
        128,
        81,
        131,
        129,
        82,
        144,
        81,
        127,
        222,
        136,
        169,
        34,
        224,
        211,
        184,
        139,
        36,
        233,
        98,
        62,
        254,
        180,
        100,
        145,
        156,
        107,
        249,
        246,
        104,
        87,
        166,
        94,
        43,
        252,
        242,
        206,
        135,
        169,
        67,
        61,
        145,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        161,
        80,
        80,
        86,
        91,
        51,
        97,
        6,
        222,
        97,
        9,
        175,
        86,
        91,
        96,
        9,
        85,
        97,
        6,
        233,
        97,
        8,
        107,
        86,
        91,
        96,
        8,
        85,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        97,
        7,
        48,
        87,
        97,
        7,
        4,
        129,
        97,
        3,
        83,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        11,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        147,
        144,
        147,
        85,
        96,
        9,
        84,
        96,
        10,
        144,
        145,
        82,
        145,
        144,
        32,
        85,
        91,
        96,
        0,
        97,
        7,
        59,
        51,
        97,
        3,
        83,
        86,
        91,
        144,
        80,
        128,
        21,
        97,
        7,
        163,
        87,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        11,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        85,
        96,
        5,
        84,
        97,
        7,
        108,
        145,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        131,
        97,
        12,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        130,
        129,
        82,
        144,
        81,
        51,
        145,
        127,
        226,
        64,
        54,
        64,
        186,
        104,
        254,
        211,
        162,
        248,
        139,
        117,
        87,
        85,
        29,
        25,
        147,
        248,
        75,
        153,
        187,
        16,
        255,
        131,
        63,
        12,
        248,
        219,
        12,
        94,
        4,
        134,
        145,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        162,
        91,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        144,
        86,
        91,
        97,
        7,
        202,
        97,
        8,
        159,
        86,
        91,
        97,
        8,
        27,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        96,
        3,
        84,
        96,
        64,
        81,
        96,
        0,
        145,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        144,
        131,
        144,
        163,
        96,
        3,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        86,
        91,
        96,
        7,
        84,
        129,
        86,
        91,
        96,
        0,
        97,
        8,
        121,
        66,
        96,
        6,
        84,
        97,
        12,
        167,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        96,
        10,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        96,
        3,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        86,
        91,
        96,
        3,
        84,
        96,
        0,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        8,
        182,
        97,
        12,
        76,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        144,
        80,
        144,
        86,
        91,
        51,
        97,
        8,
        206,
        97,
        9,
        175,
        86,
        91,
        96,
        9,
        85,
        97,
        8,
        217,
        97,
        8,
        107,
        86,
        91,
        96,
        8,
        85,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        97,
        9,
        32,
        87,
        97,
        8,
        244,
        129,
        97,
        3,
        83,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        11,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        147,
        144,
        147,
        85,
        96,
        9,
        84,
        96,
        10,
        144,
        145,
        82,
        145,
        144,
        32,
        85,
        91,
        96,
        0,
        130,
        17,
        97,
        9,
        102,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        14,
        96,
        36,
        130,
        1,
        82,
        109,
        4,
        54,
        22,
        230,
        230,
        247,
        66,
        7,
        55,
        70,
        22,
        182,
        82,
        3,
        96,
        148,
        27,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        97,
        9,
        111,
        130,
        97,
        12,
        189,
        86,
        91,
        96,
        64,
        128,
        81,
        131,
        129,
        82,
        144,
        81,
        51,
        145,
        127,
        158,
        113,
        188,
        142,
        234,
        2,
        166,
        57,
        105,
        245,
        9,
        129,
        143,
        45,
        175,
        185,
        37,
        69,
        50,
        144,
        67,
        25,
        249,
        219,
        218,
        121,
        182,
        123,
        211,
        74,
        95,
        61,
        145,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        8,
        84,
        129,
        86,
        91,
        96,
        0,
        97,
        9,
        185,
        97,
        4,
        102,
        86,
        91,
        97,
        9,
        198,
        87,
        80,
        96,
        9,
        84,
        97,
        4,
        106,
        86,
        91,
        97,
        8,
        121,
        97,
        9,
        244,
        97,
        9,
        212,
        97,
        4,
        102,
        86,
        91,
        97,
        3,
        187,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        3,
        175,
        96,
        7,
        84,
        97,
        3,
        175,
        96,
        8,
        84,
        97,
        3,
        154,
        97,
        8,
        107,
        86,
        91,
        96,
        9,
        84,
        144,
        99,
        255,
        255,
        255,
        255,
        97,
        11,
        145,
        22,
        86,
        91,
        96,
        9,
        84,
        129,
        86,
        91,
        96,
        5,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        10,
        41,
        97,
        10,
        36,
        51,
        97,
        7,
        167,
        86,
        91,
        97,
        4,
        116,
        86,
        91,
        97,
        10,
        49,
        97,
        6,
        213,
        86,
        91,
        86,
        91,
        96,
        6,
        84,
        129,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        10,
        80,
        97,
        8,
        159,
        86,
        91,
        97,
        10,
        161,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        97,
        10,
        170,
        129,
        97,
        13,
        31,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        97,
        10,
        239,
        131,
        131,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        30,
        129,
        82,
        96,
        32,
        1,
        127,
        83,
        97,
        102,
        101,
        77,
        97,
        116,
        104,
        58,
        32,
        115,
        117,
        98,
        116,
        114,
        97,
        99,
        116,
        105,
        111,
        110,
        32,
        111,
        118,
        101,
        114,
        102,
        108,
        111,
        119,
        0,
        0,
        129,
        82,
        80,
        97,
        13,
        192,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        97,
        11,
        5,
        87,
        80,
        96,
        0,
        97,
        3,
        211,
        86,
        91,
        130,
        130,
        2,
        130,
        132,
        130,
        129,
        97,
        11,
        18,
        87,
        254,
        91,
        4,
        20,
        97,
        10,
        239,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        128,
        128,
        96,
        32,
        1,
        130,
        129,
        3,
        130,
        82,
        96,
        33,
        129,
        82,
        96,
        32,
        1,
        128,
        97,
        17,
        55,
        96,
        33,
        145,
        57,
        96,
        64,
        1,
        145,
        80,
        80,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        97,
        10,
        239,
        131,
        131,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        26,
        129,
        82,
        96,
        32,
        1,
        127,
        83,
        97,
        102,
        101,
        77,
        97,
        116,
        104,
        58,
        32,
        100,
        105,
        118,
        105,
        115,
        105,
        111,
        110,
        32,
        98,
        121,
        32,
        122,
        101,
        114,
        111,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        80,
        97,
        14,
        87,
        86,
        91,
        96,
        0,
        130,
        130,
        1,
        131,
        129,
        16,
        21,
        97,
        10,
        239,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        27,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        77,
        97,
        116,
        104,
        58,
        32,
        97,
        100,
        100,
        105,
        116,
        105,
        111,
        110,
        32,
        111,
        118,
        101,
        114,
        102,
        108,
        111,
        119,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        96,
        1,
        84,
        97,
        11,
        254,
        144,
        130,
        99,
        255,
        255,
        255,
        255,
        97,
        10,
        173,
        22,
        86,
        91,
        96,
        1,
        85,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        97,
        12,
        33,
        144,
        130,
        99,
        255,
        255,
        255,
        255,
        97,
        10,
        173,
        22,
        86,
        91,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        146,
        144,
        146,
        85,
        144,
        84,
        97,
        10,
        170,
        145,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        131,
        97,
        12,
        80,
        86,
        91,
        51,
        144,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        128,
        130,
        1,
        132,
        144,
        82,
        130,
        81,
        128,
        131,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        100,
        144,
        145,
        1,
        144,
        145,
        82,
        96,
        32,
        129,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        23,
        144,
        82,
        97,
        12,
        162,
        144,
        132,
        144,
        97,
        14,
        188,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        131,
        16,
        97,
        12,
        182,
        87,
        129,
        97,
        10,
        239,
        86,
        91,
        80,
        144,
        145,
        144,
        80,
        86,
        91,
        96,
        1,
        84,
        97,
        12,
        208,
        144,
        130,
        99,
        255,
        255,
        255,
        255,
        97,
        11,
        145,
        22,
        86,
        91,
        96,
        1,
        85,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        97,
        12,
        243,
        144,
        130,
        99,
        255,
        255,
        255,
        255,
        97,
        11,
        145,
        22,
        86,
        91,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        146,
        144,
        146,
        85,
        144,
        84,
        97,
        10,
        170,
        145,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        48,
        132,
        97,
        16,
        122,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        13,
        100,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        128,
        128,
        96,
        32,
        1,
        130,
        129,
        3,
        130,
        82,
        96,
        38,
        129,
        82,
        96,
        32,
        1,
        128,
        97,
        17,
        17,
        96,
        38,
        145,
        57,
        96,
        64,
        1,
        145,
        80,
        80,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        3,
        84,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        132,
        22,
        146,
        22,
        144,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        144,
        96,
        0,
        144,
        163,
        96,
        3,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        129,
        132,
        132,
        17,
        21,
        97,
        14,
        79,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        128,
        128,
        96,
        32,
        1,
        130,
        129,
        3,
        130,
        82,
        131,
        129,
        129,
        81,
        129,
        82,
        96,
        32,
        1,
        145,
        80,
        128,
        81,
        144,
        96,
        32,
        1,
        144,
        128,
        131,
        131,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        14,
        20,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        13,
        252,
        86,
        91,
        80,
        80,
        80,
        80,
        144,
        80,
        144,
        129,
        1,
        144,
        96,
        31,
        22,
        128,
        21,
        97,
        14,
        65,
        87,
        128,
        130,
        3,
        128,
        81,
        96,
        1,
        131,
        96,
        32,
        3,
        97,
        1,
        0,
        10,
        3,
        25,
        22,
        129,
        82,
        96,
        32,
        1,
        145,
        80,
        91,
        80,
        146,
        80,
        80,
        80,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        80,
        144,
        3,
        144,
        86,
        91,
        96,
        0,
        129,
        131,
        97,
        14,
        166,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        129,
        82,
        131,
        81,
        96,
        36,
        132,
        1,
        82,
        131,
        81,
        144,
        146,
        131,
        146,
        96,
        68,
        144,
        145,
        1,
        145,
        144,
        133,
        1,
        144,
        128,
        131,
        131,
        96,
        0,
        131,
        21,
        97,
        14,
        20,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        13,
        252,
        86,
        91,
        80,
        96,
        0,
        131,
        133,
        129,
        97,
        14,
        178,
        87,
        254,
        91,
        4,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        14,
        206,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        16,
        212,
        86,
        91,
        97,
        15,
        31,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        96,
        0,
        96,
        96,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        96,
        64,
        81,
        128,
        130,
        128,
        81,
        144,
        96,
        32,
        1,
        144,
        128,
        131,
        131,
        91,
        96,
        32,
        131,
        16,
        97,
        15,
        93,
        87,
        128,
        81,
        130,
        82,
        96,
        31,
        25,
        144,
        146,
        1,
        145,
        96,
        32,
        145,
        130,
        1,
        145,
        1,
        97,
        15,
        62,
        86,
        91,
        96,
        1,
        131,
        96,
        32,
        3,
        97,
        1,
        0,
        10,
        3,
        128,
        25,
        130,
        81,
        22,
        129,
        132,
        81,
        22,
        128,
        130,
        23,
        133,
        82,
        80,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        1,
        145,
        80,
        80,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        134,
        90,
        241,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        15,
        191,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        15,
        196,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        97,
        16,
        27,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        128,
        81,
        21,
        97,
        16,
        116,
        87,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        96,
        32,
        129,
        16,
        21,
        97,
        16,
        55,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        97,
        16,
        116,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        128,
        128,
        96,
        32,
        1,
        130,
        129,
        3,
        130,
        82,
        96,
        42,
        129,
        82,
        96,
        32,
        1,
        128,
        97,
        17,
        121,
        96,
        42,
        145,
        57,
        96,
        64,
        1,
        145,
        80,
        80,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        129,
        22,
        96,
        36,
        131,
        1,
        82,
        132,
        22,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        128,
        130,
        1,
        132,
        144,
        82,
        130,
        81,
        128,
        131,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        132,
        144,
        145,
        1,
        144,
        145,
        82,
        96,
        32,
        129,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        23,
        144,
        82,
        97,
        16,
        116,
        144,
        133,
        144,
        97,
        14,
        188,
        86,
        91,
        96,
        0,
        129,
        63,
        127,
        197,
        210,
        70,
        1,
        134,
        247,
        35,
        60,
        146,
        126,
        125,
        178,
        220,
        199,
        3,
        192,
        229,
        0,
        182,
        83,
        202,
        130,
        39,
        59,
        123,
        250,
        216,
        4,
        93,
        133,
        164,
        112,
        129,
        21,
        128,
        21,
        144,
        97,
        17,
        8,
        87,
        80,
        128,
        130,
        20,
        21,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        254,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        83,
        97,
        102,
        101,
        77,
        97,
        116,
        104,
        58,
        32,
        109,
        117,
        108,
        116,
        105,
        112,
        108,
        105,
        99,
        97,
        116,
        105,
        111,
        110,
        32,
        111,
        118,
        101,
        114,
        102,
        108,
        111,
        119,
        67,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        114,
        101,
        119,
        97,
        114,
        100,
        32,
        100,
        105,
        115,
        116,
        114,
        105,
        98,
        117,
        116,
        105,
        111,
        110,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        69,
        82,
        67,
        50,
        48,
        32,
        111,
        112,
        101,
        114,
        97,
        116,
        105,
        111,
        110,
        32,
        100,
        105,
        100,
        32,
        110,
        111,
        116,
        32,
        115,
        117,
        99,
        99,
        101,
        101,
        100,
        162,
        101,
        98,
        122,
        122,
        114,
        49,
        88,
        32,
        178,
        251,
        170,
        70,
        96,
        184,
        145,
        7,
        162,
        74,
        54,
        180,
        211,
        33,
        27,
        239,
        184,
        114,
        224,
        227,
        165,
        19,
        40,
        109,
        111,
        159,
        85,
        121,
        224,
        103,
        104,
        68,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        5,
        17,
        0,
        50,
    ];
    ///The bytecode of the contract.
    lazy_static::lazy_static! {
            pub static ref STAKINGREWARDS_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from(
            __BYTECODE.to_vec(),
        );
    }
    pub struct StakingRewards<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for StakingRewards<M> {
        fn clone(&self) -> Self {
            StakingRewards(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for StakingRewards<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for StakingRewards<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(StakingRewards))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> StakingRewards<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                STAKINGREWARDS_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                STAKINGREWARDS_ABI.clone(),
                STAKINGREWARDS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `DURATION` (0x1be05289) function
        pub fn duration(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([27, 224, 82, 137], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `balanceOf` (0x70a08231) function
        pub fn balance_of(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([112, 160, 130, 49], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `earned` (0x008cc262) function
        pub fn earned(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([0, 140, 194, 98], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `exit` (0xe9fad8ee) function
        pub fn exit(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 250, 216, 238], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getReward` (0x3d18b912) function
        pub fn get_reward(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([61, 24, 185, 18], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isOwner` (0x8f32d59b) function
        pub fn is_owner(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([143, 50, 213, 155], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastTimeRewardApplicable` (0x80faa57d) function
        pub fn last_time_reward_applicable(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([128, 250, 165, 125], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastUpdateTime` (0xc8f33c91) function
        pub fn last_update_time(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([200, 243, 60, 145], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `notifyRewardAmount` (0x3c6b16ab) function
        pub fn notify_reward_amount(
            &self,
            reward: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([60, 107, 22, 171], reward)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `periodFinish` (0xebe2b12b) function
        pub fn period_finish(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([235, 226, 177, 43], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewardPerToken` (0xcd3daf9d) function
        pub fn reward_per_token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([205, 61, 175, 157], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewardPerTokenStored` (0xdf136d65) function
        pub fn reward_per_token_stored(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([223, 19, 109, 101], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewardRate` (0x7b0a47ee) function
        pub fn reward_rate(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([123, 10, 71, 238], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewards` (0x0700037d) function
        pub fn rewards(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([7, 0, 3, 125], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setRewardDistribution` (0x0d68b761) function
        pub fn set_reward_distribution(
            &self,
            reward_distribution: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([13, 104, 183, 97], reward_distribution)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `snx` (0xe7d27998) function
        pub fn snx(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([231, 210, 121, 152], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `stake` (0xa694fc3a) function
        pub fn stake(
            &self,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([166, 148, 252, 58], amount)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalSupply` (0x18160ddd) function
        pub fn total_supply(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([24, 22, 13, 221], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uni` (0xedc9af95) function
        pub fn uni(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([237, 201, 175, 149], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `userRewardPerTokenPaid` (0x8b876347) function
        pub fn user_reward_per_token_paid(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([139, 135, 99, 71], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `withdraw` (0x2e1a7d4d) function
        pub fn withdraw(
            &self,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([46, 26, 125, 77], amount)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        ///Gets the contract's `RewardAdded` event
        pub fn reward_added_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RewardAddedFilter> {
            self.0.event()
        }
        ///Gets the contract's `RewardPaid` event
        pub fn reward_paid_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RewardPaidFilter> {
            self.0.event()
        }
        ///Gets the contract's `Staked` event
        pub fn staked_filter(&self) -> ::ethers::contract::builders::Event<M, StakedFilter> {
            self.0.event()
        }
        ///Gets the contract's `Withdrawn` event
        pub fn withdrawn_filter(&self) -> ::ethers::contract::builders::Event<M, WithdrawnFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(&self) -> ::ethers::contract::builders::Event<M, StakingRewardsEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for StakingRewards<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "RewardAdded", abi = "RewardAdded(uint256)")]
    pub struct RewardAddedFilter {
        pub reward: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "RewardPaid", abi = "RewardPaid(address,uint256)")]
    pub struct RewardPaidFilter {
        #[ethevent(indexed)]
        pub user: ::ethers::core::types::Address,
        pub reward: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "Staked", abi = "Staked(address,uint256)")]
    pub struct StakedFilter {
        #[ethevent(indexed)]
        pub user: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "Withdrawn", abi = "Withdrawn(address,uint256)")]
    pub struct WithdrawnFilter {
        #[ethevent(indexed)]
        pub user: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum StakingRewardsEvents {
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        RewardAddedFilter(RewardAddedFilter),
        RewardPaidFilter(RewardPaidFilter),
        StakedFilter(StakedFilter),
        WithdrawnFilter(WithdrawnFilter),
    }
    impl ::ethers::contract::EthLogDecode for StakingRewardsEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(StakingRewardsEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = RewardAddedFilter::decode_log(log) {
                return Ok(StakingRewardsEvents::RewardAddedFilter(decoded));
            }
            if let Ok(decoded) = RewardPaidFilter::decode_log(log) {
                return Ok(StakingRewardsEvents::RewardPaidFilter(decoded));
            }
            if let Ok(decoded) = StakedFilter::decode_log(log) {
                return Ok(StakingRewardsEvents::StakedFilter(decoded));
            }
            if let Ok(decoded) = WithdrawnFilter::decode_log(log) {
                return Ok(StakingRewardsEvents::WithdrawnFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for StakingRewardsEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                StakingRewardsEvents::OwnershipTransferredFilter(element) => element.fmt(f),
                StakingRewardsEvents::RewardAddedFilter(element) => element.fmt(f),
                StakingRewardsEvents::RewardPaidFilter(element) => element.fmt(f),
                StakingRewardsEvents::StakedFilter(element) => element.fmt(f),
                StakingRewardsEvents::WithdrawnFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `DURATION` function with signature `DURATION()` and selector `0x1be05289`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "DURATION", abi = "DURATION()")]
    pub struct DurationCall;
    ///Container type for all input parameters for the `balanceOf` function with signature `balanceOf(address)` and selector `0x70a08231`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "balanceOf", abi = "balanceOf(address)")]
    pub struct BalanceOfCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `earned` function with signature `earned(address)` and selector `0x008cc262`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "earned", abi = "earned(address)")]
    pub struct EarnedCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `exit` function with signature `exit()` and selector `0xe9fad8ee`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "exit", abi = "exit()")]
    pub struct ExitCall;
    ///Container type for all input parameters for the `getReward` function with signature `getReward()` and selector `0x3d18b912`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getReward", abi = "getReward()")]
    pub struct GetRewardCall;
    ///Container type for all input parameters for the `isOwner` function with signature `isOwner()` and selector `0x8f32d59b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "isOwner", abi = "isOwner()")]
    pub struct IsOwnerCall;
    ///Container type for all input parameters for the `lastTimeRewardApplicable` function with signature `lastTimeRewardApplicable()` and selector `0x80faa57d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lastTimeRewardApplicable", abi = "lastTimeRewardApplicable()")]
    pub struct LastTimeRewardApplicableCall;
    ///Container type for all input parameters for the `lastUpdateTime` function with signature `lastUpdateTime()` and selector `0xc8f33c91`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lastUpdateTime", abi = "lastUpdateTime()")]
    pub struct LastUpdateTimeCall;
    ///Container type for all input parameters for the `notifyRewardAmount` function with signature `notifyRewardAmount(uint256)` and selector `0x3c6b16ab`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "notifyRewardAmount", abi = "notifyRewardAmount(uint256)")]
    pub struct NotifyRewardAmountCall {
        pub reward: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `periodFinish` function with signature `periodFinish()` and selector `0xebe2b12b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "periodFinish", abi = "periodFinish()")]
    pub struct PeriodFinishCall;
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `rewardPerToken` function with signature `rewardPerToken()` and selector `0xcd3daf9d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewardPerToken", abi = "rewardPerToken()")]
    pub struct RewardPerTokenCall;
    ///Container type for all input parameters for the `rewardPerTokenStored` function with signature `rewardPerTokenStored()` and selector `0xdf136d65`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewardPerTokenStored", abi = "rewardPerTokenStored()")]
    pub struct RewardPerTokenStoredCall;
    ///Container type for all input parameters for the `rewardRate` function with signature `rewardRate()` and selector `0x7b0a47ee`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewardRate", abi = "rewardRate()")]
    pub struct RewardRateCall;
    ///Container type for all input parameters for the `rewards` function with signature `rewards(address)` and selector `0x0700037d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewards", abi = "rewards(address)")]
    pub struct RewardsCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `setRewardDistribution` function with signature `setRewardDistribution(address)` and selector `0x0d68b761`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setRewardDistribution", abi = "setRewardDistribution(address)")]
    pub struct SetRewardDistributionCall {
        pub reward_distribution: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `snx` function with signature `snx()` and selector `0xe7d27998`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "snx", abi = "snx()")]
    pub struct SnxCall;
    ///Container type for all input parameters for the `stake` function with signature `stake(uint256)` and selector `0xa694fc3a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "stake", abi = "stake(uint256)")]
    pub struct StakeCall {
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `totalSupply` function with signature `totalSupply()` and selector `0x18160ddd`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "totalSupply", abi = "totalSupply()")]
    pub struct TotalSupplyCall;
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `uni` function with signature `uni()` and selector `0xedc9af95`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "uni", abi = "uni()")]
    pub struct UniCall;
    ///Container type for all input parameters for the `userRewardPerTokenPaid` function with signature `userRewardPerTokenPaid(address)` and selector `0x8b876347`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "userRewardPerTokenPaid",
        abi = "userRewardPerTokenPaid(address)"
    )]
    pub struct UserRewardPerTokenPaidCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `withdraw` function with signature `withdraw(uint256)` and selector `0x2e1a7d4d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "withdraw", abi = "withdraw(uint256)")]
    pub struct WithdrawCall {
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum StakingRewardsCalls {
        Duration(DurationCall),
        BalanceOf(BalanceOfCall),
        Earned(EarnedCall),
        Exit(ExitCall),
        GetReward(GetRewardCall),
        IsOwner(IsOwnerCall),
        LastTimeRewardApplicable(LastTimeRewardApplicableCall),
        LastUpdateTime(LastUpdateTimeCall),
        NotifyRewardAmount(NotifyRewardAmountCall),
        Owner(OwnerCall),
        PeriodFinish(PeriodFinishCall),
        RenounceOwnership(RenounceOwnershipCall),
        RewardPerToken(RewardPerTokenCall),
        RewardPerTokenStored(RewardPerTokenStoredCall),
        RewardRate(RewardRateCall),
        Rewards(RewardsCall),
        SetRewardDistribution(SetRewardDistributionCall),
        Snx(SnxCall),
        Stake(StakeCall),
        TotalSupply(TotalSupplyCall),
        TransferOwnership(TransferOwnershipCall),
        Uni(UniCall),
        UserRewardPerTokenPaid(UserRewardPerTokenPaidCall),
        Withdraw(WithdrawCall),
    }
    impl ::ethers::core::abi::AbiDecode for StakingRewardsCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <DurationCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::Duration(decoded));
            }
            if let Ok(decoded) =
                <BalanceOfCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::BalanceOf(decoded));
            }
            if let Ok(decoded) =
                <EarnedCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::Earned(decoded));
            }
            if let Ok(decoded) = <ExitCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::Exit(decoded));
            }
            if let Ok(decoded) =
                <GetRewardCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::GetReward(decoded));
            }
            if let Ok(decoded) =
                <IsOwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::IsOwner(decoded));
            }
            if let Ok(decoded) =
                <LastTimeRewardApplicableCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(StakingRewardsCalls::LastTimeRewardApplicable(decoded));
            }
            if let Ok(decoded) =
                <LastUpdateTimeCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::LastUpdateTime(decoded));
            }
            if let Ok(decoded) =
                <NotifyRewardAmountCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::NotifyRewardAmount(decoded));
            }
            if let Ok(decoded) =
                <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::Owner(decoded));
            }
            if let Ok(decoded) =
                <PeriodFinishCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::PeriodFinish(decoded));
            }
            if let Ok(decoded) =
                <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::RenounceOwnership(decoded));
            }
            if let Ok(decoded) =
                <RewardPerTokenCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::RewardPerToken(decoded));
            }
            if let Ok(decoded) =
                <RewardPerTokenStoredCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::RewardPerTokenStored(decoded));
            }
            if let Ok(decoded) =
                <RewardRateCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::RewardRate(decoded));
            }
            if let Ok(decoded) =
                <RewardsCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::Rewards(decoded));
            }
            if let Ok(decoded) =
                <SetRewardDistributionCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::SetRewardDistribution(decoded));
            }
            if let Ok(decoded) = <SnxCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::Snx(decoded));
            }
            if let Ok(decoded) =
                <StakeCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::Stake(decoded));
            }
            if let Ok(decoded) =
                <TotalSupplyCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::TotalSupply(decoded));
            }
            if let Ok(decoded) =
                <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::TransferOwnership(decoded));
            }
            if let Ok(decoded) = <UniCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::Uni(decoded));
            }
            if let Ok(decoded) =
                <UserRewardPerTokenPaidCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(StakingRewardsCalls::UserRewardPerTokenPaid(decoded));
            }
            if let Ok(decoded) =
                <WithdrawCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(StakingRewardsCalls::Withdraw(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for StakingRewardsCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                StakingRewardsCalls::Duration(element) => element.encode(),
                StakingRewardsCalls::BalanceOf(element) => element.encode(),
                StakingRewardsCalls::Earned(element) => element.encode(),
                StakingRewardsCalls::Exit(element) => element.encode(),
                StakingRewardsCalls::GetReward(element) => element.encode(),
                StakingRewardsCalls::IsOwner(element) => element.encode(),
                StakingRewardsCalls::LastTimeRewardApplicable(element) => element.encode(),
                StakingRewardsCalls::LastUpdateTime(element) => element.encode(),
                StakingRewardsCalls::NotifyRewardAmount(element) => element.encode(),
                StakingRewardsCalls::Owner(element) => element.encode(),
                StakingRewardsCalls::PeriodFinish(element) => element.encode(),
                StakingRewardsCalls::RenounceOwnership(element) => element.encode(),
                StakingRewardsCalls::RewardPerToken(element) => element.encode(),
                StakingRewardsCalls::RewardPerTokenStored(element) => element.encode(),
                StakingRewardsCalls::RewardRate(element) => element.encode(),
                StakingRewardsCalls::Rewards(element) => element.encode(),
                StakingRewardsCalls::SetRewardDistribution(element) => element.encode(),
                StakingRewardsCalls::Snx(element) => element.encode(),
                StakingRewardsCalls::Stake(element) => element.encode(),
                StakingRewardsCalls::TotalSupply(element) => element.encode(),
                StakingRewardsCalls::TransferOwnership(element) => element.encode(),
                StakingRewardsCalls::Uni(element) => element.encode(),
                StakingRewardsCalls::UserRewardPerTokenPaid(element) => element.encode(),
                StakingRewardsCalls::Withdraw(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for StakingRewardsCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                StakingRewardsCalls::Duration(element) => element.fmt(f),
                StakingRewardsCalls::BalanceOf(element) => element.fmt(f),
                StakingRewardsCalls::Earned(element) => element.fmt(f),
                StakingRewardsCalls::Exit(element) => element.fmt(f),
                StakingRewardsCalls::GetReward(element) => element.fmt(f),
                StakingRewardsCalls::IsOwner(element) => element.fmt(f),
                StakingRewardsCalls::LastTimeRewardApplicable(element) => element.fmt(f),
                StakingRewardsCalls::LastUpdateTime(element) => element.fmt(f),
                StakingRewardsCalls::NotifyRewardAmount(element) => element.fmt(f),
                StakingRewardsCalls::Owner(element) => element.fmt(f),
                StakingRewardsCalls::PeriodFinish(element) => element.fmt(f),
                StakingRewardsCalls::RenounceOwnership(element) => element.fmt(f),
                StakingRewardsCalls::RewardPerToken(element) => element.fmt(f),
                StakingRewardsCalls::RewardPerTokenStored(element) => element.fmt(f),
                StakingRewardsCalls::RewardRate(element) => element.fmt(f),
                StakingRewardsCalls::Rewards(element) => element.fmt(f),
                StakingRewardsCalls::SetRewardDistribution(element) => element.fmt(f),
                StakingRewardsCalls::Snx(element) => element.fmt(f),
                StakingRewardsCalls::Stake(element) => element.fmt(f),
                StakingRewardsCalls::TotalSupply(element) => element.fmt(f),
                StakingRewardsCalls::TransferOwnership(element) => element.fmt(f),
                StakingRewardsCalls::Uni(element) => element.fmt(f),
                StakingRewardsCalls::UserRewardPerTokenPaid(element) => element.fmt(f),
                StakingRewardsCalls::Withdraw(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<DurationCall> for StakingRewardsCalls {
        fn from(var: DurationCall) -> Self {
            StakingRewardsCalls::Duration(var)
        }
    }
    impl ::std::convert::From<BalanceOfCall> for StakingRewardsCalls {
        fn from(var: BalanceOfCall) -> Self {
            StakingRewardsCalls::BalanceOf(var)
        }
    }
    impl ::std::convert::From<EarnedCall> for StakingRewardsCalls {
        fn from(var: EarnedCall) -> Self {
            StakingRewardsCalls::Earned(var)
        }
    }
    impl ::std::convert::From<ExitCall> for StakingRewardsCalls {
        fn from(var: ExitCall) -> Self {
            StakingRewardsCalls::Exit(var)
        }
    }
    impl ::std::convert::From<GetRewardCall> for StakingRewardsCalls {
        fn from(var: GetRewardCall) -> Self {
            StakingRewardsCalls::GetReward(var)
        }
    }
    impl ::std::convert::From<IsOwnerCall> for StakingRewardsCalls {
        fn from(var: IsOwnerCall) -> Self {
            StakingRewardsCalls::IsOwner(var)
        }
    }
    impl ::std::convert::From<LastTimeRewardApplicableCall> for StakingRewardsCalls {
        fn from(var: LastTimeRewardApplicableCall) -> Self {
            StakingRewardsCalls::LastTimeRewardApplicable(var)
        }
    }
    impl ::std::convert::From<LastUpdateTimeCall> for StakingRewardsCalls {
        fn from(var: LastUpdateTimeCall) -> Self {
            StakingRewardsCalls::LastUpdateTime(var)
        }
    }
    impl ::std::convert::From<NotifyRewardAmountCall> for StakingRewardsCalls {
        fn from(var: NotifyRewardAmountCall) -> Self {
            StakingRewardsCalls::NotifyRewardAmount(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for StakingRewardsCalls {
        fn from(var: OwnerCall) -> Self {
            StakingRewardsCalls::Owner(var)
        }
    }
    impl ::std::convert::From<PeriodFinishCall> for StakingRewardsCalls {
        fn from(var: PeriodFinishCall) -> Self {
            StakingRewardsCalls::PeriodFinish(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for StakingRewardsCalls {
        fn from(var: RenounceOwnershipCall) -> Self {
            StakingRewardsCalls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<RewardPerTokenCall> for StakingRewardsCalls {
        fn from(var: RewardPerTokenCall) -> Self {
            StakingRewardsCalls::RewardPerToken(var)
        }
    }
    impl ::std::convert::From<RewardPerTokenStoredCall> for StakingRewardsCalls {
        fn from(var: RewardPerTokenStoredCall) -> Self {
            StakingRewardsCalls::RewardPerTokenStored(var)
        }
    }
    impl ::std::convert::From<RewardRateCall> for StakingRewardsCalls {
        fn from(var: RewardRateCall) -> Self {
            StakingRewardsCalls::RewardRate(var)
        }
    }
    impl ::std::convert::From<RewardsCall> for StakingRewardsCalls {
        fn from(var: RewardsCall) -> Self {
            StakingRewardsCalls::Rewards(var)
        }
    }
    impl ::std::convert::From<SetRewardDistributionCall> for StakingRewardsCalls {
        fn from(var: SetRewardDistributionCall) -> Self {
            StakingRewardsCalls::SetRewardDistribution(var)
        }
    }
    impl ::std::convert::From<SnxCall> for StakingRewardsCalls {
        fn from(var: SnxCall) -> Self {
            StakingRewardsCalls::Snx(var)
        }
    }
    impl ::std::convert::From<StakeCall> for StakingRewardsCalls {
        fn from(var: StakeCall) -> Self {
            StakingRewardsCalls::Stake(var)
        }
    }
    impl ::std::convert::From<TotalSupplyCall> for StakingRewardsCalls {
        fn from(var: TotalSupplyCall) -> Self {
            StakingRewardsCalls::TotalSupply(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for StakingRewardsCalls {
        fn from(var: TransferOwnershipCall) -> Self {
            StakingRewardsCalls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<UniCall> for StakingRewardsCalls {
        fn from(var: UniCall) -> Self {
            StakingRewardsCalls::Uni(var)
        }
    }
    impl ::std::convert::From<UserRewardPerTokenPaidCall> for StakingRewardsCalls {
        fn from(var: UserRewardPerTokenPaidCall) -> Self {
            StakingRewardsCalls::UserRewardPerTokenPaid(var)
        }
    }
    impl ::std::convert::From<WithdrawCall> for StakingRewardsCalls {
        fn from(var: WithdrawCall) -> Self {
            StakingRewardsCalls::Withdraw(var)
        }
    }
    ///Container type for all return fields from the `DURATION` function with signature `DURATION()` and selector `0x1be05289`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct DurationReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `balanceOf` function with signature `balanceOf(address)` and selector `0x70a08231`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct BalanceOfReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `earned` function with signature `earned(address)` and selector `0x008cc262`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct EarnedReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `isOwner` function with signature `isOwner()` and selector `0x8f32d59b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct IsOwnerReturn(pub bool);
    ///Container type for all return fields from the `lastTimeRewardApplicable` function with signature `lastTimeRewardApplicable()` and selector `0x80faa57d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LastTimeRewardApplicableReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lastUpdateTime` function with signature `lastUpdateTime()` and selector `0xc8f33c91`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LastUpdateTimeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `periodFinish` function with signature `periodFinish()` and selector `0xebe2b12b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct PeriodFinishReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `rewardPerToken` function with signature `rewardPerToken()` and selector `0xcd3daf9d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardPerTokenReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `rewardPerTokenStored` function with signature `rewardPerTokenStored()` and selector `0xdf136d65`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardPerTokenStoredReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `rewardRate` function with signature `rewardRate()` and selector `0x7b0a47ee`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardRateReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `rewards` function with signature `rewards(address)` and selector `0x0700037d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardsReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `snx` function with signature `snx()` and selector `0xe7d27998`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct SnxReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `totalSupply` function with signature `totalSupply()` and selector `0x18160ddd`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct TotalSupplyReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `uni` function with signature `uni()` and selector `0xedc9af95`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct UniReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `userRewardPerTokenPaid` function with signature `userRewardPerTokenPaid(address)` and selector `0x8b876347`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct UserRewardPerTokenPaidReturn(pub ::ethers::core::types::U256);
}
