pub use orion_unified_farm_template::*;
#[allow(
    clippy::too_many_arguments,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
pub mod orion_unified_farm_template {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!OrionUnifiedFarmTemplate was auto-generated with ethers-rs Abigen. More information at: <https://github.com/gakonst/ethers-rs>
    use ::ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ::ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ::ethers::providers::Middleware;
    use std::sync::Arc;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"address[]\",\"name\":\"_rewardManagers\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"_rewardRatesManual\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"address[]\",\"name\":\"_gaugeControllers\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"address[]\",\"name\":\"_rewardDistributors\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"veORN_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OwnerChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OwnerNominated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RewardPaid\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"acceptOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calcCurCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"old_combined_weight\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"new_veorn_multiplier\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"new_combined_weight\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"new_manager_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeTokenManager\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"combinedWeightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"new_earned\",\"type\":\"uint256[]\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fraxPerLPStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fraxPerLPToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getAllRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getProxyFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"claim_extra_too\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getReward2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getRewardExtraLogic\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards_per_duration_arr\",\"type\":\"uint256[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_addr\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"reward_token_addr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isTokenManagerFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastRewardClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lockMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lock_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lock_time_for_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lock_time_min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lockedLiquidityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxLPForMaxBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minVeORNForMaxBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minVeORNForMaxBoostProxy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"nominateNewOwner\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proxyStakedOrion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"proxyToggleStaker\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proxy_lp_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recoverERC20\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_idx\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rwd_rate\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardTokenAddrToIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newRewardsPerTokenStored\",\"type\":\"uint256[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_misc_vars\",\"type\":\"uint256[6]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setMiscVariables\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakingPaused\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_withdrawalsPaused\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_rewardsCollectionPaused\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setPauses\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_new_rate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_gauge_controller_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_rewards_distributor_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setRewardVars\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stakerSetVeORNProxy\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"staker_designated_proxies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"stakesUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sync\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"force_update\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sync_gauge_weights\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy_addr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"toggleValidVeORNProxy\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalLiquidityLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unlockStakes\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"sync_too\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateRewardAndBalance\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"userStakedOrion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"veORNMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"veorn_multiplier\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"veorn_boost_scale_factor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"veorn_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"veorn_per_frax_for_max_boost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static ORIONUNIFIEDFARMTEMPLATE_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        160,
        96,
        64,
        82,
        103,
        27,
        193,
        109,
        103,
        78,
        200,
        0,
        0,
        96,
        6,
        85,
        99,
        5,
        163,
        154,
        128,
        96,
        7,
        85,
        98,
        9,
        16,
        80,
        96,
        8,
        85,
        103,
        55,
        130,
        218,
        206,
        157,
        144,
        0,
        0,
        96,
        9,
        85,
        103,
        27,
        193,
        109,
        103,
        78,
        200,
        0,
        0,
        96,
        10,
        85,
        103,
        55,
        130,
        218,
        206,
        157,
        144,
        0,
        0,
        96,
        11,
        85,
        52,
        128,
        21,
        98,
        0,
        0,
        80,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        0,
        49,
        139,
        56,
        3,
        128,
        98,
        0,
        49,
        139,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        98,
        0,
        0,
        115,
        145,
        98,
        0,
        5,
        86,
        86,
        91,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        98,
        0,
        0,
        207,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        25,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        101,
        114,
        32,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        32,
        99,
        97,
        110,
        110,
        111,
        116,
        32,
        98,
        101,
        32,
        48,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        129,
        23,
        130,
        85,
        96,
        64,
        128,
        81,
        146,
        131,
        82,
        96,
        32,
        131,
        1,
        145,
        144,
        145,
        82,
        127,
        181,
        50,
        7,
        59,
        56,
        200,
        49,
        69,
        227,
        229,
        19,
        83,
        119,
        160,
        139,
        249,
        170,
        181,
        91,
        192,
        253,
        124,
        17,
        121,
        205,
        79,
        185,
        149,
        210,
        165,
        21,
        156,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        96,
        1,
        96,
        2,
        85,
        133,
        81,
        98,
        0,
        1,
        65,
        144,
        96,
        16,
        144,
        96,
        32,
        137,
        1,
        144,
        98,
        0,
        3,
        45,
        86,
        91,
        80,
        130,
        81,
        98,
        0,
        1,
        87,
        144,
        96,
        17,
        144,
        96,
        32,
        134,
        1,
        144,
        98,
        0,
        3,
        45,
        86,
        91,
        80,
        129,
        81,
        98,
        0,
        1,
        109,
        144,
        96,
        18,
        144,
        96,
        32,
        133,
        1,
        144,
        98,
        0,
        3,
        45,
        86,
        91,
        80,
        131,
        81,
        98,
        0,
        1,
        131,
        144,
        96,
        19,
        144,
        96,
        32,
        135,
        1,
        144,
        98,
        0,
        3,
        151,
        86,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        128,
        82,
        96,
        0,
        91,
        134,
        81,
        129,
        16,
        21,
        98,
        0,
        2,
        251,
        87,
        128,
        96,
        20,
        96,
        0,
        137,
        132,
        129,
        81,
        129,
        16,
        98,
        0,
        1,
        184,
        87,
        98,
        0,
        1,
        184,
        98,
        0,
        6,
        93,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        82,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        64,
        1,
        96,
        0,
        144,
        129,
        32,
        145,
        144,
        145,
        85,
        96,
        21,
        128,
        84,
        96,
        1,
        129,
        1,
        130,
        85,
        144,
        130,
        82,
        127,
        85,
        244,
        72,
        253,
        234,
        152,
        196,
        210,
        158,
        179,
        64,
        117,
        126,
        240,
        166,
        108,
        208,
        61,
        187,
        149,
        56,
        144,
        138,
        106,
        129,
        217,
        96,
        38,
        183,
        30,
        196,
        117,
        1,
        85,
        133,
        81,
        134,
        144,
        130,
        144,
        129,
        16,
        98,
        0,
        2,
        40,
        87,
        98,
        0,
        2,
        40,
        98,
        0,
        6,
        93,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        15,
        96,
        0,
        137,
        132,
        129,
        81,
        129,
        16,
        98,
        0,
        2,
        73,
        87,
        98,
        0,
        2,
        73,
        98,
        0,
        6,
        93,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        131,
        82,
        144,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        64,
        1,
        96,
        0,
        144,
        129,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        147,
        144,
        146,
        22,
        146,
        144,
        146,
        23,
        144,
        85,
        96,
        25,
        128,
        84,
        96,
        1,
        129,
        129,
        1,
        144,
        146,
        85,
        127,
        148,
        73,
        152,
        39,
        62,
        71,
        123,
        73,
        81,
        68,
        251,
        135,
        148,
        201,
        20,
        25,
        127,
        60,
        203,
        70,
        190,
        41,
        0,
        244,
        105,
        143,
        208,
        239,
        116,
        60,
        150,
        149,
        1,
        130,
        144,
        85,
        96,
        26,
        128,
        84,
        145,
        130,
        1,
        129,
        85,
        130,
        82,
        127,
        5,
        124,
        56,
        74,
        125,
        28,
        84,
        243,
        161,
        178,
        229,
        230,
        123,
        38,
        23,
        184,
        34,
        79,
        223,
        209,
        234,
        114,
        52,
        238,
        165,
        115,
        166,
        255,
        102,
        95,
        246,
        62,
        1,
        85,
        128,
        98,
        0,
        2,
        242,
        129,
        98,
        0,
        6,
        137,
        86,
        91,
        145,
        80,
        80,
        98,
        0,
        1,
        148,
        86,
        91,
        80,
        96,
        33,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        66,
        96,
        5,
        129,
        144,
        85,
        98,
        0,
        3,
        28,
        144,
        98,
        9,
        58,
        128,
        144,
        98,
        0,
        6,
        165,
        86,
        91,
        96,
        4,
        85,
        80,
        98,
        0,
        6,
        193,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        130,
        128,
        84,
        130,
        130,
        85,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        129,
        1,
        146,
        130,
        21,
        98,
        0,
        3,
        133,
        87,
        145,
        96,
        32,
        2,
        130,
        1,
        91,
        130,
        129,
        17,
        21,
        98,
        0,
        3,
        133,
        87,
        130,
        81,
        130,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        23,
        130,
        85,
        96,
        32,
        144,
        146,
        1,
        145,
        96,
        1,
        144,
        145,
        1,
        144,
        98,
        0,
        3,
        78,
        86,
        91,
        80,
        98,
        0,
        3,
        147,
        146,
        145,
        80,
        98,
        0,
        3,
        213,
        86,
        91,
        80,
        144,
        86,
        91,
        130,
        128,
        84,
        130,
        130,
        85,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        129,
        1,
        146,
        130,
        21,
        98,
        0,
        3,
        133,
        87,
        145,
        96,
        32,
        2,
        130,
        1,
        91,
        130,
        129,
        17,
        21,
        98,
        0,
        3,
        133,
        87,
        130,
        81,
        130,
        85,
        145,
        96,
        32,
        1,
        145,
        144,
        96,
        1,
        1,
        144,
        98,
        0,
        3,
        184,
        86,
        91,
        91,
        128,
        130,
        17,
        21,
        98,
        0,
        3,
        147,
        87,
        96,
        0,
        129,
        85,
        96,
        1,
        1,
        98,
        0,
        3,
        214,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        98,
        0,
        4,
        4,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        129,
        1,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        98,
        0,
        4,
        74,
        87,
        98,
        0,
        4,
        74,
        98,
        0,
        4,
        9,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        130,
        17,
        21,
        98,
        0,
        4,
        110,
        87,
        98,
        0,
        4,
        110,
        98,
        0,
        4,
        9,
        86,
        91,
        80,
        96,
        5,
        27,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        98,
        0,
        4,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        32,
        98,
        0,
        4,
        163,
        98,
        0,
        4,
        157,
        131,
        98,
        0,
        4,
        82,
        86,
        91,
        98,
        0,
        4,
        31,
        86,
        91,
        130,
        129,
        82,
        96,
        5,
        146,
        144,
        146,
        27,
        132,
        1,
        129,
        1,
        145,
        129,
        129,
        1,
        144,
        134,
        132,
        17,
        21,
        98,
        0,
        4,
        195,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        134,
        1,
        91,
        132,
        129,
        16,
        21,
        98,
        0,
        4,
        233,
        87,
        98,
        0,
        4,
        219,
        129,
        98,
        0,
        3,
        236,
        86,
        91,
        131,
        82,
        145,
        131,
        1,
        145,
        131,
        1,
        98,
        0,
        4,
        199,
        86,
        91,
        80,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        98,
        0,
        5,
        6,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        32,
        98,
        0,
        5,
        25,
        98,
        0,
        4,
        157,
        131,
        98,
        0,
        4,
        82,
        86,
        91,
        130,
        129,
        82,
        96,
        5,
        146,
        144,
        146,
        27,
        132,
        1,
        129,
        1,
        145,
        129,
        129,
        1,
        144,
        134,
        132,
        17,
        21,
        98,
        0,
        5,
        57,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        134,
        1,
        91,
        132,
        129,
        16,
        21,
        98,
        0,
        4,
        233,
        87,
        128,
        81,
        131,
        82,
        145,
        131,
        1,
        145,
        131,
        1,
        98,
        0,
        5,
        61,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        224,
        136,
        138,
        3,
        18,
        21,
        98,
        0,
        5,
        114,
        87,
        96,
        0,
        128,
        253,
        91,
        98,
        0,
        5,
        125,
        136,
        98,
        0,
        3,
        236,
        86,
        91,
        96,
        32,
        137,
        1,
        81,
        144,
        151,
        80,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        128,
        130,
        17,
        21,
        98,
        0,
        5,
        155,
        87,
        96,
        0,
        128,
        253,
        91,
        98,
        0,
        5,
        169,
        139,
        131,
        140,
        1,
        98,
        0,
        4,
        120,
        86,
        91,
        151,
        80,
        96,
        64,
        138,
        1,
        81,
        145,
        80,
        128,
        130,
        17,
        21,
        98,
        0,
        5,
        192,
        87,
        96,
        0,
        128,
        253,
        91,
        98,
        0,
        5,
        206,
        139,
        131,
        140,
        1,
        98,
        0,
        4,
        120,
        86,
        91,
        150,
        80,
        96,
        96,
        138,
        1,
        81,
        145,
        80,
        128,
        130,
        17,
        21,
        98,
        0,
        5,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        98,
        0,
        5,
        243,
        139,
        131,
        140,
        1,
        98,
        0,
        4,
        244,
        86,
        91,
        149,
        80,
        96,
        128,
        138,
        1,
        81,
        145,
        80,
        128,
        130,
        17,
        21,
        98,
        0,
        6,
        10,
        87,
        96,
        0,
        128,
        253,
        91,
        98,
        0,
        6,
        24,
        139,
        131,
        140,
        1,
        98,
        0,
        4,
        120,
        86,
        91,
        148,
        80,
        96,
        160,
        138,
        1,
        81,
        145,
        80,
        128,
        130,
        17,
        21,
        98,
        0,
        6,
        47,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        98,
        0,
        6,
        62,
        138,
        130,
        139,
        1,
        98,
        0,
        4,
        120,
        86,
        91,
        146,
        80,
        80,
        98,
        0,
        6,
        79,
        96,
        192,
        137,
        1,
        98,
        0,
        3,
        236,
        86,
        91,
        144,
        80,
        146,
        149,
        152,
        145,
        148,
        151,
        80,
        146,
        149,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        98,
        0,
        6,
        158,
        87,
        98,
        0,
        6,
        158,
        98,
        0,
        6,
        115,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        98,
        0,
        6,
        187,
        87,
        98,
        0,
        6,
        187,
        98,
        0,
        6,
        115,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        128,
        81,
        97,
        42,
        153,
        98,
        0,
        6,
        242,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        97,
        17,
        221,
        1,
        82,
        129,
        129,
        97,
        21,
        172,
        1,
        82,
        129,
        129,
        97,
        22,
        59,
        1,
        82,
        97,
        22,
        179,
        1,
        82,
        97,
        42,
        153,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        3,
        92,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        139,
        173,
        134,
        167,
        17,
        97,
        1,
        211,
        87,
        128,
        99,
        217,
        249,
        110,
        141,
        17,
        97,
        1,
        4,
        87,
        128,
        99,
        242,
        202,
        235,
        30,
        17,
        97,
        0,
        162,
        87,
        128,
        99,
        250,
        206,
        251,
        100,
        17,
        97,
        0,
        124,
        87,
        128,
        99,
        250,
        206,
        251,
        100,
        20,
        97,
        7,
        103,
        87,
        128,
        99,
        253,
        4,
        25,
        24,
        20,
        97,
        7,
        122,
        87,
        128,
        99,
        253,
        210,
        76,
        220,
        20,
        97,
        7,
        141,
        87,
        128,
        99,
        255,
        246,
        202,
        233,
        20,
        97,
        7,
        150,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        242,
        202,
        235,
        30,
        20,
        97,
        7,
        46,
        87,
        128,
        99,
        247,
        126,
        52,
        209,
        20,
        97,
        7,
        65,
        87,
        128,
        99,
        250,
        5,
        242,
        224,
        20,
        97,
        7,
        84,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        225,
        186,
        149,
        210,
        17,
        97,
        0,
        222,
        87,
        128,
        99,
        225,
        186,
        149,
        210,
        20,
        97,
        6,
        247,
        87,
        128,
        99,
        228,
        6,
        181,
        71,
        20,
        97,
        6,
        255,
        87,
        128,
        99,
        231,
        243,
        5,
        130,
        20,
        97,
        7,
        18,
        87,
        128,
        99,
        235,
        226,
        177,
        43,
        20,
        97,
        7,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        217,
        249,
        110,
        141,
        20,
        97,
        6,
        179,
        87,
        128,
        99,
        222,
        26,
        101,
        81,
        20,
        97,
        6,
        220,
        87,
        128,
        99,
        224,
        31,
        98,
        191,
        20,
        97,
        6,
        239,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        195,
        84,
        56,
        38,
        17,
        97,
        1,
        113,
        87,
        128,
        99,
        205,
        200,
        46,
        128,
        17,
        97,
        1,
        75,
        87,
        128,
        99,
        205,
        200,
        46,
        128,
        20,
        97,
        6,
        123,
        87,
        128,
        99,
        210,
        1,
        15,
        180,
        20,
        97,
        6,
        132,
        87,
        128,
        99,
        212,
        178,
        18,
        15,
        20,
        97,
        6,
        141,
        87,
        128,
        99,
        213,
        225,
        169,
        198,
        20,
        97,
        6,
        160,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        195,
        84,
        56,
        38,
        20,
        97,
        6,
        76,
        87,
        128,
        99,
        200,
        243,
        60,
        145,
        20,
        97,
        6,
        95,
        87,
        128,
        99,
        204,
        42,
        189,
        100,
        20,
        97,
        6,
        104,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        160,
        242,
        52,
        118,
        17,
        97,
        1,
        173,
        87,
        128,
        99,
        160,
        242,
        52,
        118,
        20,
        97,
        6,
        20,
        87,
        128,
        99,
        174,
        142,
        18,
        112,
        20,
        97,
        6,
        39,
        87,
        128,
        99,
        185,
        76,
        77,
        203,
        20,
        97,
        6,
        48,
        87,
        128,
        99,
        192,
        0,
        7,
        176,
        20,
        97,
        6,
        57,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        139,
        173,
        134,
        167,
        20,
        97,
        5,
        198,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        5,
        244,
        87,
        128,
        99,
        150,
        55,
        146,
        127,
        20,
        97,
        6,
        7,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        85,
        24,
        151,
        115,
        17,
        97,
        2,
        173,
        87,
        128,
        99,
        110,
        39,
        206,
        249,
        17,
        97,
        2,
        75,
        87,
        128,
        99,
        121,
        16,
        209,
        123,
        17,
        97,
        2,
        37,
        87,
        128,
        99,
        121,
        16,
        209,
        123,
        20,
        97,
        5,
        120,
        87,
        128,
        99,
        121,
        186,
        80,
        151,
        20,
        97,
        5,
        139,
        87,
        128,
        99,
        125,
        110,
        240,
        142,
        20,
        97,
        5,
        147,
        87,
        128,
        99,
        137,
        128,
        241,
        31,
        20,
        97,
        5,
        179,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        110,
        39,
        206,
        249,
        20,
        97,
        5,
        84,
        87,
        128,
        99,
        112,
        100,
        26,
        54,
        20,
        97,
        5,
        93,
        87,
        128,
        99,
        119,
        224,
        36,
        178,
        20,
        97,
        5,
        101,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        91,
        253,
        146,
        88,
        17,
        97,
        2,
        135,
        87,
        128,
        99,
        91,
        253,
        146,
        88,
        20,
        97,
        5,
        4,
        87,
        128,
        99,
        100,
        242,
        192,
        96,
        20,
        97,
        5,
        12,
        87,
        128,
        99,
        105,
        51,
        146,
        69,
        20,
        97,
        5,
        20,
        87,
        128,
        99,
        108,
        67,
        13,
        187,
        20,
        97,
        5,
        52,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        85,
        24,
        151,
        115,
        20,
        97,
        4,
        203,
        87,
        128,
        99,
        87,
        185,
        140,
        135,
        20,
        97,
        4,
        222,
        87,
        128,
        99,
        88,
        6,
        48,
        140,
        20,
        97,
        4,
        241,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        35,
        27,
        104,
        220,
        17,
        97,
        3,
        26,
        87,
        128,
        99,
        56,
        106,
        149,
        37,
        17,
        97,
        2,
        244,
        87,
        128,
        99,
        56,
        106,
        149,
        37,
        20,
        97,
        4,
        114,
        87,
        128,
        99,
        56,
        126,
        220,
        134,
        20,
        97,
        4,
        124,
        87,
        128,
        99,
        65,
        161,
        111,
        63,
        20,
        97,
        4,
        143,
        87,
        128,
        99,
        83,
        164,
        123,
        183,
        20,
        97,
        4,
        184,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        35,
        27,
        104,
        220,
        20,
        97,
        3,
        230,
        87,
        128,
        99,
        40,
        64,
        139,
        171,
        20,
        97,
        4,
        9,
        87,
        128,
        99,
        54,
        248,
        154,
        242,
        20,
        97,
        4,
        73,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        98,
        140,
        194,
        98,
        20,
        97,
        3,
        97,
        87,
        128,
        99,
        13,
        123,
        172,
        79,
        20,
        97,
        3,
        138,
        87,
        128,
        99,
        13,
        179,
        105,
        214,
        20,
        97,
        3,
        171,
        87,
        128,
        99,
        18,
        237,
        178,
        76,
        20,
        97,
        3,
        180,
        87,
        128,
        99,
        22,
        39,
        84,
        12,
        20,
        97,
        3,
        201,
        87,
        128,
        99,
        28,
        31,
        120,
        235,
        20,
        97,
        3,
        222,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        3,
        116,
        97,
        3,
        111,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        7,
        158,
        86,
        91,
        96,
        64,
        81,
        97,
        3,
        129,
        145,
        144,
        97,
        37,
        254,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        3,
        157,
        97,
        3,
        152,
        54,
        96,
        4,
        97,
        38,
        66,
        86,
        91,
        97,
        8,
        246,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        3,
        129,
        86,
        91,
        97,
        3,
        157,
        96,
        11,
        84,
        129,
        86,
        91,
        97,
        3,
        188,
        97,
        9,
        34,
        86,
        91,
        96,
        64,
        81,
        97,
        3,
        129,
        145,
        144,
        97,
        38,
        91,
        86,
        91,
        97,
        3,
        220,
        97,
        3,
        215,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        9,
        132,
        86,
        91,
        0,
        91,
        97,
        3,
        116,
        97,
        10,
        79,
        86,
        91,
        97,
        3,
        249,
        97,
        3,
        244,
        54,
        96,
        4,
        97,
        38,
        156,
        86,
        91,
        97,
        10,
        240,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        3,
        129,
        86,
        91,
        97,
        4,
        49,
        97,
        4,
        23,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        96,
        32,
        128,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        3,
        129,
        86,
        91,
        97,
        3,
        157,
        97,
        4,
        87,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        30,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        144,
        86,
        91,
        97,
        3,
        157,
        98,
        9,
        58,
        128,
        129,
        86,
        91,
        97,
        3,
        220,
        97,
        4,
        138,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        11,
        68,
        86,
        91,
        97,
        4,
        49,
        97,
        4,
        157,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        96,
        15,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        1,
        84,
        97,
        4,
        49,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        3,
        220,
        97,
        4,
        217,
        54,
        96,
        4,
        97,
        38,
        221,
        86,
        91,
        97,
        11,
        184,
        86,
        91,
        97,
        3,
        157,
        97,
        4,
        236,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        12,
        168,
        86,
        91,
        97,
        3,
        220,
        97,
        4,
        255,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        12,
        225,
        86,
        91,
        97,
        3,
        157,
        97,
        13,
        82,
        86,
        91,
        96,
        28,
        84,
        97,
        3,
        157,
        86,
        91,
        97,
        3,
        157,
        97,
        5,
        34,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        96,
        20,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        3,
        157,
        97,
        5,
        66,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        96,
        24,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        3,
        157,
        96,
        8,
        84,
        129,
        86,
        91,
        97,
        3,
        116,
        97,
        13,
        144,
        86,
        91,
        97,
        3,
        157,
        97,
        5,
        115,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        14,
        239,
        86,
        91,
        97,
        3,
        116,
        97,
        5,
        134,
        54,
        96,
        4,
        97,
        38,
        221,
        86,
        91,
        97,
        15,
        16,
        86,
        91,
        97,
        3,
        220,
        97,
        15,
        49,
        86,
        91,
        97,
        3,
        157,
        97,
        5,
        161,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        96,
        31,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        3,
        220,
        97,
        5,
        193,
        54,
        96,
        4,
        97,
        39,
        20,
        86,
        91,
        97,
        16,
        27,
        86,
        91,
        97,
        5,
        217,
        97,
        5,
        212,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        17,
        95,
        86,
        91,
        96,
        64,
        128,
        81,
        147,
        132,
        82,
        96,
        32,
        132,
        1,
        146,
        144,
        146,
        82,
        144,
        130,
        1,
        82,
        96,
        96,
        1,
        97,
        3,
        129,
        86,
        91,
        96,
        0,
        84,
        97,
        4,
        49,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        33,
        84,
        97,
        3,
        249,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        3,
        157,
        97,
        6,
        34,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        17,
        160,
        86,
        91,
        97,
        3,
        157,
        96,
        9,
        84,
        129,
        86,
        91,
        97,
        3,
        157,
        96,
        7,
        84,
        129,
        86,
        91,
        97,
        3,
        116,
        97,
        6,
        71,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        18,
        82,
        86,
        91,
        97,
        4,
        49,
        97,
        6,
        90,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        18,
        121,
        86,
        91,
        97,
        3,
        157,
        96,
        5,
        84,
        129,
        86,
        91,
        97,
        3,
        220,
        97,
        6,
        118,
        54,
        96,
        4,
        97,
        39,
        62,
        86,
        91,
        97,
        18,
        188,
        86,
        91,
        97,
        3,
        157,
        96,
        6,
        84,
        129,
        86,
        91,
        97,
        3,
        157,
        96,
        3,
        84,
        129,
        86,
        91,
        97,
        3,
        157,
        97,
        6,
        155,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        19,
        71,
        86,
        91,
        97,
        3,
        220,
        97,
        6,
        174,
        54,
        96,
        4,
        97,
        39,
        137,
        86,
        91,
        97,
        19,
        118,
        86,
        91,
        97,
        3,
        157,
        97,
        6,
        193,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        29,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        144,
        86,
        91,
        97,
        3,
        220,
        97,
        6,
        234,
        54,
        96,
        4,
        97,
        38,
        156,
        86,
        91,
        97,
        20,
        168,
        86,
        91,
        96,
        27,
        84,
        97,
        3,
        157,
        86,
        91,
        97,
        3,
        220,
        97,
        21,
        19,
        86,
        91,
        97,
        3,
        157,
        97,
        7,
        13,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        21,
        111,
        86,
        91,
        97,
        3,
        220,
        97,
        7,
        32,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        23,
        120,
        86,
        91,
        97,
        3,
        157,
        96,
        4,
        84,
        129,
        86,
        91,
        97,
        3,
        157,
        97,
        7,
        60,
        54,
        96,
        4,
        97,
        38,
        66,
        86,
        91,
        97,
        24,
        91,
        86,
        91,
        97,
        3,
        220,
        97,
        7,
        79,
        54,
        96,
        4,
        97,
        39,
        214,
        86,
        91,
        97,
        25,
        88,
        86,
        91,
        97,
        3,
        220,
        97,
        7,
        98,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        26,
        234,
        86,
        91,
        97,
        3,
        220,
        97,
        7,
        117,
        54,
        96,
        4,
        97,
        40,
        9,
        86,
        91,
        97,
        28,
        104,
        86,
        91,
        97,
        3,
        157,
        97,
        7,
        136,
        54,
        96,
        4,
        97,
        37,
        227,
        86,
        91,
        97,
        29,
        130,
        86,
        91,
        97,
        3,
        157,
        96,
        10,
        84,
        129,
        86,
        91,
        97,
        3,
        220,
        97,
        29,
        153,
        86,
        91,
        96,
        96,
        96,
        0,
        97,
        7,
        170,
        97,
        13,
        144,
        86,
        91,
        96,
        16,
        84,
        144,
        145,
        80,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        7,
        200,
        87,
        97,
        7,
        200,
        97,
        39,
        243,
        86,
        91,
        96,
        64,
        81,
        144,
        128,
        130,
        82,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        130,
        1,
        96,
        64,
        82,
        128,
        21,
        97,
        7,
        241,
        87,
        129,
        96,
        32,
        1,
        96,
        32,
        130,
        2,
        128,
        54,
        131,
        55,
        1,
        144,
        80,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        30,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        144,
        146,
        80,
        21,
        97,
        8,
        240,
        87,
        96,
        0,
        91,
        96,
        16,
        84,
        129,
        16,
        21,
        97,
        8,
        238,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        23,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        133,
        132,
        82,
        130,
        82,
        128,
        131,
        32,
        84,
        147,
        131,
        82,
        96,
        22,
        130,
        82,
        128,
        131,
        32,
        133,
        132,
        82,
        144,
        145,
        82,
        144,
        32,
        84,
        131,
        81,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        145,
        144,
        133,
        144,
        133,
        144,
        129,
        16,
        97,
        8,
        118,
        87,
        97,
        8,
        118,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        97,
        8,
        136,
        145,
        144,
        97,
        40,
        193,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        30,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        97,
        8,
        171,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        97,
        8,
        181,
        145,
        144,
        97,
        40,
        235,
        86,
        91,
        97,
        8,
        191,
        145,
        144,
        97,
        41,
        13,
        86,
        91,
        131,
        130,
        129,
        81,
        129,
        16,
        97,
        8,
        209,
        87,
        97,
        8,
        209,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        1,
        82,
        128,
        97,
        8,
        230,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        8,
        22,
        86,
        91,
        80,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        6,
        84,
        96,
        7,
        84,
        96,
        0,
        145,
        97,
        9,
        28,
        145,
        97,
        9,
        13,
        130,
        134,
        97,
        40,
        212,
        86,
        91,
        97,
        9,
        23,
        145,
        144,
        97,
        40,
        235,
        86,
        91,
        97,
        29,
        190,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        96,
        96,
        16,
        128,
        84,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        128,
        21,
        97,
        9,
        122,
        87,
        96,
        32,
        2,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        1,
        144,
        145,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        9,
        92,
        87,
        91,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        144,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        9,
        251,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        47,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        110,
        108,
        121,
        32,
        116,
        104,
        101,
        32,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        109,
        97,
        121,
        32,
        112,
        101,
        114,
        102,
        96,
        68,
        130,
        1,
        82,
        110,
        55,
        185,
        54,
        144,
        58,
        52,
        52,
        185,
        144,
        48,
        177,
        186,
        52,
        183,
        183,
        96,
        137,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        144,
        106,
        28,
        107,
        215,
        227,
        9,
        30,
        168,
        102,
        147,
        221,
        2,
        154,
        131,
        28,
        25,
        4,
        156,
        231,
        127,
        29,
        206,
        44,
        224,
        186,
        177,
        202,
        203,
        171,
        206,
        34,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        96,
        19,
        84,
        96,
        96,
        144,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        10,
        109,
        87,
        97,
        10,
        109,
        97,
        39,
        243,
        86,
        91,
        96,
        64,
        81,
        144,
        128,
        130,
        82,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        130,
        1,
        96,
        64,
        82,
        128,
        21,
        97,
        10,
        150,
        87,
        129,
        96,
        32,
        1,
        96,
        32,
        130,
        2,
        128,
        54,
        131,
        55,
        1,
        144,
        80,
        91,
        80,
        144,
        80,
        96,
        0,
        91,
        96,
        19,
        84,
        129,
        16,
        21,
        97,
        10,
        236,
        87,
        98,
        9,
        58,
        128,
        97,
        10,
        179,
        130,
        97,
        24,
        91,
        86,
        91,
        97,
        10,
        189,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        130,
        130,
        129,
        81,
        129,
        16,
        97,
        10,
        207,
        87,
        97,
        10,
        207,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        1,
        82,
        128,
        97,
        10,
        228,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        10,
        156,
        86,
        91,
        80,
        144,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        144,
        132,
        22,
        3,
        97,
        11,
        15,
        87,
        80,
        96,
        1,
        97,
        9,
        28,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        15,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        133,
        22,
        145,
        22,
        3,
        97,
        11,
        59,
        87,
        80,
        96,
        1,
        97,
        9,
        28,
        86,
        91,
        80,
        96,
        0,
        146,
        145,
        80,
        80,
        86,
        91,
        97,
        11,
        76,
        97,
        29,
        214,
        86,
        91,
        96,
        33,
        84,
        98,
        1,
        0,
        0,
        144,
        4,
        96,
        255,
        22,
        21,
        97,
        11,
        161,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        25,
        96,
        36,
        130,
        1,
        82,
        120,
        20,
        153,
        93,
        216,
        92,
        153,
        28,
        200,
        24,
        219,
        219,
        27,
        25,
        88,
        221,
        26,
        91,
        219,
        136,
        28,
        24,
        93,
        92,
        217,
        89,
        96,
        58,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        97,
        11,
        171,
        51,
        130,
        97,
        30,
        45,
        86,
        91,
        97,
        11,
        181,
        96,
        1,
        96,
        2,
        85,
        86,
        91,
        80,
        86,
        91,
        128,
        21,
        97,
        11,
        198,
        87,
        97,
        11,
        198,
        97,
        29,
        153,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        21,
        97,
        12,
        164,
        87,
        96,
        0,
        128,
        96,
        0,
        97,
        11,
        227,
        133,
        97,
        17,
        95,
        86,
        91,
        146,
        80,
        146,
        80,
        146,
        80,
        97,
        11,
        242,
        133,
        97,
        30,
        103,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        12,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        130,
        144,
        85,
        130,
        129,
        16,
        97,
        12,
        92,
        87,
        96,
        0,
        97,
        12,
        32,
        132,
        131,
        97,
        40,
        193,
        86,
        91,
        144,
        80,
        128,
        96,
        28,
        84,
        97,
        12,
        48,
        145,
        144,
        97,
        41,
        13,
        86,
        91,
        96,
        28,
        85,
        97,
        12,
        61,
        129,
        133,
        97,
        41,
        13,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        30,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        85,
        80,
        97,
        12,
        160,
        86,
        91,
        96,
        0,
        97,
        12,
        104,
        130,
        133,
        97,
        40,
        193,
        86,
        91,
        144,
        80,
        128,
        96,
        28,
        84,
        97,
        12,
        120,
        145,
        144,
        97,
        40,
        193,
        86,
        91,
        96,
        28,
        85,
        97,
        12,
        133,
        129,
        133,
        97,
        40,
        193,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        30,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        85,
        80,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        31,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        96,
        3,
        84,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        145,
        97,
        12,
        215,
        145,
        97,
        40,
        212,
        86,
        91,
        97,
        9,
        28,
        145,
        144,
        97,
        40,
        235,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        13,
        13,
        87,
        80,
        115,
        132,
        18,
        235,
        244,
        91,
        172,
        27,
        52,
        11,
        190,
        143,
        49,
        139,
        146,
        140,
        70,
        108,
        78,
        57,
        202,
        51,
        20,
        91,
        97,
        13,
        41,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        9,
        242,
        144,
        97,
        41,
        57,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        13,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        129,
        22,
        96,
        255,
        144,
        145,
        22,
        21,
        23,
        144,
        85,
        86,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        16,
        96,
        36,
        130,
        1,
        82,
        111,
        78,
        101,
        101,
        100,
        32,
        102,
        80,
        76,
        80,
        84,
        32,
        108,
        111,
        103,
        105,
        99,
        96,
        128,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        0,
        144,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        96,
        96,
        96,
        27,
        84,
        96,
        0,
        20,
        128,
        97,
        13,
        163,
        87,
        80,
        96,
        28,
        84,
        21,
        91,
        21,
        97,
        13,
        253,
        87,
        96,
        21,
        128,
        84,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        128,
        21,
        97,
        9,
        122,
        87,
        96,
        32,
        2,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        96,
        32,
        1,
        144,
        96,
        1,
        1,
        144,
        128,
        131,
        17,
        97,
        13,
        224,
        87,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        144,
        86,
        91,
        96,
        16,
        84,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        14,
        24,
        87,
        97,
        14,
        24,
        97,
        39,
        243,
        86,
        91,
        96,
        64,
        81,
        144,
        128,
        130,
        82,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        130,
        1,
        96,
        64,
        82,
        128,
        21,
        97,
        14,
        65,
        87,
        129,
        96,
        32,
        1,
        96,
        32,
        130,
        2,
        128,
        54,
        131,
        55,
        1,
        144,
        80,
        91,
        80,
        144,
        80,
        96,
        0,
        91,
        96,
        21,
        84,
        129,
        16,
        21,
        97,
        10,
        236,
        87,
        96,
        28,
        84,
        97,
        14,
        93,
        130,
        97,
        24,
        91,
        86,
        91,
        96,
        5,
        84,
        97,
        14,
        104,
        97,
        31,
        64,
        86,
        91,
        97,
        14,
        114,
        145,
        144,
        97,
        40,
        193,
        86,
        91,
        97,
        14,
        124,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        97,
        14,
        142,
        144,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        40,
        212,
        86,
        91,
        97,
        14,
        152,
        145,
        144,
        97,
        40,
        235,
        86,
        91,
        96,
        21,
        130,
        129,
        84,
        129,
        16,
        97,
        14,
        171,
        87,
        97,
        14,
        171,
        97,
        40,
        149,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        84,
        97,
        14,
        192,
        145,
        144,
        97,
        41,
        13,
        86,
        91,
        130,
        130,
        129,
        81,
        129,
        16,
        97,
        14,
        210,
        87,
        97,
        14,
        210,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        1,
        82,
        128,
        97,
        14,
        231,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        14,
        71,
        86,
        91,
        96,
        0,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        96,
        11,
        84,
        97,
        15,
        6,
        132,
        97,
        12,
        168,
        86,
        91,
        97,
        12,
        215,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        96,
        96,
        97,
        15,
        26,
        97,
        29,
        214,
        86,
        91,
        97,
        15,
        37,
        51,
        132,
        132,
        97,
        31,
        83,
        86,
        91,
        144,
        80,
        97,
        9,
        28,
        96,
        1,
        96,
        2,
        85,
        86,
        91,
        96,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        15,
        169,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        53,
        96,
        36,
        130,
        1,
        82,
        127,
        89,
        111,
        117,
        32,
        109,
        117,
        115,
        116,
        32,
        98,
        101,
        32,
        110,
        111,
        109,
        105,
        110,
        97,
        116,
        101,
        100,
        32,
        98,
        101,
        102,
        111,
        114,
        101,
        32,
        121,
        111,
        117,
        96,
        68,
        130,
        1,
        82,
        116,
        2,
        6,
        54,
        22,
        226,
        6,
        22,
        54,
        54,
        87,
        7,
        66,
        6,
        247,
        118,
        230,
        87,
        39,
        54,
        134,
        151,
        96,
        92,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        9,
        242,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        84,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        132,
        22,
        129,
        82,
        146,
        144,
        145,
        22,
        96,
        32,
        131,
        1,
        82,
        127,
        181,
        50,
        7,
        59,
        56,
        200,
        49,
        69,
        227,
        229,
        19,
        83,
        119,
        160,
        139,
        249,
        170,
        181,
        91,
        192,
        253,
        124,
        17,
        121,
        205,
        79,
        185,
        149,
        210,
        165,
        21,
        156,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        1,
        128,
        84,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        144,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        23,
        144,
        145,
        85,
        22,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        130,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        16,
        59,
        87,
        80,
        97,
        16,
        59,
        51,
        130,
        97,
        10,
        240,
        86,
        91,
        97,
        16,
        87,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        9,
        242,
        144,
        97,
        41,
        104,
        86,
        91,
        96,
        0,
        128,
        91,
        96,
        16,
        84,
        129,
        16,
        21,
        97,
        16,
        183,
        87,
        132,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        16,
        130,
        129,
        84,
        129,
        16,
        97,
        16,
        130,
        87,
        97,
        16,
        130,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        3,
        97,
        16,
        165,
        87,
        96,
        1,
        145,
        80,
        97,
        16,
        183,
        86,
        91,
        128,
        97,
        16,
        175,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        16,
        91,
        86,
        91,
        80,
        128,
        128,
        21,
        97,
        16,
        222,
        87,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        15,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        22,
        51,
        20,
        91,
        128,
        97,
        16,
        252,
        87,
        80,
        128,
        21,
        128,
        21,
        97,
        16,
        252,
        87,
        80,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        21,
        97,
        17,
        18,
        87,
        97,
        17,
        12,
        132,
        51,
        133,
        97,
        33,
        195,
        86,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        26,
        96,
        36,
        130,
        1,
        82,
        127,
        78,
        111,
        32,
        118,
        97,
        108,
        105,
        100,
        32,
        116,
        111,
        107,
        101,
        110,
        115,
        32,
        116,
        111,
        32,
        114,
        101,
        99,
        111,
        118,
        101,
        114,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        9,
        242,
        144,
        96,
        32,
        128,
        130,
        82,
        96,
        15,
        144,
        130,
        1,
        82,
        110,
        78,
        101,
        101,
        100,
        32,
        99,
        67,
        67,
        87,
        32,
        108,
        111,
        103,
        105,
        99,
        96,
        136,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        3,
        84,
        96,
        11,
        84,
        97,
        17,
        178,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        145,
        130,
        145,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        18,
        36,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        18,
        72,
        145,
        144,
        97,
        41,
        150,
        86,
        91,
        97,
        15,
        6,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        96,
        96,
        97,
        18,
        92,
        97,
        29,
        214,
        86,
        91,
        97,
        18,
        104,
        51,
        131,
        96,
        1,
        97,
        31,
        83,
        86,
        91,
        144,
        80,
        97,
        18,
        116,
        96,
        1,
        96,
        2,
        85,
        86,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        13,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        96,
        255,
        22,
        21,
        97,
        18,
        158,
        87,
        80,
        144,
        86,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        128,
        82,
        96,
        64,
        144,
        32,
        84,
        22,
        144,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        18,
        232,
        87,
        80,
        115,
        132,
        18,
        235,
        244,
        91,
        172,
        27,
        52,
        11,
        190,
        143,
        49,
        139,
        146,
        140,
        70,
        108,
        78,
        57,
        202,
        51,
        20,
        91,
        97,
        19,
        4,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        9,
        242,
        144,
        97,
        41,
        57,
        86,
        91,
        96,
        33,
        128,
        84,
        145,
        21,
        21,
        98,
        1,
        0,
        0,
        2,
        98,
        255,
        0,
        0,
        25,
        147,
        21,
        21,
        97,
        1,
        0,
        2,
        97,
        255,
        0,
        25,
        149,
        21,
        21,
        99,
        1,
        0,
        0,
        0,
        2,
        149,
        144,
        149,
        22,
        99,
        255,
        0,
        255,
        0,
        25,
        144,
        147,
        22,
        146,
        144,
        146,
        23,
        147,
        144,
        147,
        23,
        145,
        144,
        145,
        22,
        23,
        144,
        85,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        29,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        96,
        3,
        84,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        145,
        97,
        12,
        215,
        145,
        97,
        40,
        212,
        86,
        91,
        96,
        0,
        84,
        132,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        19,
        150,
        87,
        80,
        97,
        19,
        150,
        51,
        130,
        97,
        10,
        240,
        86,
        91,
        97,
        19,
        178,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        9,
        242,
        144,
        97,
        41,
        104,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        20,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        19,
        128,
        84,
        134,
        146,
        144,
        129,
        16,
        97,
        19,
        224,
        87,
        97,
        19,
        224,
        97,
        40,
        149,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        129,
        144,
        85,
        80,
        130,
        96,
        17,
        96,
        20,
        96,
        0,
        136,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        84,
        129,
        84,
        129,
        16,
        97,
        20,
        39,
        87,
        97,
        20,
        39,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        128,
        131,
        32,
        145,
        144,
        145,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        148,
        133,
        22,
        23,
        144,
        85,
        145,
        135,
        22,
        129,
        82,
        96,
        20,
        144,
        145,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        18,
        128,
        84,
        132,
        146,
        144,
        129,
        16,
        97,
        20,
        115,
        87,
        97,
        20,
        115,
        97,
        40,
        149,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        96,
        0,
        97,
        1,
        0,
        10,
        129,
        84,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        2,
        25,
        22,
        144,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        2,
        23,
        144,
        85,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        130,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        20,
        200,
        87,
        80,
        97,
        20,
        200,
        51,
        130,
        97,
        10,
        240,
        86,
        91,
        97,
        20,
        228,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        9,
        242,
        144,
        97,
        41,
        104,
        86,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        15,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        145,
        144,
        146,
        22,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        21,
        63,
        87,
        80,
        115,
        132,
        18,
        235,
        244,
        91,
        172,
        27,
        52,
        11,
        190,
        143,
        49,
        139,
        146,
        140,
        70,
        108,
        78,
        57,
        202,
        51,
        20,
        91,
        97,
        21,
        91,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        9,
        242,
        144,
        97,
        41,
        57,
        86,
        91,
        96,
        33,
        128,
        84,
        96,
        255,
        25,
        129,
        22,
        96,
        255,
        144,
        145,
        22,
        21,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        128,
        128,
        97,
        21,
        124,
        132,
        97,
        18,
        121,
        86,
        91,
        144,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        97,
        22,
        28,
        87,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        21,
        243,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        22,
        23,
        145,
        144,
        97,
        41,
        150,
        86,
        91,
        97,
        22,
        166,
        86,
        91,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        22,
        130,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        22,
        166,
        145,
        144,
        97,
        41,
        150,
        86,
        91,
        145,
        80,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        24,
        22,
        13,
        221,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        23,
        15,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        23,
        51,
        145,
        144,
        97,
        41,
        150,
        86,
        91,
        97,
        23,
        61,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        96,
        9,
        84,
        96,
        10,
        84,
        97,
        23,
        77,
        144,
        133,
        97,
        40,
        212,
        86,
        91,
        97,
        23,
        87,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        97,
        23,
        97,
        145,
        144,
        97,
        40,
        235,
        86,
        91,
        146,
        80,
        96,
        10,
        84,
        131,
        17,
        21,
        97,
        8,
        238,
        87,
        80,
        80,
        96,
        10,
        84,
        146,
        145,
        80,
        80,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        13,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        23,
        199,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        13,
        96,
        36,
        130,
        1,
        82,
        108,
        73,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        112,
        114,
        111,
        120,
        121,
        96,
        152,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        14,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        129,
        22,
        133,
        82,
        144,
        131,
        82,
        129,
        132,
        32,
        128,
        84,
        96,
        255,
        129,
        22,
        21,
        96,
        255,
        25,
        144,
        145,
        22,
        23,
        144,
        85,
        145,
        128,
        82,
        144,
        145,
        32,
        84,
        22,
        3,
        97,
        11,
        181,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        128,
        128,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        96,
        29,
        130,
        82,
        128,
        131,
        32,
        84,
        51,
        132,
        82,
        96,
        31,
        144,
        146,
        82,
        130,
        32,
        128,
        84,
        145,
        146,
        144,
        145,
        97,
        24,
        83,
        144,
        132,
        144,
        97,
        40,
        193,
        86,
        91,
        144,
        145,
        85,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        17,
        131,
        129,
        84,
        129,
        16,
        97,
        24,
        113,
        87,
        97,
        24,
        113,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        80,
        128,
        21,
        97,
        25,
        50,
        87,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        96,
        25,
        132,
        129,
        84,
        129,
        16,
        97,
        24,
        170,
        87,
        97,
        24,
        170,
        97,
        40,
        149,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        84,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        10,
        59,
        231,
        87,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        24,
        243,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        25,
        23,
        145,
        144,
        97,
        41,
        150,
        86,
        91,
        97,
        25,
        33,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        97,
        25,
        43,
        145,
        144,
        97,
        40,
        235,
        86,
        91,
        145,
        80,
        97,
        8,
        240,
        86,
        91,
        96,
        19,
        131,
        129,
        84,
        129,
        16,
        97,
        25,
        69,
        87,
        97,
        25,
        69,
        97,
        40,
        149,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        84,
        145,
        80,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        91,
        96,
        17,
        84,
        129,
        16,
        21,
        97,
        12,
        164,
        87,
        96,
        0,
        96,
        17,
        130,
        129,
        84,
        129,
        16,
        97,
        25,
        122,
        87,
        97,
        25,
        122,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        80,
        128,
        21,
        97,
        26,
        215,
        87,
        130,
        128,
        97,
        25,
        191,
        87,
        80,
        96,
        26,
        130,
        129,
        84,
        129,
        16,
        97,
        25,
        177,
        87,
        97,
        25,
        177,
        97,
        40,
        149,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        84,
        66,
        17,
        91,
        21,
        97,
        26,
        215,
        87,
        96,
        64,
        81,
        99,
        100,
        114,
        238,
        225,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        66,
        96,
        36,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        144,
        99,
        100,
        114,
        238,
        225,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        26,
        16,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        26,
        52,
        145,
        144,
        97,
        41,
        150,
        86,
        91,
        96,
        25,
        131,
        129,
        84,
        129,
        16,
        97,
        26,
        71,
        87,
        97,
        26,
        71,
        97,
        40,
        149,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        129,
        144,
        85,
        80,
        128,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        81,
        56,
        114,
        189,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        26,
        147,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        26,
        183,
        145,
        144,
        97,
        41,
        150,
        86,
        91,
        96,
        26,
        131,
        129,
        84,
        129,
        16,
        97,
        26,
        202,
        87,
        97,
        26,
        202,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        85,
        91,
        80,
        128,
        97,
        26,
        226,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        25,
        91,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        13,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        27,
        66,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        13,
        96,
        36,
        130,
        1,
        82,
        108,
        73,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        112,
        114,
        111,
        120,
        121,
        96,
        152,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        14,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        51,
        132,
        82,
        144,
        145,
        82,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        27,
        181,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        80,
        114,
        111,
        120,
        121,
        32,
        104,
        97,
        115,
        32,
        110,
        111,
        116,
        32,
        97,
        108,
        108,
        111,
        119,
        101,
        100,
        32,
        121,
        111,
        117,
        32,
        121,
        101,
        116,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        128,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        128,
        21,
        97,
        28,
        16,
        87,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        29,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        132,
        82,
        96,
        31,
        144,
        146,
        82,
        130,
        32,
        128,
        84,
        145,
        146,
        144,
        145,
        97,
        28,
        10,
        144,
        132,
        144,
        97,
        40,
        193,
        86,
        91,
        144,
        145,
        85,
        80,
        80,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        128,
        128,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        29,
        131,
        82,
        129,
        132,
        32,
        84,
        144,
        132,
        82,
        96,
        31,
        144,
        146,
        82,
        130,
        32,
        128,
        84,
        145,
        146,
        144,
        145,
        97,
        28,
        95,
        144,
        132,
        144,
        97,
        41,
        13,
        86,
        91,
        144,
        145,
        85,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        28,
        148,
        87,
        80,
        115,
        132,
        18,
        235,
        244,
        91,
        172,
        27,
        52,
        11,
        190,
        143,
        49,
        139,
        146,
        140,
        70,
        108,
        78,
        57,
        202,
        51,
        20,
        91,
        97,
        28,
        176,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        9,
        242,
        144,
        97,
        41,
        57,
        86,
        91,
        128,
        81,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        17,
        21,
        97,
        28,
        255,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        19,
        96,
        36,
        130,
        1,
        82,
        114,
        77,
        117,
        115,
        116,
        32,
        98,
        101,
        32,
        62,
        61,
        32,
        77,
        85,
        76,
        32,
        80,
        82,
        69,
        67,
        96,
        104,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        96,
        128,
        129,
        1,
        81,
        96,
        1,
        17,
        128,
        21,
        144,
        97,
        29,
        25,
        87,
        80,
        96,
        160,
        129,
        1,
        81,
        96,
        1,
        17,
        21,
        91,
        97,
        29,
        84,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        12,
        96,
        36,
        130,
        1,
        82,
        107,
        77,
        117,
        115,
        116,
        32,
        98,
        101,
        32,
        62,
        61,
        32,
        49,
        96,
        160,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        128,
        81,
        96,
        6,
        85,
        96,
        32,
        129,
        1,
        81,
        96,
        10,
        85,
        96,
        64,
        129,
        1,
        81,
        96,
        11,
        85,
        96,
        96,
        129,
        1,
        81,
        96,
        9,
        85,
        96,
        128,
        129,
        1,
        81,
        96,
        7,
        85,
        96,
        160,
        1,
        81,
        96,
        8,
        85,
        86,
        91,
        96,
        0,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        96,
        11,
        84,
        97,
        15,
        6,
        132,
        97,
        19,
        71,
        86,
        91,
        97,
        29,
        163,
        96,
        0,
        97,
        25,
        88,
        86,
        91,
        96,
        4,
        84,
        66,
        16,
        97,
        29,
        182,
        87,
        97,
        29,
        180,
        97,
        34,
        215,
        86,
        91,
        86,
        91,
        97,
        29,
        180,
        97,
        37,
        89,
        86,
        91,
        96,
        0,
        129,
        131,
        16,
        97,
        29,
        205,
        87,
        129,
        97,
        29,
        207,
        86,
        91,
        130,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        2,
        128,
        84,
        3,
        97,
        30,
        39,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        96,
        2,
        128,
        85,
        86,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        15,
        96,
        36,
        130,
        1,
        82,
        110,
        78,
        101,
        101,
        100,
        32,
        103,
        82,
        69,
        76,
        32,
        108,
        111,
        103,
        105,
        99,
        96,
        136,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        21,
        97,
        11,
        181,
        87,
        96,
        0,
        97,
        30,
        129,
        130,
        97,
        7,
        158,
        86,
        91,
        144,
        80,
        96,
        0,
        91,
        129,
        81,
        129,
        16,
        21,
        97,
        30,
        226,
        87,
        129,
        129,
        129,
        81,
        129,
        16,
        97,
        30,
        161,
        87,
        97,
        30,
        161,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        23,
        131,
        82,
        96,
        64,
        128,
        130,
        32,
        133,
        131,
        82,
        144,
        147,
        82,
        145,
        144,
        145,
        32,
        85,
        128,
        97,
        30,
        218,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        30,
        134,
        86,
        91,
        80,
        96,
        0,
        91,
        129,
        81,
        129,
        16,
        21,
        97,
        17,
        90,
        87,
        96,
        21,
        129,
        129,
        84,
        129,
        16,
        97,
        31,
        2,
        87,
        97,
        31,
        2,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        128,
        131,
        32,
        144,
        145,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        131,
        82,
        96,
        22,
        130,
        82,
        96,
        64,
        128,
        132,
        32,
        133,
        133,
        82,
        144,
        146,
        82,
        145,
        32,
        85,
        128,
        97,
        31,
        56,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        30,
        230,
        86,
        91,
        96,
        0,
        97,
        31,
        78,
        66,
        96,
        4,
        84,
        97,
        29,
        190,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        96,
        96,
        131,
        96,
        1,
        97,
        31,
        98,
        130,
        130,
        97,
        11,
        184,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        24,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        66,
        144,
        85,
        96,
        33,
        84,
        98,
        1,
        0,
        0,
        144,
        4,
        96,
        255,
        22,
        21,
        97,
        31,
        210,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        25,
        96,
        36,
        130,
        1,
        82,
        120,
        20,
        153,
        93,
        216,
        92,
        153,
        28,
        200,
        24,
        219,
        219,
        27,
        25,
        88,
        221,
        26,
        91,
        219,
        136,
        28,
        24,
        93,
        92,
        217,
        89,
        96,
        58,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        96,
        16,
        84,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        31,
        237,
        87,
        97,
        31,
        237,
        97,
        39,
        243,
        86,
        91,
        96,
        64,
        81,
        144,
        128,
        130,
        82,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        130,
        1,
        96,
        64,
        82,
        128,
        21,
        97,
        32,
        22,
        87,
        129,
        96,
        32,
        1,
        96,
        32,
        130,
        2,
        128,
        54,
        131,
        55,
        1,
        144,
        80,
        91,
        80,
        146,
        80,
        96,
        0,
        91,
        96,
        16,
        84,
        129,
        16,
        21,
        97,
        33,
        169,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        23,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        132,
        132,
        82,
        144,
        145,
        82,
        144,
        32,
        84,
        132,
        81,
        133,
        144,
        131,
        144,
        129,
        16,
        97,
        32,
        94,
        87,
        97,
        32,
        94,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        136,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        23,
        130,
        82,
        96,
        64,
        128,
        130,
        32,
        132,
        131,
        82,
        144,
        146,
        82,
        144,
        129,
        32,
        129,
        144,
        85,
        132,
        81,
        133,
        144,
        131,
        144,
        129,
        16,
        97,
        32,
        165,
        87,
        97,
        32,
        165,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        17,
        21,
        97,
        33,
        151,
        87,
        97,
        33,
        7,
        96,
        16,
        130,
        129,
        84,
        129,
        16,
        97,
        32,
        201,
        87,
        97,
        32,
        201,
        97,
        40,
        149,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        96,
        0,
        144,
        84,
        144,
        97,
        1,
        0,
        10,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        135,
        134,
        132,
        129,
        81,
        129,
        16,
        97,
        32,
        250,
        87,
        97,
        32,
        250,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        97,
        33,
        195,
        86,
        91,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        29,
        47,
        44,
        165,
        58,
        245,
        210,
        243,
        51,
        189,
        50,
        253,
        212,
        95,
        156,
        82,
        173,
        142,
        190,
        49,
        65,
        79,
        119,
        146,
        145,
        32,
        119,
        252,
        179,
        135,
        109,
        255,
        133,
        131,
        129,
        81,
        129,
        16,
        97,
        33,
        68,
        87,
        97,
        33,
        68,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        16,
        132,
        129,
        84,
        129,
        16,
        97,
        33,
        95,
        87,
        97,
        33,
        95,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        145,
        130,
        144,
        32,
        1,
        84,
        96,
        64,
        128,
        81,
        147,
        132,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        146,
        132,
        1,
        146,
        144,
        146,
        82,
        138,
        22,
        144,
        130,
        1,
        82,
        96,
        96,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        91,
        128,
        97,
        33,
        161,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        32,
        28,
        86,
        91,
        80,
        131,
        21,
        97,
        33,
        186,
        87,
        97,
        33,
        186,
        134,
        134,
        97,
        30,
        45,
        86,
        91,
        80,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        36,
        131,
        1,
        82,
        96,
        68,
        128,
        131,
        1,
        133,
        144,
        82,
        131,
        81,
        128,
        132,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        100,
        144,
        146,
        1,
        131,
        82,
        96,
        32,
        130,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        23,
        144,
        82,
        145,
        81,
        96,
        0,
        146,
        131,
        146,
        144,
        135,
        22,
        145,
        97,
        34,
        31,
        145,
        144,
        97,
        41,
        211,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        134,
        90,
        241,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        34,
        92,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        34,
        97,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        128,
        21,
        97,
        34,
        139,
        87,
        80,
        128,
        81,
        21,
        128,
        97,
        34,
        139,
        87,
        80,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        34,
        139,
        145,
        144,
        97,
        41,
        239,
        86,
        91,
        97,
        12,
        160,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        114,
        97,
        110,
        115,
        102,
        101,
        114,
        72,
        101,
        108,
        112,
        101,
        114,
        58,
        32,
        84,
        82,
        65,
        78,
        83,
        70,
        69,
        82,
        95,
        70,
        65,
        73,
        76,
        69,
        68,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        9,
        242,
        86,
        91,
        96,
        0,
        91,
        96,
        18,
        84,
        129,
        16,
        21,
        97,
        35,
        149,
        87,
        96,
        0,
        96,
        18,
        130,
        129,
        84,
        129,
        16,
        97,
        34,
        249,
        87,
        97,
        34,
        249,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        80,
        128,
        21,
        97,
        35,
        130,
        87,
        96,
        64,
        81,
        99,
        9,
        33,
        147,
        171,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        144,
        99,
        9,
        33,
        147,
        171,
        144,
        96,
        36,
        1,
        96,
        64,
        128,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        35,
        91,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        35,
        127,
        145,
        144,
        97,
        42,
        12,
        86,
        91,
        80,
        80,
        91,
        80,
        128,
        97,
        35,
        141,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        34,
        218,
        86,
        91,
        80,
        96,
        0,
        98,
        9,
        58,
        128,
        96,
        4,
        84,
        66,
        97,
        35,
        170,
        145,
        144,
        97,
        40,
        193,
        86,
        91,
        97,
        35,
        180,
        145,
        144,
        97,
        40,
        235,
        86,
        91,
        144,
        80,
        96,
        0,
        91,
        96,
        16,
        84,
        129,
        16,
        21,
        97,
        37,
        43,
        87,
        96,
        16,
        129,
        129,
        84,
        129,
        16,
        97,
        35,
        214,
        87,
        97,
        35,
        214,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        84,
        96,
        64,
        81,
        99,
        112,
        160,
        130,
        49,
        96,
        224,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        99,
        112,
        160,
        130,
        49,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        36,
        39,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        36,
        75,
        145,
        144,
        97,
        41,
        150,
        86,
        91,
        97,
        36,
        86,
        131,
        96,
        1,
        97,
        41,
        13,
        86,
        91,
        98,
        9,
        58,
        128,
        97,
        36,
        99,
        132,
        97,
        24,
        91,
        86,
        91,
        97,
        36,
        109,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        97,
        36,
        119,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        17,
        21,
        96,
        16,
        130,
        129,
        84,
        129,
        16,
        97,
        36,
        140,
        87,
        97,
        36,
        140,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        145,
        130,
        144,
        32,
        1,
        84,
        96,
        64,
        128,
        81,
        127,
        78,
        111,
        116,
        32,
        101,
        110,
        111,
        117,
        103,
        104,
        32,
        114,
        101,
        119,
        97,
        114,
        100,
        32,
        116,
        111,
        107,
        101,
        110,
        115,
        32,
        97,
        118,
        97,
        105,
        108,
        97,
        98,
        147,
        129,
        1,
        147,
        144,
        147,
        82,
        99,
        3,
        99,
        41,
        209,
        96,
        229,
        27,
        144,
        131,
        1,
        82,
        96,
        96,
        27,
        107,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        25,
        22,
        96,
        68,
        130,
        1,
        82,
        96,
        88,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        144,
        97,
        37,
        24,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        9,
        242,
        145,
        144,
        97,
        42,
        48,
        86,
        91,
        80,
        128,
        97,
        37,
        35,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        35,
        185,
        86,
        91,
        80,
        98,
        9,
        58,
        128,
        97,
        37,
        59,
        130,
        96,
        1,
        97,
        41,
        13,
        86,
        91,
        97,
        37,
        69,
        145,
        144,
        97,
        40,
        212,
        86,
        91,
        96,
        4,
        84,
        97,
        37,
        82,
        145,
        144,
        97,
        41,
        13,
        86,
        91,
        96,
        4,
        85,
        97,
        11,
        181,
        91,
        96,
        0,
        97,
        37,
        99,
        97,
        13,
        144,
        86,
        91,
        144,
        80,
        96,
        0,
        91,
        96,
        21,
        84,
        129,
        16,
        21,
        97,
        37,
        189,
        87,
        129,
        129,
        129,
        81,
        129,
        16,
        97,
        37,
        132,
        87,
        97,
        37,
        132,
        97,
        40,
        149,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        21,
        130,
        129,
        84,
        129,
        16,
        97,
        37,
        159,
        87,
        97,
        37,
        159,
        97,
        40,
        149,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        144,
        145,
        32,
        1,
        85,
        128,
        97,
        37,
        181,
        129,
        97,
        41,
        32,
        86,
        91,
        145,
        80,
        80,
        97,
        37,
        104,
        86,
        91,
        80,
        97,
        37,
        198,
        97,
        31,
        64,
        86,
        91,
        96,
        5,
        85,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        18,
        116,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        37,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        29,
        207,
        130,
        97,
        37,
        204,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        130,
        81,
        130,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        145,
        144,
        132,
        130,
        1,
        144,
        96,
        64,
        133,
        1,
        144,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        38,
        54,
        87,
        131,
        81,
        131,
        82,
        146,
        132,
        1,
        146,
        145,
        132,
        1,
        145,
        96,
        1,
        1,
        97,
        38,
        26,
        86,
        91,
        80,
        144,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        38,
        84,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        130,
        81,
        130,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        145,
        144,
        132,
        130,
        1,
        144,
        96,
        64,
        133,
        1,
        144,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        38,
        54,
        87,
        131,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        82,
        146,
        132,
        1,
        146,
        145,
        132,
        1,
        145,
        96,
        1,
        1,
        97,
        38,
        119,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        38,
        175,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        38,
        184,
        131,
        97,
        37,
        204,
        86,
        91,
        145,
        80,
        97,
        38,
        198,
        96,
        32,
        132,
        1,
        97,
        37,
        204,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        128,
        21,
        21,
        129,
        20,
        97,
        11,
        181,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        38,
        240,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        38,
        249,
        131,
        97,
        37,
        204,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        39,
        9,
        129,
        97,
        38,
        207,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        39,
        39,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        39,
        48,
        131,
        97,
        37,
        204,
        86,
        91,
        148,
        96,
        32,
        147,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        39,
        83,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        97,
        39,
        94,
        129,
        97,
        38,
        207,
        86,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        97,
        39,
        110,
        129,
        97,
        38,
        207,
        86,
        91,
        145,
        80,
        96,
        64,
        132,
        1,
        53,
        97,
        39,
        126,
        129,
        97,
        38,
        207,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        128,
        133,
        135,
        3,
        18,
        21,
        97,
        39,
        159,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        39,
        168,
        133,
        97,
        37,
        204,
        86,
        91,
        147,
        80,
        96,
        32,
        133,
        1,
        53,
        146,
        80,
        97,
        39,
        189,
        96,
        64,
        134,
        1,
        97,
        37,
        204,
        86,
        91,
        145,
        80,
        97,
        39,
        203,
        96,
        96,
        134,
        1,
        97,
        37,
        204,
        86,
        91,
        144,
        80,
        146,
        149,
        145,
        148,
        80,
        146,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        39,
        232,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        29,
        207,
        129,
        97,
        38,
        207,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        192,
        130,
        132,
        3,
        18,
        21,
        97,
        40,
        27,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        40,
        42,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        81,
        96,
        192,
        129,
        1,
        129,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        21,
        97,
        40,
        91,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        82,
        128,
        96,
        192,
        132,
        1,
        133,
        129,
        17,
        21,
        97,
        40,
        112,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        40,
        138,
        87,
        128,
        53,
        131,
        82,
        96,
        32,
        146,
        131,
        1,
        146,
        1,
        97,
        40,
        114,
        86,
        91,
        80,
        145,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        97,
        9,
        28,
        87,
        97,
        9,
        28,
        97,
        40,
        171,
        86,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        9,
        28,
        87,
        97,
        9,
        28,
        97,
        40,
        171,
        86,
        91,
        96,
        0,
        130,
        97,
        41,
        8,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        9,
        28,
        87,
        97,
        9,
        28,
        97,
        40,
        171,
        86,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        41,
        50,
        87,
        97,
        41,
        50,
        97,
        40,
        171,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        96,
        21,
        144,
        130,
        1,
        82,
        116,
        78,
        111,
        116,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        111,
        114,
        32,
        116,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        96,
        88,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        96,
        20,
        144,
        130,
        1,
        82,
        115,
        39,
        55,
        186,
        16,
        55,
        187,
        183,
        50,
        185,
        16,
        55,
        185,
        16,
        58,
        53,
        183,
        16,
        54,
        179,
        185,
        96,
        97,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        41,
        168,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        41,
        202,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        41,
        178,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        41,
        229,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        41,
        175,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        42,
        1,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        29,
        207,
        129,
        97,
        38,
        207,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        42,
        31,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        80,
        128,
        81,
        96,
        32,
        144,
        145,
        1,
        81,
        144,
        146,
        144,
        145,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        130,
        81,
        128,
        96,
        32,
        132,
        1,
        82,
        97,
        42,
        79,
        129,
        96,
        64,
        133,
        1,
        96,
        32,
        135,
        1,
        97,
        41,
        175,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        145,
        144,
        145,
        1,
        96,
        64,
        1,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        68,
        11,
        121,
        181,
        10,
        161,
        45,
        246,
        73,
        59,
        27,
        167,
        7,
        10,
        202,
        153,
        130,
        148,
        217,
        248,
        236,
        113,
        47,
        73,
        245,
        189,
        47,
        98,
        110,
        195,
        217,
        59,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    lazy_static::lazy_static! {
            pub static ref ORIONUNIFIEDFARMTEMPLATE_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from(
            __BYTECODE.to_vec(),
        );
    }
    pub struct OrionUnifiedFarmTemplate<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for OrionUnifiedFarmTemplate<M> {
        fn clone(&self) -> Self {
            OrionUnifiedFarmTemplate(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for OrionUnifiedFarmTemplate<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for OrionUnifiedFarmTemplate<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(OrionUnifiedFarmTemplate))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> OrionUnifiedFarmTemplate<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                ORIONUNIFIEDFARMTEMPLATE_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                ORIONUNIFIEDFARMTEMPLATE_ABI.clone(),
                ORIONUNIFIEDFARMTEMPLATE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `acceptOwnership` (0x79ba5097) function
        pub fn accept_ownership(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([121, 186, 80, 151], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `calcCurCombinedWeight` (0x8bad86a7) function
        pub fn calc_cur_combined_weight(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([139, 173, 134, 167], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `changeTokenManager` (0xde1a6551) function
        pub fn change_token_manager(
            &self,
            reward_token_address: ::ethers::core::types::Address,
            new_manager_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [222, 26, 101, 81],
                    (reward_token_address, new_manager_address),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `combinedWeightOf` (0x36f89af2) function
        pub fn combined_weight_of(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([54, 248, 154, 242], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `earned` (0x008cc262) function
        pub fn earned(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::U256>,
        > {
            self.0
                .method_hash([0, 140, 194, 98], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `fraxPerLPStored` (0xd2010fb4) function
        pub fn frax_per_lp_stored(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([210, 1, 15, 180], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `fraxPerLPToken` (0x5bfd9258) function
        pub fn frax_per_lp_token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([91, 253, 146, 88], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getAllRewardTokens` (0x12edb24c) function
        pub fn get_all_reward_tokens(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Address>,
        > {
            self.0
                .method_hash([18, 237, 178, 76], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getProxyFor` (0xc3543826) function
        pub fn get_proxy_for(
            &self,
            addr: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([195, 84, 56, 38], addr)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getReward` (0xc00007b0) function
        pub fn get_reward(
            &self,
            destination_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::U256>,
        > {
            self.0
                .method_hash([192, 0, 7, 176], destination_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getReward2` (0x7910d17b) function
        pub fn get_reward_2(
            &self,
            destination_address: ::ethers::core::types::Address,
            claim_extra_too: bool,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::U256>,
        > {
            self.0
                .method_hash([121, 16, 209, 123], (destination_address, claim_extra_too))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getRewardExtraLogic` (0x387edc86) function
        pub fn get_reward_extra_logic(
            &self,
            destination_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([56, 126, 220, 134], destination_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getRewardForDuration` (0x1c1f78eb) function
        pub fn get_reward_for_duration(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::U256>,
        > {
            self.0
                .method_hash([28, 31, 120, 235], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isTokenManagerFor` (0x231b68dc) function
        pub fn is_token_manager_for(
            &self,
            caller_addr: ::ethers::core::types::Address,
            reward_token_addr: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([35, 27, 104, 220], (caller_addr, reward_token_addr))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastRewardClaimTime` (0x6c430dbb) function
        pub fn last_reward_claim_time(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([108, 67, 13, 187], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastUpdateTime` (0xc8f33c91) function
        pub fn last_update_time(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([200, 243, 60, 145], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lockMultiplier` (0x0d7bac4f) function
        pub fn lock_multiplier(
            &self,
            secs: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([13, 123, 172, 79], secs)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lock_max_multiplier` (0xcdc82e80) function
        pub fn lock_max_multiplier(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([205, 200, 46, 128], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lock_time_for_max_multiplier` (0xb94c4dcb) function
        pub fn lock_time_for_max_multiplier(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([185, 76, 77, 203], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lock_time_min` (0x6e27cef9) function
        pub fn lock_time_min(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([110, 39, 206, 249], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lockedLiquidityOf` (0xd9f96e8d) function
        pub fn locked_liquidity_of(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([217, 249, 110, 141], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `maxLPForMaxBoost` (0xa0f23476) function
        pub fn max_lp_for_max_boost(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([160, 242, 52, 118], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `minVeORNForMaxBoost` (0xfd041918) function
        pub fn min_ve_orn_for_max_boost(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([253, 4, 25, 24], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `minVeORNForMaxBoostProxy` (0x77e024b2) function
        pub fn min_ve_orn_for_max_boost_proxy(
            &self,
            proxy_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([119, 224, 36, 178], proxy_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `nominateNewOwner` (0x1627540c) function
        pub fn nominate_new_owner(
            &self,
            owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([22, 39, 84, 12], owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `nominatedOwner` (0x53a47bb7) function
        pub fn nominated_owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([83, 164, 123, 183], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `periodFinish` (0xebe2b12b) function
        pub fn period_finish(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([235, 226, 177, 43], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `proxyStakedOrion` (0x57b98c87) function
        pub fn proxy_staked_orion(
            &self,
            proxy_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([87, 185, 140, 135], proxy_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `proxyToggleStaker` (0xe7f30582) function
        pub fn proxy_toggle_staker(
            &self,
            staker_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([231, 243, 5, 130], staker_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `proxy_lp_balances` (0x7d6ef08e) function
        pub fn proxy_lp_balances(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([125, 110, 240, 142], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `recoverERC20` (0x8980f11f) function
        pub fn recover_erc20(
            &self,
            token_address: ::ethers::core::types::Address,
            token_amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([137, 128, 241, 31], (token_address, token_amount))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewardManagers` (0x41a16f3f) function
        pub fn reward_managers(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([65, 161, 111, 63], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewardRates` (0xf2caeb1e) function
        pub fn reward_rates(
            &self,
            token_idx: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([242, 202, 235, 30], token_idx)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewardTokenAddrToIdx` (0x69339245) function
        pub fn reward_token_addr_to_idx(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([105, 51, 146, 69], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewardsDuration` (0x386a9525) function
        pub fn rewards_duration(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([56, 106, 149, 37], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewardsPerToken` (0x70641a36) function
        pub fn rewards_per_token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::U256>,
        > {
            self.0
                .method_hash([112, 100, 26, 54], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setMiscVariables` (0xfacefb64) function
        pub fn set_misc_variables(
            &self,
            misc_vars: [::ethers::core::types::U256; 6usize],
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 206, 251, 100], misc_vars)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setPauses` (0xcc2abd64) function
        pub fn set_pauses(
            &self,
            staking_paused: bool,
            withdrawals_paused: bool,
            rewards_collection_paused: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [204, 42, 189, 100],
                    (
                        staking_paused,
                        withdrawals_paused,
                        rewards_collection_paused,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setRewardVars` (0xd5e1a9c6) function
        pub fn set_reward_vars(
            &self,
            reward_token_address: ::ethers::core::types::Address,
            new_rate: ::ethers::core::types::U256,
            gauge_controller_address: ::ethers::core::types::Address,
            rewards_distributor_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [213, 225, 169, 198],
                    (
                        reward_token_address,
                        new_rate,
                        gauge_controller_address,
                        rewards_distributor_address,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `stakerSetVeORNProxy` (0xfa05f2e0) function
        pub fn staker_set_ve_orn_proxy(
            &self,
            proxy_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 5, 242, 224], proxy_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `staker_designated_proxies` (0x28408bab) function
        pub fn staker_designated_proxies(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([40, 64, 139, 171], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `stakesUnlocked` (0x9637927f) function
        pub fn stakes_unlocked(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([150, 55, 146, 127], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sync` (0xfff6cae9) function
        pub fn sync(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([255, 246, 202, 233], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sync_gauge_weights` (0xf77e34d1) function
        pub fn sync_gauge_weights(
            &self,
            force_update: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([247, 126, 52, 209], force_update)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `toggleValidVeORNProxy` (0x5806308c) function
        pub fn toggle_valid_ve_orn_proxy(
            &self,
            proxy_addr: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([88, 6, 48, 140], proxy_addr)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalCombinedWeight` (0x64f2c060) function
        pub fn total_combined_weight(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([100, 242, 192, 96], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalLiquidityLocked` (0xe01f62bf) function
        pub fn total_liquidity_locked(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([224, 31, 98, 191], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `unlockStakes` (0xe1ba95d2) function
        pub fn unlock_stakes(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([225, 186, 149, 210], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `updateRewardAndBalance` (0x55189773) function
        pub fn update_reward_and_balance(
            &self,
            account: ::ethers::core::types::Address,
            sync_too: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([85, 24, 151, 115], (account, sync_too))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `userStakedOrion` (0xd4b2120f) function
        pub fn user_staked_orion(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([212, 178, 18, 15], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `veORNMultiplier` (0xe406b547) function
        pub fn ve_orn_multiplier(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([228, 6, 181, 71], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `veorn_boost_scale_factor` (0xae8e1270) function
        pub fn veorn_boost_scale_factor(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([174, 142, 18, 112], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `veorn_max_multiplier` (0xfdd24cdc) function
        pub fn veorn_max_multiplier(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([253, 210, 76, 220], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `veorn_per_frax_for_max_boost` (0x0db369d6) function
        pub fn veorn_per_frax_for_max_boost(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([13, 179, 105, 214], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `OwnerChanged` event
        pub fn owner_changed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnerChangedFilter> {
            self.0.event()
        }
        ///Gets the contract's `OwnerNominated` event
        pub fn owner_nominated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnerNominatedFilter> {
            self.0.event()
        }
        ///Gets the contract's `RewardPaid` event
        pub fn reward_paid_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RewardPaidFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OrionUnifiedFarmTemplateEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for OrionUnifiedFarmTemplate<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "OwnerChanged", abi = "OwnerChanged(address,address)")]
    pub struct OwnerChangedFilter {
        pub old_owner: ::ethers::core::types::Address,
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "OwnerNominated", abi = "OwnerNominated(address)")]
    pub struct OwnerNominatedFilter {
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "RewardPaid",
        abi = "RewardPaid(address,uint256,address,address)"
    )]
    pub struct RewardPaidFilter {
        #[ethevent(indexed)]
        pub user: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub token_address: ::ethers::core::types::Address,
        pub destination_address: ::ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum OrionUnifiedFarmTemplateEvents {
        OwnerChangedFilter(OwnerChangedFilter),
        OwnerNominatedFilter(OwnerNominatedFilter),
        RewardPaidFilter(RewardPaidFilter),
    }
    impl ::ethers::contract::EthLogDecode for OrionUnifiedFarmTemplateEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = OwnerChangedFilter::decode_log(log) {
                return Ok(OrionUnifiedFarmTemplateEvents::OwnerChangedFilter(decoded));
            }
            if let Ok(decoded) = OwnerNominatedFilter::decode_log(log) {
                return Ok(OrionUnifiedFarmTemplateEvents::OwnerNominatedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = RewardPaidFilter::decode_log(log) {
                return Ok(OrionUnifiedFarmTemplateEvents::RewardPaidFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for OrionUnifiedFarmTemplateEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OrionUnifiedFarmTemplateEvents::OwnerChangedFilter(element) => element.fmt(f),
                OrionUnifiedFarmTemplateEvents::OwnerNominatedFilter(element) => element.fmt(f),
                OrionUnifiedFarmTemplateEvents::RewardPaidFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `acceptOwnership` function with signature `acceptOwnership()` and selector `0x79ba5097`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "acceptOwnership", abi = "acceptOwnership()")]
    pub struct AcceptOwnershipCall;
    ///Container type for all input parameters for the `calcCurCombinedWeight` function with signature `calcCurCombinedWeight(address)` and selector `0x8bad86a7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "calcCurCombinedWeight", abi = "calcCurCombinedWeight(address)")]
    pub struct CalcCurCombinedWeightCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `changeTokenManager` function with signature `changeTokenManager(address,address)` and selector `0xde1a6551`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "changeTokenManager",
        abi = "changeTokenManager(address,address)"
    )]
    pub struct ChangeTokenManagerCall {
        pub reward_token_address: ::ethers::core::types::Address,
        pub new_manager_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `combinedWeightOf` function with signature `combinedWeightOf(address)` and selector `0x36f89af2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "combinedWeightOf", abi = "combinedWeightOf(address)")]
    pub struct CombinedWeightOfCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `earned` function with signature `earned(address)` and selector `0x008cc262`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "earned", abi = "earned(address)")]
    pub struct EarnedCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `fraxPerLPStored` function with signature `fraxPerLPStored()` and selector `0xd2010fb4`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "fraxPerLPStored", abi = "fraxPerLPStored()")]
    pub struct FraxPerLPStoredCall;
    ///Container type for all input parameters for the `fraxPerLPToken` function with signature `fraxPerLPToken()` and selector `0x5bfd9258`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "fraxPerLPToken", abi = "fraxPerLPToken()")]
    pub struct FraxPerLPTokenCall;
    ///Container type for all input parameters for the `getAllRewardTokens` function with signature `getAllRewardTokens()` and selector `0x12edb24c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getAllRewardTokens", abi = "getAllRewardTokens()")]
    pub struct GetAllRewardTokensCall;
    ///Container type for all input parameters for the `getProxyFor` function with signature `getProxyFor(address)` and selector `0xc3543826`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getProxyFor", abi = "getProxyFor(address)")]
    pub struct GetProxyForCall {
        pub addr: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `getReward` function with signature `getReward(address)` and selector `0xc00007b0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getReward", abi = "getReward(address)")]
    pub struct GetRewardCall {
        pub destination_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `getReward2` function with signature `getReward2(address,bool)` and selector `0x7910d17b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getReward2", abi = "getReward2(address,bool)")]
    pub struct GetReward2Call {
        pub destination_address: ::ethers::core::types::Address,
        pub claim_extra_too: bool,
    }
    ///Container type for all input parameters for the `getRewardExtraLogic` function with signature `getRewardExtraLogic(address)` and selector `0x387edc86`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getRewardExtraLogic", abi = "getRewardExtraLogic(address)")]
    pub struct GetRewardExtraLogicCall {
        pub destination_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `getRewardForDuration` function with signature `getRewardForDuration()` and selector `0x1c1f78eb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getRewardForDuration", abi = "getRewardForDuration()")]
    pub struct GetRewardForDurationCall;
    ///Container type for all input parameters for the `isTokenManagerFor` function with signature `isTokenManagerFor(address,address)` and selector `0x231b68dc`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "isTokenManagerFor", abi = "isTokenManagerFor(address,address)")]
    pub struct IsTokenManagerForCall {
        pub caller_addr: ::ethers::core::types::Address,
        pub reward_token_addr: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `lastRewardClaimTime` function with signature `lastRewardClaimTime(address)` and selector `0x6c430dbb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lastRewardClaimTime", abi = "lastRewardClaimTime(address)")]
    pub struct LastRewardClaimTimeCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `lastUpdateTime` function with signature `lastUpdateTime()` and selector `0xc8f33c91`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lastUpdateTime", abi = "lastUpdateTime()")]
    pub struct LastUpdateTimeCall;
    ///Container type for all input parameters for the `lockMultiplier` function with signature `lockMultiplier(uint256)` and selector `0x0d7bac4f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lockMultiplier", abi = "lockMultiplier(uint256)")]
    pub struct LockMultiplierCall {
        pub secs: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `lock_max_multiplier` function with signature `lock_max_multiplier()` and selector `0xcdc82e80`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lock_max_multiplier", abi = "lock_max_multiplier()")]
    pub struct LockMaxMultiplierCall;
    ///Container type for all input parameters for the `lock_time_for_max_multiplier` function with signature `lock_time_for_max_multiplier()` and selector `0xb94c4dcb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "lock_time_for_max_multiplier",
        abi = "lock_time_for_max_multiplier()"
    )]
    pub struct LockTimeForMaxMultiplierCall;
    ///Container type for all input parameters for the `lock_time_min` function with signature `lock_time_min()` and selector `0x6e27cef9`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lock_time_min", abi = "lock_time_min()")]
    pub struct LockTimeMinCall;
    ///Container type for all input parameters for the `lockedLiquidityOf` function with signature `lockedLiquidityOf(address)` and selector `0xd9f96e8d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "lockedLiquidityOf", abi = "lockedLiquidityOf(address)")]
    pub struct LockedLiquidityOfCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `maxLPForMaxBoost` function with signature `maxLPForMaxBoost(address)` and selector `0xa0f23476`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "maxLPForMaxBoost", abi = "maxLPForMaxBoost(address)")]
    pub struct MaxLPForMaxBoostCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `minVeORNForMaxBoost` function with signature `minVeORNForMaxBoost(address)` and selector `0xfd041918`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "minVeORNForMaxBoost", abi = "minVeORNForMaxBoost(address)")]
    pub struct MinVeORNForMaxBoostCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `minVeORNForMaxBoostProxy` function with signature `minVeORNForMaxBoostProxy(address)` and selector `0x77e024b2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "minVeORNForMaxBoostProxy",
        abi = "minVeORNForMaxBoostProxy(address)"
    )]
    pub struct MinVeORNForMaxBoostProxyCall {
        pub proxy_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `nominateNewOwner` function with signature `nominateNewOwner(address)` and selector `0x1627540c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "nominateNewOwner", abi = "nominateNewOwner(address)")]
    pub struct NominateNewOwnerCall {
        pub owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `nominatedOwner` function with signature `nominatedOwner()` and selector `0x53a47bb7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "nominatedOwner", abi = "nominatedOwner()")]
    pub struct NominatedOwnerCall;
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `periodFinish` function with signature `periodFinish()` and selector `0xebe2b12b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "periodFinish", abi = "periodFinish()")]
    pub struct PeriodFinishCall;
    ///Container type for all input parameters for the `proxyStakedOrion` function with signature `proxyStakedOrion(address)` and selector `0x57b98c87`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "proxyStakedOrion", abi = "proxyStakedOrion(address)")]
    pub struct ProxyStakedOrionCall {
        pub proxy_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `proxyToggleStaker` function with signature `proxyToggleStaker(address)` and selector `0xe7f30582`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "proxyToggleStaker", abi = "proxyToggleStaker(address)")]
    pub struct ProxyToggleStakerCall {
        pub staker_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `proxy_lp_balances` function with signature `proxy_lp_balances(address)` and selector `0x7d6ef08e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "proxy_lp_balances", abi = "proxy_lp_balances(address)")]
    pub struct ProxyLpBalancesCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `recoverERC20` function with signature `recoverERC20(address,uint256)` and selector `0x8980f11f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "recoverERC20", abi = "recoverERC20(address,uint256)")]
    pub struct RecoverERC20Call {
        pub token_address: ::ethers::core::types::Address,
        pub token_amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `rewardManagers` function with signature `rewardManagers(address)` and selector `0x41a16f3f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewardManagers", abi = "rewardManagers(address)")]
    pub struct RewardManagersCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `rewardRates` function with signature `rewardRates(uint256)` and selector `0xf2caeb1e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewardRates", abi = "rewardRates(uint256)")]
    pub struct RewardRatesCall {
        pub token_idx: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `rewardTokenAddrToIdx` function with signature `rewardTokenAddrToIdx(address)` and selector `0x69339245`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewardTokenAddrToIdx", abi = "rewardTokenAddrToIdx(address)")]
    pub struct RewardTokenAddrToIdxCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `rewardsDuration` function with signature `rewardsDuration()` and selector `0x386a9525`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewardsDuration", abi = "rewardsDuration()")]
    pub struct RewardsDurationCall;
    ///Container type for all input parameters for the `rewardsPerToken` function with signature `rewardsPerToken()` and selector `0x70641a36`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewardsPerToken", abi = "rewardsPerToken()")]
    pub struct RewardsPerTokenCall;
    ///Container type for all input parameters for the `setMiscVariables` function with signature `setMiscVariables(uint256[6])` and selector `0xfacefb64`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setMiscVariables", abi = "setMiscVariables(uint256[6])")]
    pub struct SetMiscVariablesCall {
        pub misc_vars: [::ethers::core::types::U256; 6usize],
    }
    ///Container type for all input parameters for the `setPauses` function with signature `setPauses(bool,bool,bool)` and selector `0xcc2abd64`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setPauses", abi = "setPauses(bool,bool,bool)")]
    pub struct SetPausesCall {
        pub staking_paused: bool,
        pub withdrawals_paused: bool,
        pub rewards_collection_paused: bool,
    }
    ///Container type for all input parameters for the `setRewardVars` function with signature `setRewardVars(address,uint256,address,address)` and selector `0xd5e1a9c6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "setRewardVars",
        abi = "setRewardVars(address,uint256,address,address)"
    )]
    pub struct SetRewardVarsCall {
        pub reward_token_address: ::ethers::core::types::Address,
        pub new_rate: ::ethers::core::types::U256,
        pub gauge_controller_address: ::ethers::core::types::Address,
        pub rewards_distributor_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `stakerSetVeORNProxy` function with signature `stakerSetVeORNProxy(address)` and selector `0xfa05f2e0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "stakerSetVeORNProxy", abi = "stakerSetVeORNProxy(address)")]
    pub struct StakerSetVeORNProxyCall {
        pub proxy_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `staker_designated_proxies` function with signature `staker_designated_proxies(address)` and selector `0x28408bab`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "staker_designated_proxies",
        abi = "staker_designated_proxies(address)"
    )]
    pub struct StakerDesignatedProxiesCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `stakesUnlocked` function with signature `stakesUnlocked()` and selector `0x9637927f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "stakesUnlocked", abi = "stakesUnlocked()")]
    pub struct StakesUnlockedCall;
    ///Container type for all input parameters for the `sync` function with signature `sync()` and selector `0xfff6cae9`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "sync", abi = "sync()")]
    pub struct SyncCall;
    ///Container type for all input parameters for the `sync_gauge_weights` function with signature `sync_gauge_weights(bool)` and selector `0xf77e34d1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "sync_gauge_weights", abi = "sync_gauge_weights(bool)")]
    pub struct SyncGaugeWeightsCall {
        pub force_update: bool,
    }
    ///Container type for all input parameters for the `toggleValidVeORNProxy` function with signature `toggleValidVeORNProxy(address)` and selector `0x5806308c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "toggleValidVeORNProxy", abi = "toggleValidVeORNProxy(address)")]
    pub struct ToggleValidVeORNProxyCall {
        pub proxy_addr: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `totalCombinedWeight` function with signature `totalCombinedWeight()` and selector `0x64f2c060`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "totalCombinedWeight", abi = "totalCombinedWeight()")]
    pub struct TotalCombinedWeightCall;
    ///Container type for all input parameters for the `totalLiquidityLocked` function with signature `totalLiquidityLocked()` and selector `0xe01f62bf`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "totalLiquidityLocked", abi = "totalLiquidityLocked()")]
    pub struct TotalLiquidityLockedCall;
    ///Container type for all input parameters for the `unlockStakes` function with signature `unlockStakes()` and selector `0xe1ba95d2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "unlockStakes", abi = "unlockStakes()")]
    pub struct UnlockStakesCall;
    ///Container type for all input parameters for the `updateRewardAndBalance` function with signature `updateRewardAndBalance(address,bool)` and selector `0x55189773`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "updateRewardAndBalance",
        abi = "updateRewardAndBalance(address,bool)"
    )]
    pub struct UpdateRewardAndBalanceCall {
        pub account: ::ethers::core::types::Address,
        pub sync_too: bool,
    }
    ///Container type for all input parameters for the `userStakedOrion` function with signature `userStakedOrion(address)` and selector `0xd4b2120f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "userStakedOrion", abi = "userStakedOrion(address)")]
    pub struct UserStakedOrionCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `veORNMultiplier` function with signature `veORNMultiplier(address)` and selector `0xe406b547`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "veORNMultiplier", abi = "veORNMultiplier(address)")]
    pub struct VeORNMultiplierCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `veorn_boost_scale_factor` function with signature `veorn_boost_scale_factor()` and selector `0xae8e1270`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "veorn_boost_scale_factor", abi = "veorn_boost_scale_factor()")]
    pub struct VeornBoostScaleFactorCall;
    ///Container type for all input parameters for the `veorn_max_multiplier` function with signature `veorn_max_multiplier()` and selector `0xfdd24cdc`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "veorn_max_multiplier", abi = "veorn_max_multiplier()")]
    pub struct VeornMaxMultiplierCall;
    ///Container type for all input parameters for the `veorn_per_frax_for_max_boost` function with signature `veorn_per_frax_for_max_boost()` and selector `0x0db369d6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "veorn_per_frax_for_max_boost",
        abi = "veorn_per_frax_for_max_boost()"
    )]
    pub struct VeornPerFraxForMaxBoostCall;
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum OrionUnifiedFarmTemplateCalls {
        AcceptOwnership(AcceptOwnershipCall),
        CalcCurCombinedWeight(CalcCurCombinedWeightCall),
        ChangeTokenManager(ChangeTokenManagerCall),
        CombinedWeightOf(CombinedWeightOfCall),
        Earned(EarnedCall),
        FraxPerLPStored(FraxPerLPStoredCall),
        FraxPerLPToken(FraxPerLPTokenCall),
        GetAllRewardTokens(GetAllRewardTokensCall),
        GetProxyFor(GetProxyForCall),
        GetReward(GetRewardCall),
        GetReward2(GetReward2Call),
        GetRewardExtraLogic(GetRewardExtraLogicCall),
        GetRewardForDuration(GetRewardForDurationCall),
        IsTokenManagerFor(IsTokenManagerForCall),
        LastRewardClaimTime(LastRewardClaimTimeCall),
        LastUpdateTime(LastUpdateTimeCall),
        LockMultiplier(LockMultiplierCall),
        LockMaxMultiplier(LockMaxMultiplierCall),
        LockTimeForMaxMultiplier(LockTimeForMaxMultiplierCall),
        LockTimeMin(LockTimeMinCall),
        LockedLiquidityOf(LockedLiquidityOfCall),
        MaxLPForMaxBoost(MaxLPForMaxBoostCall),
        MinVeORNForMaxBoost(MinVeORNForMaxBoostCall),
        MinVeORNForMaxBoostProxy(MinVeORNForMaxBoostProxyCall),
        NominateNewOwner(NominateNewOwnerCall),
        NominatedOwner(NominatedOwnerCall),
        Owner(OwnerCall),
        PeriodFinish(PeriodFinishCall),
        ProxyStakedOrion(ProxyStakedOrionCall),
        ProxyToggleStaker(ProxyToggleStakerCall),
        ProxyLpBalances(ProxyLpBalancesCall),
        RecoverERC20(RecoverERC20Call),
        RewardManagers(RewardManagersCall),
        RewardRates(RewardRatesCall),
        RewardTokenAddrToIdx(RewardTokenAddrToIdxCall),
        RewardsDuration(RewardsDurationCall),
        RewardsPerToken(RewardsPerTokenCall),
        SetMiscVariables(SetMiscVariablesCall),
        SetPauses(SetPausesCall),
        SetRewardVars(SetRewardVarsCall),
        StakerSetVeORNProxy(StakerSetVeORNProxyCall),
        StakerDesignatedProxies(StakerDesignatedProxiesCall),
        StakesUnlocked(StakesUnlockedCall),
        Sync(SyncCall),
        SyncGaugeWeights(SyncGaugeWeightsCall),
        ToggleValidVeORNProxy(ToggleValidVeORNProxyCall),
        TotalCombinedWeight(TotalCombinedWeightCall),
        TotalLiquidityLocked(TotalLiquidityLockedCall),
        UnlockStakes(UnlockStakesCall),
        UpdateRewardAndBalance(UpdateRewardAndBalanceCall),
        UserStakedOrion(UserStakedOrionCall),
        VeORNMultiplier(VeORNMultiplierCall),
        VeornBoostScaleFactor(VeornBoostScaleFactorCall),
        VeornMaxMultiplier(VeornMaxMultiplierCall),
        VeornPerFraxForMaxBoost(VeornPerFraxForMaxBoostCall),
    }
    impl ::ethers::core::abi::AbiDecode for OrionUnifiedFarmTemplateCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AcceptOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::AcceptOwnership(decoded));
            }
            if let Ok(decoded) =
                <CalcCurCombinedWeightCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::CalcCurCombinedWeight(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <ChangeTokenManagerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::ChangeTokenManager(decoded));
            }
            if let Ok(decoded) =
                <CombinedWeightOfCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::CombinedWeightOf(decoded));
            }
            if let Ok(decoded) =
                <EarnedCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::Earned(decoded));
            }
            if let Ok(decoded) =
                <FraxPerLPStoredCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::FraxPerLPStored(decoded));
            }
            if let Ok(decoded) =
                <FraxPerLPTokenCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::FraxPerLPToken(decoded));
            }
            if let Ok(decoded) =
                <GetAllRewardTokensCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::GetAllRewardTokens(decoded));
            }
            if let Ok(decoded) =
                <GetProxyForCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::GetProxyFor(decoded));
            }
            if let Ok(decoded) =
                <GetRewardCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::GetReward(decoded));
            }
            if let Ok(decoded) =
                <GetReward2Call as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::GetReward2(decoded));
            }
            if let Ok(decoded) =
                <GetRewardExtraLogicCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::GetRewardExtraLogic(decoded));
            }
            if let Ok(decoded) =
                <GetRewardForDurationCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::GetRewardForDuration(decoded));
            }
            if let Ok(decoded) =
                <IsTokenManagerForCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::IsTokenManagerFor(decoded));
            }
            if let Ok(decoded) =
                <LastRewardClaimTimeCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::LastRewardClaimTime(decoded));
            }
            if let Ok(decoded) =
                <LastUpdateTimeCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::LastUpdateTime(decoded));
            }
            if let Ok(decoded) =
                <LockMultiplierCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::LockMultiplier(decoded));
            }
            if let Ok(decoded) =
                <LockMaxMultiplierCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::LockMaxMultiplier(decoded));
            }
            if let Ok(decoded) =
                <LockTimeForMaxMultiplierCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(OrionUnifiedFarmTemplateCalls::LockTimeForMaxMultiplier(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <LockTimeMinCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::LockTimeMin(decoded));
            }
            if let Ok(decoded) =
                <LockedLiquidityOfCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::LockedLiquidityOf(decoded));
            }
            if let Ok(decoded) =
                <MaxLPForMaxBoostCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::MaxLPForMaxBoost(decoded));
            }
            if let Ok(decoded) =
                <MinVeORNForMaxBoostCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::MinVeORNForMaxBoost(decoded));
            }
            if let Ok(decoded) =
                <MinVeORNForMaxBoostProxyCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(OrionUnifiedFarmTemplateCalls::MinVeORNForMaxBoostProxy(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <NominateNewOwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::NominateNewOwner(decoded));
            }
            if let Ok(decoded) =
                <NominatedOwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::NominatedOwner(decoded));
            }
            if let Ok(decoded) =
                <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::Owner(decoded));
            }
            if let Ok(decoded) =
                <PeriodFinishCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::PeriodFinish(decoded));
            }
            if let Ok(decoded) =
                <ProxyStakedOrionCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::ProxyStakedOrion(decoded));
            }
            if let Ok(decoded) =
                <ProxyToggleStakerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::ProxyToggleStaker(decoded));
            }
            if let Ok(decoded) =
                <ProxyLpBalancesCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::ProxyLpBalances(decoded));
            }
            if let Ok(decoded) =
                <RecoverERC20Call as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::RecoverERC20(decoded));
            }
            if let Ok(decoded) =
                <RewardManagersCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::RewardManagers(decoded));
            }
            if let Ok(decoded) =
                <RewardRatesCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::RewardRates(decoded));
            }
            if let Ok(decoded) =
                <RewardTokenAddrToIdxCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::RewardTokenAddrToIdx(decoded));
            }
            if let Ok(decoded) =
                <RewardsDurationCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::RewardsDuration(decoded));
            }
            if let Ok(decoded) =
                <RewardsPerTokenCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::RewardsPerToken(decoded));
            }
            if let Ok(decoded) =
                <SetMiscVariablesCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::SetMiscVariables(decoded));
            }
            if let Ok(decoded) =
                <SetPausesCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::SetPauses(decoded));
            }
            if let Ok(decoded) =
                <SetRewardVarsCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::SetRewardVars(decoded));
            }
            if let Ok(decoded) =
                <StakerSetVeORNProxyCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::StakerSetVeORNProxy(decoded));
            }
            if let Ok(decoded) =
                <StakerDesignatedProxiesCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(OrionUnifiedFarmTemplateCalls::StakerDesignatedProxies(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <StakesUnlockedCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::StakesUnlocked(decoded));
            }
            if let Ok(decoded) = <SyncCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::Sync(decoded));
            }
            if let Ok(decoded) =
                <SyncGaugeWeightsCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::SyncGaugeWeights(decoded));
            }
            if let Ok(decoded) =
                <ToggleValidVeORNProxyCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::ToggleValidVeORNProxy(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TotalCombinedWeightCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::TotalCombinedWeight(decoded));
            }
            if let Ok(decoded) =
                <TotalLiquidityLockedCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::TotalLiquidityLocked(decoded));
            }
            if let Ok(decoded) =
                <UnlockStakesCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::UnlockStakes(decoded));
            }
            if let Ok(decoded) =
                <UpdateRewardAndBalanceCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(OrionUnifiedFarmTemplateCalls::UpdateRewardAndBalance(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <UserStakedOrionCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::UserStakedOrion(decoded));
            }
            if let Ok(decoded) =
                <VeORNMultiplierCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::VeORNMultiplier(decoded));
            }
            if let Ok(decoded) =
                <VeornBoostScaleFactorCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::VeornBoostScaleFactor(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <VeornMaxMultiplierCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionUnifiedFarmTemplateCalls::VeornMaxMultiplier(decoded));
            }
            if let Ok(decoded) =
                <VeornPerFraxForMaxBoostCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(OrionUnifiedFarmTemplateCalls::VeornPerFraxForMaxBoost(
                    decoded,
                ));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for OrionUnifiedFarmTemplateCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                OrionUnifiedFarmTemplateCalls::AcceptOwnership(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::CalcCurCombinedWeight(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::ChangeTokenManager(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::CombinedWeightOf(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::Earned(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::FraxPerLPStored(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::FraxPerLPToken(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::GetAllRewardTokens(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::GetProxyFor(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::GetReward(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::GetReward2(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::GetRewardExtraLogic(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::GetRewardForDuration(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::IsTokenManagerFor(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::LastRewardClaimTime(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::LastUpdateTime(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::LockMultiplier(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::LockMaxMultiplier(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::LockTimeForMaxMultiplier(element) => {
                    element.encode()
                }
                OrionUnifiedFarmTemplateCalls::LockTimeMin(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::LockedLiquidityOf(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::MaxLPForMaxBoost(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::MinVeORNForMaxBoost(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::MinVeORNForMaxBoostProxy(element) => {
                    element.encode()
                }
                OrionUnifiedFarmTemplateCalls::NominateNewOwner(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::NominatedOwner(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::Owner(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::PeriodFinish(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::ProxyStakedOrion(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::ProxyToggleStaker(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::ProxyLpBalances(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::RecoverERC20(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::RewardManagers(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::RewardRates(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::RewardTokenAddrToIdx(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::RewardsDuration(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::RewardsPerToken(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::SetMiscVariables(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::SetPauses(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::SetRewardVars(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::StakerSetVeORNProxy(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::StakerDesignatedProxies(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::StakesUnlocked(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::Sync(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::SyncGaugeWeights(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::ToggleValidVeORNProxy(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::TotalCombinedWeight(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::TotalLiquidityLocked(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::UnlockStakes(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::UpdateRewardAndBalance(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::UserStakedOrion(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::VeORNMultiplier(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::VeornBoostScaleFactor(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::VeornMaxMultiplier(element) => element.encode(),
                OrionUnifiedFarmTemplateCalls::VeornPerFraxForMaxBoost(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for OrionUnifiedFarmTemplateCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OrionUnifiedFarmTemplateCalls::AcceptOwnership(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::CalcCurCombinedWeight(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::ChangeTokenManager(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::CombinedWeightOf(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::Earned(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::FraxPerLPStored(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::FraxPerLPToken(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::GetAllRewardTokens(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::GetProxyFor(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::GetReward(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::GetReward2(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::GetRewardExtraLogic(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::GetRewardForDuration(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::IsTokenManagerFor(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::LastRewardClaimTime(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::LastUpdateTime(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::LockMultiplier(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::LockMaxMultiplier(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::LockTimeForMaxMultiplier(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::LockTimeMin(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::LockedLiquidityOf(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::MaxLPForMaxBoost(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::MinVeORNForMaxBoost(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::MinVeORNForMaxBoostProxy(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::NominateNewOwner(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::NominatedOwner(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::Owner(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::PeriodFinish(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::ProxyStakedOrion(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::ProxyToggleStaker(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::ProxyLpBalances(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::RecoverERC20(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::RewardManagers(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::RewardRates(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::RewardTokenAddrToIdx(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::RewardsDuration(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::RewardsPerToken(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::SetMiscVariables(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::SetPauses(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::SetRewardVars(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::StakerSetVeORNProxy(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::StakerDesignatedProxies(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::StakesUnlocked(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::Sync(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::SyncGaugeWeights(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::ToggleValidVeORNProxy(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::TotalCombinedWeight(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::TotalLiquidityLocked(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::UnlockStakes(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::UpdateRewardAndBalance(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::UserStakedOrion(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::VeORNMultiplier(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::VeornBoostScaleFactor(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::VeornMaxMultiplier(element) => element.fmt(f),
                OrionUnifiedFarmTemplateCalls::VeornPerFraxForMaxBoost(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AcceptOwnershipCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: AcceptOwnershipCall) -> Self {
            OrionUnifiedFarmTemplateCalls::AcceptOwnership(var)
        }
    }
    impl ::std::convert::From<CalcCurCombinedWeightCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: CalcCurCombinedWeightCall) -> Self {
            OrionUnifiedFarmTemplateCalls::CalcCurCombinedWeight(var)
        }
    }
    impl ::std::convert::From<ChangeTokenManagerCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: ChangeTokenManagerCall) -> Self {
            OrionUnifiedFarmTemplateCalls::ChangeTokenManager(var)
        }
    }
    impl ::std::convert::From<CombinedWeightOfCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: CombinedWeightOfCall) -> Self {
            OrionUnifiedFarmTemplateCalls::CombinedWeightOf(var)
        }
    }
    impl ::std::convert::From<EarnedCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: EarnedCall) -> Self {
            OrionUnifiedFarmTemplateCalls::Earned(var)
        }
    }
    impl ::std::convert::From<FraxPerLPStoredCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: FraxPerLPStoredCall) -> Self {
            OrionUnifiedFarmTemplateCalls::FraxPerLPStored(var)
        }
    }
    impl ::std::convert::From<FraxPerLPTokenCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: FraxPerLPTokenCall) -> Self {
            OrionUnifiedFarmTemplateCalls::FraxPerLPToken(var)
        }
    }
    impl ::std::convert::From<GetAllRewardTokensCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: GetAllRewardTokensCall) -> Self {
            OrionUnifiedFarmTemplateCalls::GetAllRewardTokens(var)
        }
    }
    impl ::std::convert::From<GetProxyForCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: GetProxyForCall) -> Self {
            OrionUnifiedFarmTemplateCalls::GetProxyFor(var)
        }
    }
    impl ::std::convert::From<GetRewardCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: GetRewardCall) -> Self {
            OrionUnifiedFarmTemplateCalls::GetReward(var)
        }
    }
    impl ::std::convert::From<GetReward2Call> for OrionUnifiedFarmTemplateCalls {
        fn from(var: GetReward2Call) -> Self {
            OrionUnifiedFarmTemplateCalls::GetReward2(var)
        }
    }
    impl ::std::convert::From<GetRewardExtraLogicCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: GetRewardExtraLogicCall) -> Self {
            OrionUnifiedFarmTemplateCalls::GetRewardExtraLogic(var)
        }
    }
    impl ::std::convert::From<GetRewardForDurationCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: GetRewardForDurationCall) -> Self {
            OrionUnifiedFarmTemplateCalls::GetRewardForDuration(var)
        }
    }
    impl ::std::convert::From<IsTokenManagerForCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: IsTokenManagerForCall) -> Self {
            OrionUnifiedFarmTemplateCalls::IsTokenManagerFor(var)
        }
    }
    impl ::std::convert::From<LastRewardClaimTimeCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: LastRewardClaimTimeCall) -> Self {
            OrionUnifiedFarmTemplateCalls::LastRewardClaimTime(var)
        }
    }
    impl ::std::convert::From<LastUpdateTimeCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: LastUpdateTimeCall) -> Self {
            OrionUnifiedFarmTemplateCalls::LastUpdateTime(var)
        }
    }
    impl ::std::convert::From<LockMultiplierCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: LockMultiplierCall) -> Self {
            OrionUnifiedFarmTemplateCalls::LockMultiplier(var)
        }
    }
    impl ::std::convert::From<LockMaxMultiplierCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: LockMaxMultiplierCall) -> Self {
            OrionUnifiedFarmTemplateCalls::LockMaxMultiplier(var)
        }
    }
    impl ::std::convert::From<LockTimeForMaxMultiplierCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: LockTimeForMaxMultiplierCall) -> Self {
            OrionUnifiedFarmTemplateCalls::LockTimeForMaxMultiplier(var)
        }
    }
    impl ::std::convert::From<LockTimeMinCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: LockTimeMinCall) -> Self {
            OrionUnifiedFarmTemplateCalls::LockTimeMin(var)
        }
    }
    impl ::std::convert::From<LockedLiquidityOfCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: LockedLiquidityOfCall) -> Self {
            OrionUnifiedFarmTemplateCalls::LockedLiquidityOf(var)
        }
    }
    impl ::std::convert::From<MaxLPForMaxBoostCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: MaxLPForMaxBoostCall) -> Self {
            OrionUnifiedFarmTemplateCalls::MaxLPForMaxBoost(var)
        }
    }
    impl ::std::convert::From<MinVeORNForMaxBoostCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: MinVeORNForMaxBoostCall) -> Self {
            OrionUnifiedFarmTemplateCalls::MinVeORNForMaxBoost(var)
        }
    }
    impl ::std::convert::From<MinVeORNForMaxBoostProxyCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: MinVeORNForMaxBoostProxyCall) -> Self {
            OrionUnifiedFarmTemplateCalls::MinVeORNForMaxBoostProxy(var)
        }
    }
    impl ::std::convert::From<NominateNewOwnerCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: NominateNewOwnerCall) -> Self {
            OrionUnifiedFarmTemplateCalls::NominateNewOwner(var)
        }
    }
    impl ::std::convert::From<NominatedOwnerCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: NominatedOwnerCall) -> Self {
            OrionUnifiedFarmTemplateCalls::NominatedOwner(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: OwnerCall) -> Self {
            OrionUnifiedFarmTemplateCalls::Owner(var)
        }
    }
    impl ::std::convert::From<PeriodFinishCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: PeriodFinishCall) -> Self {
            OrionUnifiedFarmTemplateCalls::PeriodFinish(var)
        }
    }
    impl ::std::convert::From<ProxyStakedOrionCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: ProxyStakedOrionCall) -> Self {
            OrionUnifiedFarmTemplateCalls::ProxyStakedOrion(var)
        }
    }
    impl ::std::convert::From<ProxyToggleStakerCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: ProxyToggleStakerCall) -> Self {
            OrionUnifiedFarmTemplateCalls::ProxyToggleStaker(var)
        }
    }
    impl ::std::convert::From<ProxyLpBalancesCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: ProxyLpBalancesCall) -> Self {
            OrionUnifiedFarmTemplateCalls::ProxyLpBalances(var)
        }
    }
    impl ::std::convert::From<RecoverERC20Call> for OrionUnifiedFarmTemplateCalls {
        fn from(var: RecoverERC20Call) -> Self {
            OrionUnifiedFarmTemplateCalls::RecoverERC20(var)
        }
    }
    impl ::std::convert::From<RewardManagersCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: RewardManagersCall) -> Self {
            OrionUnifiedFarmTemplateCalls::RewardManagers(var)
        }
    }
    impl ::std::convert::From<RewardRatesCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: RewardRatesCall) -> Self {
            OrionUnifiedFarmTemplateCalls::RewardRates(var)
        }
    }
    impl ::std::convert::From<RewardTokenAddrToIdxCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: RewardTokenAddrToIdxCall) -> Self {
            OrionUnifiedFarmTemplateCalls::RewardTokenAddrToIdx(var)
        }
    }
    impl ::std::convert::From<RewardsDurationCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: RewardsDurationCall) -> Self {
            OrionUnifiedFarmTemplateCalls::RewardsDuration(var)
        }
    }
    impl ::std::convert::From<RewardsPerTokenCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: RewardsPerTokenCall) -> Self {
            OrionUnifiedFarmTemplateCalls::RewardsPerToken(var)
        }
    }
    impl ::std::convert::From<SetMiscVariablesCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: SetMiscVariablesCall) -> Self {
            OrionUnifiedFarmTemplateCalls::SetMiscVariables(var)
        }
    }
    impl ::std::convert::From<SetPausesCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: SetPausesCall) -> Self {
            OrionUnifiedFarmTemplateCalls::SetPauses(var)
        }
    }
    impl ::std::convert::From<SetRewardVarsCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: SetRewardVarsCall) -> Self {
            OrionUnifiedFarmTemplateCalls::SetRewardVars(var)
        }
    }
    impl ::std::convert::From<StakerSetVeORNProxyCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: StakerSetVeORNProxyCall) -> Self {
            OrionUnifiedFarmTemplateCalls::StakerSetVeORNProxy(var)
        }
    }
    impl ::std::convert::From<StakerDesignatedProxiesCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: StakerDesignatedProxiesCall) -> Self {
            OrionUnifiedFarmTemplateCalls::StakerDesignatedProxies(var)
        }
    }
    impl ::std::convert::From<StakesUnlockedCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: StakesUnlockedCall) -> Self {
            OrionUnifiedFarmTemplateCalls::StakesUnlocked(var)
        }
    }
    impl ::std::convert::From<SyncCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: SyncCall) -> Self {
            OrionUnifiedFarmTemplateCalls::Sync(var)
        }
    }
    impl ::std::convert::From<SyncGaugeWeightsCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: SyncGaugeWeightsCall) -> Self {
            OrionUnifiedFarmTemplateCalls::SyncGaugeWeights(var)
        }
    }
    impl ::std::convert::From<ToggleValidVeORNProxyCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: ToggleValidVeORNProxyCall) -> Self {
            OrionUnifiedFarmTemplateCalls::ToggleValidVeORNProxy(var)
        }
    }
    impl ::std::convert::From<TotalCombinedWeightCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: TotalCombinedWeightCall) -> Self {
            OrionUnifiedFarmTemplateCalls::TotalCombinedWeight(var)
        }
    }
    impl ::std::convert::From<TotalLiquidityLockedCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: TotalLiquidityLockedCall) -> Self {
            OrionUnifiedFarmTemplateCalls::TotalLiquidityLocked(var)
        }
    }
    impl ::std::convert::From<UnlockStakesCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: UnlockStakesCall) -> Self {
            OrionUnifiedFarmTemplateCalls::UnlockStakes(var)
        }
    }
    impl ::std::convert::From<UpdateRewardAndBalanceCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: UpdateRewardAndBalanceCall) -> Self {
            OrionUnifiedFarmTemplateCalls::UpdateRewardAndBalance(var)
        }
    }
    impl ::std::convert::From<UserStakedOrionCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: UserStakedOrionCall) -> Self {
            OrionUnifiedFarmTemplateCalls::UserStakedOrion(var)
        }
    }
    impl ::std::convert::From<VeORNMultiplierCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: VeORNMultiplierCall) -> Self {
            OrionUnifiedFarmTemplateCalls::VeORNMultiplier(var)
        }
    }
    impl ::std::convert::From<VeornBoostScaleFactorCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: VeornBoostScaleFactorCall) -> Self {
            OrionUnifiedFarmTemplateCalls::VeornBoostScaleFactor(var)
        }
    }
    impl ::std::convert::From<VeornMaxMultiplierCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: VeornMaxMultiplierCall) -> Self {
            OrionUnifiedFarmTemplateCalls::VeornMaxMultiplier(var)
        }
    }
    impl ::std::convert::From<VeornPerFraxForMaxBoostCall> for OrionUnifiedFarmTemplateCalls {
        fn from(var: VeornPerFraxForMaxBoostCall) -> Self {
            OrionUnifiedFarmTemplateCalls::VeornPerFraxForMaxBoost(var)
        }
    }
    ///Container type for all return fields from the `calcCurCombinedWeight` function with signature `calcCurCombinedWeight(address)` and selector `0x8bad86a7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct CalcCurCombinedWeightReturn {
        pub old_combined_weight: ::ethers::core::types::U256,
        pub new_veorn_multiplier: ::ethers::core::types::U256,
        pub new_combined_weight: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `combinedWeightOf` function with signature `combinedWeightOf(address)` and selector `0x36f89af2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct CombinedWeightOfReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `earned` function with signature `earned(address)` and selector `0x008cc262`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct EarnedReturn {
        pub new_earned: ::std::vec::Vec<::ethers::core::types::U256>,
    }
    ///Container type for all return fields from the `fraxPerLPStored` function with signature `fraxPerLPStored()` and selector `0xd2010fb4`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct FraxPerLPStoredReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `fraxPerLPToken` function with signature `fraxPerLPToken()` and selector `0x5bfd9258`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct FraxPerLPTokenReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getAllRewardTokens` function with signature `getAllRewardTokens()` and selector `0x12edb24c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GetAllRewardTokensReturn(pub ::std::vec::Vec<::ethers::core::types::Address>);
    ///Container type for all return fields from the `getProxyFor` function with signature `getProxyFor(address)` and selector `0xc3543826`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GetProxyForReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `getReward` function with signature `getReward(address)` and selector `0xc00007b0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GetRewardReturn(pub ::std::vec::Vec<::ethers::core::types::U256>);
    ///Container type for all return fields from the `getReward2` function with signature `getReward2(address,bool)` and selector `0x7910d17b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GetReward2Return(pub ::std::vec::Vec<::ethers::core::types::U256>);
    ///Container type for all return fields from the `getRewardForDuration` function with signature `getRewardForDuration()` and selector `0x1c1f78eb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GetRewardForDurationReturn {
        pub rewards_per_duration_arr: ::std::vec::Vec<::ethers::core::types::U256>,
    }
    ///Container type for all return fields from the `isTokenManagerFor` function with signature `isTokenManagerFor(address,address)` and selector `0x231b68dc`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct IsTokenManagerForReturn(pub bool);
    ///Container type for all return fields from the `lastRewardClaimTime` function with signature `lastRewardClaimTime(address)` and selector `0x6c430dbb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LastRewardClaimTimeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lastUpdateTime` function with signature `lastUpdateTime()` and selector `0xc8f33c91`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LastUpdateTimeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lockMultiplier` function with signature `lockMultiplier(uint256)` and selector `0x0d7bac4f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LockMultiplierReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lock_max_multiplier` function with signature `lock_max_multiplier()` and selector `0xcdc82e80`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LockMaxMultiplierReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lock_time_for_max_multiplier` function with signature `lock_time_for_max_multiplier()` and selector `0xb94c4dcb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LockTimeForMaxMultiplierReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lock_time_min` function with signature `lock_time_min()` and selector `0x6e27cef9`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LockTimeMinReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `lockedLiquidityOf` function with signature `lockedLiquidityOf(address)` and selector `0xd9f96e8d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LockedLiquidityOfReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `maxLPForMaxBoost` function with signature `maxLPForMaxBoost(address)` and selector `0xa0f23476`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct MaxLPForMaxBoostReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `minVeORNForMaxBoost` function with signature `minVeORNForMaxBoost(address)` and selector `0xfd041918`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct MinVeORNForMaxBoostReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `minVeORNForMaxBoostProxy` function with signature `minVeORNForMaxBoostProxy(address)` and selector `0x77e024b2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct MinVeORNForMaxBoostProxyReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `nominatedOwner` function with signature `nominatedOwner()` and selector `0x53a47bb7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct NominatedOwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `periodFinish` function with signature `periodFinish()` and selector `0xebe2b12b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct PeriodFinishReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `proxyStakedOrion` function with signature `proxyStakedOrion(address)` and selector `0x57b98c87`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct ProxyStakedOrionReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `proxy_lp_balances` function with signature `proxy_lp_balances(address)` and selector `0x7d6ef08e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct ProxyLpBalancesReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `rewardManagers` function with signature `rewardManagers(address)` and selector `0x41a16f3f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardManagersReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `rewardRates` function with signature `rewardRates(uint256)` and selector `0xf2caeb1e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardRatesReturn {
        pub rwd_rate: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `rewardTokenAddrToIdx` function with signature `rewardTokenAddrToIdx(address)` and selector `0x69339245`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardTokenAddrToIdxReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `rewardsDuration` function with signature `rewardsDuration()` and selector `0x386a9525`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardsDurationReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `rewardsPerToken` function with signature `rewardsPerToken()` and selector `0x70641a36`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardsPerTokenReturn {
        pub new_rewards_per_token_stored: ::std::vec::Vec<::ethers::core::types::U256>,
    }
    ///Container type for all return fields from the `staker_designated_proxies` function with signature `staker_designated_proxies(address)` and selector `0x28408bab`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct StakerDesignatedProxiesReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `stakesUnlocked` function with signature `stakesUnlocked()` and selector `0x9637927f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct StakesUnlockedReturn(pub bool);
    ///Container type for all return fields from the `totalCombinedWeight` function with signature `totalCombinedWeight()` and selector `0x64f2c060`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct TotalCombinedWeightReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `totalLiquidityLocked` function with signature `totalLiquidityLocked()` and selector `0xe01f62bf`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct TotalLiquidityLockedReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `userStakedOrion` function with signature `userStakedOrion(address)` and selector `0xd4b2120f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct UserStakedOrionReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `veORNMultiplier` function with signature `veORNMultiplier(address)` and selector `0xe406b547`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct VeORNMultiplierReturn {
        pub veorn_multiplier: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `veorn_boost_scale_factor` function with signature `veorn_boost_scale_factor()` and selector `0xae8e1270`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct VeornBoostScaleFactorReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `veorn_max_multiplier` function with signature `veorn_max_multiplier()` and selector `0xfdd24cdc`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct VeornMaxMultiplierReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `veorn_per_frax_for_max_boost` function with signature `veorn_per_frax_for_max_boost()` and selector `0x0db369d6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct VeornPerFraxForMaxBoostReturn(pub ::ethers::core::types::U256);
}
