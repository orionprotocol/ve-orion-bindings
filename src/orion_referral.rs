pub use orion_referral::*;
#[allow(
    clippy::too_many_arguments,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
pub mod orion_referral {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!OrionReferral was auto-generated with ethers-rs Abigen. More information at: <https://github.com/gakonst/ethers-rs>
    use ::ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ::ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ::ethers::providers::Middleware;
    use std::sync::Arc;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountAccrued\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FeeAccrued\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Initialized\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"VerifierUpdate\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"struct OrionReferral.FeeOrder\",\"name\":\"order\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getFee\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"verifier_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setVerifier\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalFeeAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static ORIONREFERRAL_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        14,
        182,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        147,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        113,
        80,
        24,
        166,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        30,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        38,
        87,
        128,
        99,
        209,
        127,
        255,
        64,
        20,
        97,
        1,
        55,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        1,
        74,
        87,
        128,
        99,
        247,
        198,
        24,
        193,
        20,
        97,
        1,
        93,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        43,
        122,
        195,
        243,
        20,
        97,
        0,
        152,
        87,
        128,
        99,
        72,
        92,
        201,
        85,
        20,
        97,
        0,
        200,
        87,
        128,
        99,
        83,
        207,
        114,
        248,
        20,
        97,
        0,
        221,
        87,
        128,
        99,
        84,
        55,
        152,
        141,
        20,
        97,
        1,
        11,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        103,
        84,
        97,
        0,
        171,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        219,
        97,
        0,
        214,
        54,
        96,
        4,
        97,
        12,
        171,
        86,
        91,
        97,
        1,
        112,
        86,
        91,
        0,
        91,
        97,
        0,
        253,
        97,
        0,
        235,
        54,
        96,
        4,
        97,
        12,
        228,
        86,
        91,
        96,
        102,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        191,
        86,
        91,
        97,
        0,
        219,
        97,
        1,
        25,
        54,
        96,
        4,
        97,
        12,
        228,
        86,
        91,
        97,
        2,
        185,
        86,
        91,
        97,
        0,
        219,
        97,
        3,
        21,
        86,
        91,
        96,
        51,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        0,
        171,
        86,
        91,
        97,
        0,
        219,
        97,
        1,
        69,
        54,
        96,
        4,
        97,
        13,
        8,
        86,
        91,
        97,
        3,
        41,
        86,
        91,
        97,
        0,
        219,
        97,
        1,
        88,
        54,
        96,
        4,
        97,
        12,
        228,
        86,
        91,
        97,
        4,
        101,
        86,
        91,
        96,
        101,
        84,
        97,
        0,
        171,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        0,
        84,
        97,
        1,
        0,
        144,
        4,
        96,
        255,
        22,
        21,
        128,
        128,
        21,
        97,
        1,
        144,
        87,
        80,
        96,
        0,
        84,
        96,
        1,
        96,
        255,
        144,
        145,
        22,
        16,
        91,
        128,
        97,
        1,
        170,
        87,
        80,
        48,
        59,
        21,
        128,
        21,
        97,
        1,
        170,
        87,
        80,
        96,
        0,
        84,
        96,
        255,
        22,
        96,
        1,
        20,
        91,
        97,
        2,
        18,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        46,
        96,
        36,
        130,
        1,
        82,
        127,
        73,
        110,
        105,
        116,
        105,
        97,
        108,
        105,
        122,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        105,
        115,
        32,
        97,
        108,
        114,
        101,
        97,
        96,
        68,
        130,
        1,
        82,
        109,
        25,
        30,
        72,
        26,
        91,
        154,
        93,
        26,
        88,
        91,
        26,
        94,
        153,
        89,
        96,
        146,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        128,
        21,
        97,
        2,
        53,
        87,
        96,
        0,
        128,
        84,
        97,
        255,
        0,
        25,
        22,
        97,
        1,
        0,
        23,
        144,
        85,
        91,
        97,
        2,
        61,
        97,
        4,
        222,
        86,
        91,
        96,
        101,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        134,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        146,
        131,
        22,
        23,
        144,
        146,
        85,
        96,
        103,
        128,
        84,
        146,
        133,
        22,
        146,
        144,
        145,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        128,
        21,
        97,
        2,
        180,
        87,
        96,
        0,
        128,
        84,
        97,
        255,
        0,
        25,
        22,
        144,
        85,
        96,
        64,
        81,
        96,
        1,
        129,
        82,
        127,
        127,
        38,
        184,
        63,
        249,
        110,
        31,
        43,
        106,
        104,
        47,
        19,
        56,
        82,
        246,
        121,
        138,
        9,
        196,
        101,
        218,
        149,
        146,
        20,
        96,
        206,
        251,
        56,
        71,
        64,
        36,
        152,
        144,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        91,
        80,
        80,
        80,
        86,
        91,
        97,
        2,
        193,
        97,
        5,
        13,
        86,
        91,
        96,
        103,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        102,
        51,
        200,
        93,
        249,
        144,
        138,
        118,
        129,
        212,
        178,
        173,
        247,
        93,
        180,
        180,
        204,
        161,
        42,
        49,
        86,
        233,
        109,
        53,
        44,
        216,
        46,
        157,
        187,
        148,
        159,
        93,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        97,
        3,
        29,
        97,
        5,
        13,
        86,
        91,
        97,
        3,
        39,
        96,
        0,
        97,
        5,
        103,
        86,
        91,
        86,
        91,
        97,
        3,
        50,
        129,
        97,
        5,
        185,
        86,
        91,
        80,
        96,
        0,
        96,
        102,
        129,
        97,
        3,
        69,
        96,
        32,
        133,
        1,
        133,
        97,
        12,
        228,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        84,
        144,
        80,
        129,
        96,
        32,
        1,
        53,
        129,
        16,
        97,
        3,
        187,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        30,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        114,
        105,
        111,
        110,
        82,
        101,
        102,
        101,
        114,
        114,
        97,
        108,
        58,
        32,
        97,
        108,
        114,
        101,
        97,
        100,
        121,
        32,
        97,
        99,
        99,
        114,
        117,
        101,
        100,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        9,
        86,
        91,
        96,
        32,
        130,
        1,
        128,
        53,
        144,
        96,
        102,
        144,
        96,
        0,
        144,
        97,
        3,
        210,
        144,
        134,
        97,
        12,
        228,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        128,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        64,
        1,
        96,
        0,
        32,
        145,
        144,
        145,
        85,
        130,
        1,
        128,
        53,
        130,
        144,
        3,
        144,
        97,
        4,
        25,
        144,
        97,
        4,
        6,
        144,
        133,
        97,
        12,
        228,
        86,
        91,
        96,
        101,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        131,
        97,
        6,
        232,
        86,
        91,
        127,
        92,
        12,
        225,
        177,
        145,
        103,
        97,
        37,
        15,
        171,
        120,
        163,
        236,
        110,
        57,
        139,
        186,
        171,
        209,
        83,
        112,
        3,
        152,
        56,
        137,
        116,
        140,
        12,
        30,
        86,
        68,
        227,
        97,
        4,
        71,
        96,
        32,
        133,
        1,
        133,
        97,
        12,
        228,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        130,
        82,
        96,
        32,
        130,
        1,
        132,
        144,
        82,
        1,
        97,
        2,
        171,
        86,
        91,
        97,
        4,
        109,
        97,
        5,
        13,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        4,
        210,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        96,
        68,
        130,
        1,
        82,
        101,
        100,
        100,
        114,
        101,
        115,
        115,
        96,
        208,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        9,
        86,
        91,
        97,
        4,
        219,
        129,
        97,
        5,
        103,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        84,
        97,
        1,
        0,
        144,
        4,
        96,
        255,
        22,
        97,
        5,
        5,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        2,
        9,
        144,
        97,
        13,
        67,
        86,
        91,
        97,
        3,
        39,
        97,
        7,
        58,
        86,
        91,
        96,
        51,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        3,
        39,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        9,
        86,
        91,
        96,
        51,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        144,
        147,
        85,
        96,
        64,
        81,
        145,
        22,
        145,
        144,
        130,
        144,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        144,
        96,
        0,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        5,
        200,
        96,
        32,
        131,
        1,
        131,
        97,
        12,
        228,
        86,
        91,
        130,
        96,
        32,
        1,
        53,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        6,
        12,
        146,
        145,
        144,
        103,
        35,
        50,
        178,
        167,
        185,
        50,
        50,
        185,
        96,
        193,
        27,
        129,
        82,
        96,
        96,
        146,
        144,
        146,
        27,
        107,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        25,
        22,
        96,
        8,
        131,
        1,
        82,
        96,
        28,
        130,
        1,
        82,
        96,
        60,
        1,
        144,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        31,
        25,
        129,
        132,
        3,
        1,
        129,
        82,
        145,
        129,
        82,
        129,
        81,
        96,
        32,
        144,
        146,
        1,
        145,
        144,
        145,
        32,
        96,
        103,
        84,
        144,
        146,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        97,
        6,
        141,
        144,
        97,
        6,
        71,
        144,
        133,
        1,
        133,
        97,
        13,
        142,
        86,
        91,
        128,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        147,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        131,
        131,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        97,
        6,
        135,
        146,
        80,
        134,
        145,
        80,
        97,
        7,
        106,
        144,
        80,
        86,
        91,
        144,
        97,
        7,
        189,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        6,
        227,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        114,
        105,
        111,
        110,
        82,
        101,
        102,
        101,
        114,
        114,
        97,
        108,
        58,
        32,
        105,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        115,
        105,
        103,
        110,
        97,
        116,
        117,
        114,
        101,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        9,
        86,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        128,
        130,
        1,
        132,
        144,
        82,
        130,
        81,
        128,
        131,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        100,
        144,
        145,
        1,
        144,
        145,
        82,
        96,
        32,
        129,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        23,
        144,
        82,
        97,
        2,
        180,
        144,
        132,
        144,
        97,
        7,
        225,
        86,
        91,
        96,
        0,
        84,
        97,
        1,
        0,
        144,
        4,
        96,
        255,
        22,
        97,
        7,
        97,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        2,
        9,
        144,
        97,
        13,
        67,
        86,
        91,
        97,
        3,
        39,
        51,
        97,
        5,
        103,
        86,
        91,
        96,
        64,
        81,
        127,
        25,
        69,
        116,
        104,
        101,
        114,
        101,
        117,
        109,
        32,
        83,
        105,
        103,
        110,
        101,
        100,
        32,
        77,
        101,
        115,
        115,
        97,
        103,
        101,
        58,
        10,
        51,
        50,
        0,
        0,
        0,
        0,
        96,
        32,
        130,
        1,
        82,
        96,
        60,
        129,
        1,
        130,
        144,
        82,
        96,
        0,
        144,
        96,
        92,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        97,
        7,
        204,
        133,
        133,
        97,
        8,
        179,
        86,
        91,
        145,
        80,
        145,
        80,
        97,
        7,
        217,
        129,
        97,
        8,
        248,
        86,
        91,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        8,
        54,
        130,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        32,
        129,
        82,
        96,
        32,
        1,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        129,
        82,
        80,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        10,
        66,
        144,
        146,
        145,
        144,
        99,
        255,
        255,
        255,
        255,
        22,
        86,
        91,
        128,
        81,
        144,
        145,
        80,
        21,
        97,
        2,
        180,
        87,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        8,
        84,
        145,
        144,
        97,
        13,
        213,
        86,
        91,
        97,
        2,
        180,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        42,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        69,
        82,
        67,
        50,
        48,
        32,
        111,
        112,
        101,
        114,
        97,
        116,
        105,
        111,
        110,
        32,
        100,
        105,
        100,
        32,
        110,
        96,
        68,
        130,
        1,
        82,
        105,
        27,
        221,
        8,
        28,
        221,
        88,
        216,
        217,
        89,
        89,
        96,
        178,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        9,
        86,
        91,
        96,
        0,
        128,
        130,
        81,
        96,
        65,
        3,
        97,
        8,
        233,
        87,
        96,
        32,
        131,
        1,
        81,
        96,
        64,
        132,
        1,
        81,
        96,
        96,
        133,
        1,
        81,
        96,
        0,
        26,
        97,
        8,
        221,
        135,
        130,
        133,
        133,
        97,
        10,
        89,
        86,
        91,
        148,
        80,
        148,
        80,
        80,
        80,
        80,
        97,
        8,
        241,
        86,
        91,
        80,
        96,
        0,
        144,
        80,
        96,
        2,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        9,
        12,
        87,
        97,
        9,
        12,
        97,
        13,
        247,
        86,
        91,
        3,
        97,
        9,
        20,
        87,
        80,
        86,
        91,
        96,
        1,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        9,
        40,
        87,
        97,
        9,
        40,
        97,
        13,
        247,
        86,
        91,
        3,
        97,
        9,
        117,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        24,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        67,
        68,
        83,
        65,
        58,
        32,
        105,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        115,
        105,
        103,
        110,
        97,
        116,
        117,
        114,
        101,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        9,
        86,
        91,
        96,
        2,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        9,
        137,
        87,
        97,
        9,
        137,
        97,
        13,
        247,
        86,
        91,
        3,
        97,
        9,
        214,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        67,
        68,
        83,
        65,
        58,
        32,
        105,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        115,
        105,
        103,
        110,
        97,
        116,
        117,
        114,
        101,
        32,
        108,
        101,
        110,
        103,
        116,
        104,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        9,
        86,
        91,
        96,
        3,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        9,
        234,
        87,
        97,
        9,
        234,
        97,
        13,
        247,
        86,
        91,
        3,
        97,
        4,
        219,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        67,
        68,
        83,
        65,
        58,
        32,
        105,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        115,
        105,
        103,
        110,
        97,
        116,
        117,
        114,
        101,
        32,
        39,
        115,
        39,
        32,
        118,
        97,
        108,
        96,
        68,
        130,
        1,
        82,
        97,
        117,
        101,
        96,
        240,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        9,
        86,
        91,
        96,
        96,
        97,
        10,
        81,
        132,
        132,
        96,
        0,
        133,
        97,
        11,
        29,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        127,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        93,
        87,
        110,
        115,
        87,
        164,
        80,
        29,
        223,
        233,
        47,
        70,
        104,
        27,
        32,
        160,
        131,
        17,
        21,
        97,
        10,
        144,
        87,
        80,
        96,
        0,
        144,
        80,
        96,
        3,
        97,
        11,
        20,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        0,
        128,
        130,
        82,
        96,
        32,
        130,
        1,
        128,
        132,
        82,
        137,
        144,
        82,
        96,
        255,
        136,
        22,
        146,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        96,
        129,
        1,
        134,
        144,
        82,
        96,
        128,
        129,
        1,
        133,
        144,
        82,
        96,
        1,
        144,
        96,
        160,
        1,
        96,
        32,
        96,
        64,
        81,
        96,
        32,
        129,
        3,
        144,
        128,
        132,
        3,
        144,
        133,
        90,
        250,
        21,
        128,
        21,
        97,
        10,
        228,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        96,
        64,
        81,
        96,
        31,
        25,
        1,
        81,
        145,
        80,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        11,
        13,
        87,
        96,
        0,
        96,
        1,
        146,
        80,
        146,
        80,
        80,
        97,
        11,
        20,
        86,
        91,
        145,
        80,
        96,
        0,
        144,
        80,
        91,
        148,
        80,
        148,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        130,
        71,
        16,
        21,
        97,
        11,
        126,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        32,
        102,
        111,
        96,
        68,
        130,
        1,
        82,
        101,
        28,
        136,
        24,
        216,
        91,
        27,
        96,
        210,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        9,
        86,
        91,
        96,
        0,
        128,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        135,
        96,
        64,
        81,
        97,
        11,
        154,
        145,
        144,
        97,
        14,
        49,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        11,
        215,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        11,
        220,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        97,
        11,
        237,
        135,
        131,
        131,
        135,
        97,
        11,
        248,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        131,
        21,
        97,
        12,
        103,
        87,
        130,
        81,
        96,
        0,
        3,
        97,
        12,
        96,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        97,
        12,
        96,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        9,
        86,
        91,
        80,
        129,
        97,
        10,
        81,
        86,
        91,
        97,
        10,
        81,
        131,
        131,
        129,
        81,
        21,
        97,
        12,
        124,
        87,
        129,
        81,
        128,
        131,
        96,
        32,
        1,
        253,
        91,
        128,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        2,
        9,
        145,
        144,
        97,
        14,
        77,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        4,
        219,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        12,
        190,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        12,
        201,
        129,
        97,
        12,
        150,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        12,
        217,
        129,
        97,
        12,
        150,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        12,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        13,
        1,
        129,
        97,
        12,
        150,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        26,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        13,
        49,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        1,
        96,
        96,
        129,
        133,
        3,
        18,
        21,
        97,
        13,
        1,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        128,
        130,
        82,
        96,
        43,
        144,
        130,
        1,
        82,
        127,
        73,
        110,
        105,
        116,
        105,
        97,
        108,
        105,
        122,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        105,
        96,
        64,
        130,
        1,
        82,
        106,
        110,
        105,
        116,
        105,
        97,
        108,
        105,
        122,
        105,
        110,
        103,
        96,
        168,
        27,
        96,
        96,
        130,
        1,
        82,
        96,
        128,
        1,
        144,
        86,
        91,
        96,
        0,
        128,
        131,
        53,
        96,
        30,
        25,
        132,
        54,
        3,
        1,
        129,
        18,
        97,
        13,
        165,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        128,
        53,
        145,
        80,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        13,
        192,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        1,
        145,
        80,
        54,
        129,
        144,
        3,
        130,
        19,
        21,
        97,
        8,
        241,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        231,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        13,
        1,
        87,
        96,
        0,
        128,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        14,
        40,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        14,
        16,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        14,
        67,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        14,
        13,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        130,
        81,
        128,
        96,
        32,
        132,
        1,
        82,
        97,
        14,
        108,
        129,
        96,
        64,
        133,
        1,
        96,
        32,
        135,
        1,
        97,
        14,
        13,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        145,
        144,
        145,
        1,
        96,
        64,
        1,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        211,
        235,
        240,
        16,
        254,
        64,
        141,
        38,
        248,
        39,
        74,
        167,
        108,
        145,
        101,
        61,
        21,
        47,
        119,
        127,
        10,
        221,
        20,
        36,
        181,
        251,
        179,
        20,
        183,
        162,
        94,
        230,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    lazy_static::lazy_static! {
            pub static ref ORIONREFERRAL_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from(
            __BYTECODE.to_vec(),
        );
    }
    pub struct OrionReferral<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for OrionReferral<M> {
        fn clone(&self) -> Self {
            OrionReferral(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for OrionReferral<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for OrionReferral<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(OrionReferral))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> OrionReferral<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                ORIONREFERRAL_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                ORIONREFERRAL_ABI.clone(),
                ORIONREFERRAL_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `getFee` (0xd17fff40) function
        pub fn get_fee(
            &self,
            order: FeeOrder,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([209, 127, 255, 64], (order,))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `initialize` (0x485cc955) function
        pub fn initialize(
            &self,
            reward_token: ::ethers::core::types::Address,
            verifier: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([72, 92, 201, 85], (reward_token, verifier))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rewardToken` (0xf7c618c1) function
        pub fn reward_token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([247, 198, 24, 193], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setVerifier` (0x5437988d) function
        pub fn set_verifier(
            &self,
            verifier: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([84, 55, 152, 141], verifier)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalFeeAccrued` (0x53cf72f8) function
        pub fn total_fee_accrued(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([83, 207, 114, 248], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `verifier` (0x2b7ac3f3) function
        pub fn verifier(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([43, 122, 195, 243], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `FeeAccrued` event
        pub fn fee_accrued_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, FeeAccruedFilter> {
            self.0.event()
        }
        ///Gets the contract's `Initialized` event
        pub fn initialized_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, InitializedFilter> {
            self.0.event()
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        ///Gets the contract's `VerifierUpdate` event
        pub fn verifier_update_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, VerifierUpdateFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(&self) -> ::ethers::contract::builders::Event<M, OrionReferralEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for OrionReferral<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "FeeAccrued", abi = "FeeAccrued(address,uint256)")]
    pub struct FeeAccruedFilter {
        pub referrer: ::ethers::core::types::Address,
        pub amount_accrued: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "Initialized", abi = "Initialized(uint8)")]
    pub struct InitializedFilter {
        pub version: u8,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "VerifierUpdate", abi = "VerifierUpdate(address)")]
    pub struct VerifierUpdateFilter {
        pub verifier: ::ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum OrionReferralEvents {
        FeeAccruedFilter(FeeAccruedFilter),
        InitializedFilter(InitializedFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        VerifierUpdateFilter(VerifierUpdateFilter),
    }
    impl ::ethers::contract::EthLogDecode for OrionReferralEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = FeeAccruedFilter::decode_log(log) {
                return Ok(OrionReferralEvents::FeeAccruedFilter(decoded));
            }
            if let Ok(decoded) = InitializedFilter::decode_log(log) {
                return Ok(OrionReferralEvents::InitializedFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(OrionReferralEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = VerifierUpdateFilter::decode_log(log) {
                return Ok(OrionReferralEvents::VerifierUpdateFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for OrionReferralEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OrionReferralEvents::FeeAccruedFilter(element) => element.fmt(f),
                OrionReferralEvents::InitializedFilter(element) => element.fmt(f),
                OrionReferralEvents::OwnershipTransferredFilter(element) => element.fmt(f),
                OrionReferralEvents::VerifierUpdateFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `getFee` function with signature `getFee((address,uint256,bytes))` and selector `0xd17fff40`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "getFee", abi = "getFee((address,uint256,bytes))")]
    pub struct GetFeeCall {
        pub order: FeeOrder,
    }
    ///Container type for all input parameters for the `initialize` function with signature `initialize(address,address)` and selector `0x485cc955`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "initialize", abi = "initialize(address,address)")]
    pub struct InitializeCall {
        pub reward_token: ::ethers::core::types::Address,
        pub verifier: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `rewardToken` function with signature `rewardToken()` and selector `0xf7c618c1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "rewardToken", abi = "rewardToken()")]
    pub struct RewardTokenCall;
    ///Container type for all input parameters for the `setVerifier` function with signature `setVerifier(address)` and selector `0x5437988d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setVerifier", abi = "setVerifier(address)")]
    pub struct SetVerifierCall {
        pub verifier: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `totalFeeAccrued` function with signature `totalFeeAccrued(address)` and selector `0x53cf72f8`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "totalFeeAccrued", abi = "totalFeeAccrued(address)")]
    pub struct TotalFeeAccruedCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `verifier` function with signature `verifier()` and selector `0x2b7ac3f3`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "verifier", abi = "verifier()")]
    pub struct VerifierCall;
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum OrionReferralCalls {
        GetFee(GetFeeCall),
        Initialize(InitializeCall),
        Owner(OwnerCall),
        RenounceOwnership(RenounceOwnershipCall),
        RewardToken(RewardTokenCall),
        SetVerifier(SetVerifierCall),
        TotalFeeAccrued(TotalFeeAccruedCall),
        TransferOwnership(TransferOwnershipCall),
        Verifier(VerifierCall),
    }
    impl ::ethers::core::abi::AbiDecode for OrionReferralCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <GetFeeCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionReferralCalls::GetFee(decoded));
            }
            if let Ok(decoded) =
                <InitializeCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionReferralCalls::Initialize(decoded));
            }
            if let Ok(decoded) =
                <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionReferralCalls::Owner(decoded));
            }
            if let Ok(decoded) =
                <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionReferralCalls::RenounceOwnership(decoded));
            }
            if let Ok(decoded) =
                <RewardTokenCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionReferralCalls::RewardToken(decoded));
            }
            if let Ok(decoded) =
                <SetVerifierCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionReferralCalls::SetVerifier(decoded));
            }
            if let Ok(decoded) =
                <TotalFeeAccruedCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionReferralCalls::TotalFeeAccrued(decoded));
            }
            if let Ok(decoded) =
                <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionReferralCalls::TransferOwnership(decoded));
            }
            if let Ok(decoded) =
                <VerifierCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionReferralCalls::Verifier(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for OrionReferralCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                OrionReferralCalls::GetFee(element) => element.encode(),
                OrionReferralCalls::Initialize(element) => element.encode(),
                OrionReferralCalls::Owner(element) => element.encode(),
                OrionReferralCalls::RenounceOwnership(element) => element.encode(),
                OrionReferralCalls::RewardToken(element) => element.encode(),
                OrionReferralCalls::SetVerifier(element) => element.encode(),
                OrionReferralCalls::TotalFeeAccrued(element) => element.encode(),
                OrionReferralCalls::TransferOwnership(element) => element.encode(),
                OrionReferralCalls::Verifier(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for OrionReferralCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OrionReferralCalls::GetFee(element) => element.fmt(f),
                OrionReferralCalls::Initialize(element) => element.fmt(f),
                OrionReferralCalls::Owner(element) => element.fmt(f),
                OrionReferralCalls::RenounceOwnership(element) => element.fmt(f),
                OrionReferralCalls::RewardToken(element) => element.fmt(f),
                OrionReferralCalls::SetVerifier(element) => element.fmt(f),
                OrionReferralCalls::TotalFeeAccrued(element) => element.fmt(f),
                OrionReferralCalls::TransferOwnership(element) => element.fmt(f),
                OrionReferralCalls::Verifier(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<GetFeeCall> for OrionReferralCalls {
        fn from(var: GetFeeCall) -> Self {
            OrionReferralCalls::GetFee(var)
        }
    }
    impl ::std::convert::From<InitializeCall> for OrionReferralCalls {
        fn from(var: InitializeCall) -> Self {
            OrionReferralCalls::Initialize(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for OrionReferralCalls {
        fn from(var: OwnerCall) -> Self {
            OrionReferralCalls::Owner(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for OrionReferralCalls {
        fn from(var: RenounceOwnershipCall) -> Self {
            OrionReferralCalls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<RewardTokenCall> for OrionReferralCalls {
        fn from(var: RewardTokenCall) -> Self {
            OrionReferralCalls::RewardToken(var)
        }
    }
    impl ::std::convert::From<SetVerifierCall> for OrionReferralCalls {
        fn from(var: SetVerifierCall) -> Self {
            OrionReferralCalls::SetVerifier(var)
        }
    }
    impl ::std::convert::From<TotalFeeAccruedCall> for OrionReferralCalls {
        fn from(var: TotalFeeAccruedCall) -> Self {
            OrionReferralCalls::TotalFeeAccrued(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for OrionReferralCalls {
        fn from(var: TransferOwnershipCall) -> Self {
            OrionReferralCalls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<VerifierCall> for OrionReferralCalls {
        fn from(var: VerifierCall) -> Self {
            OrionReferralCalls::Verifier(var)
        }
    }
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `rewardToken` function with signature `rewardToken()` and selector `0xf7c618c1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardTokenReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `totalFeeAccrued` function with signature `totalFeeAccrued(address)` and selector `0x53cf72f8`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct TotalFeeAccruedReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `verifier` function with signature `verifier()` and selector `0x2b7ac3f3`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct VerifierReturn(pub ::ethers::core::types::Address);
    ///`FeeOrder(address,uint256,bytes)`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    pub struct FeeOrder {
        pub referrer: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub signature: ::ethers::core::types::Bytes,
    }
}
