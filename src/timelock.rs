pub use timelock::*;
#[allow(
    clippy::too_many_arguments,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
pub mod timelock {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!Timelock was auto-generated with ethers-rs Abigen. More information at: <https://github.com/gakonst/ethers-rs>
    use ::ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ::ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ::ethers::providers::Middleware;
    use std::sync::Arc;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"delay_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"CancelTransaction\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ExecuteTransaction\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"NewAdmin\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"NewDelay\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"NewPendingAdmin\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"QueueTransaction\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAXIMUM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MINIMUM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"acceptAdmin\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cancelTransaction\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"queueTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"queuedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay_\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setDelay\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingAdmin_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setPendingAdmin\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static TIMELOCK_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        16,
        190,
        56,
        3,
        128,
        97,
        16,
        190,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        1,
        79,
        86,
        91,
        98,
        2,
        163,
        0,
        129,
        16,
        21,
        97,
        0,
        173,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        55,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        99,
        111,
        110,
        115,
        116,
        114,
        117,
        99,
        116,
        111,
        114,
        58,
        32,
        68,
        101,
        108,
        97,
        121,
        32,
        109,
        117,
        115,
        96,
        68,
        130,
        1,
        82,
        127,
        116,
        32,
        101,
        120,
        99,
        101,
        101,
        100,
        32,
        109,
        105,
        110,
        105,
        109,
        117,
        109,
        32,
        100,
        101,
        108,
        97,
        121,
        46,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        98,
        39,
        141,
        0,
        129,
        17,
        21,
        97,
        1,
        38,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        56,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        115,
        101,
        116,
        68,
        101,
        108,
        97,
        121,
        58,
        32,
        68,
        101,
        108,
        97,
        121,
        32,
        109,
        117,
        115,
        116,
        32,
        110,
        96,
        68,
        130,
        1,
        82,
        127,
        111,
        116,
        32,
        101,
        120,
        99,
        101,
        101,
        100,
        32,
        109,
        97,
        120,
        105,
        109,
        117,
        109,
        32,
        100,
        101,
        108,
        97,
        121,
        46,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        0,
        164,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        144,
        147,
        22,
        146,
        144,
        146,
        23,
        144,
        145,
        85,
        96,
        2,
        85,
        97,
        1,
        137,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        1,
        98,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        1,
        121,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        147,
        144,
        147,
        1,
        81,
        146,
        148,
        146,
        147,
        80,
        80,
        80,
        86,
        91,
        97,
        15,
        38,
        128,
        97,
        1,
        152,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        194,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        106,
        66,
        184,
        248,
        17,
        97,
        0,
        127,
        87,
        128,
        99,
        193,
        162,
        135,
        226,
        17,
        97,
        0,
        89,
        87,
        128,
        99,
        193,
        162,
        135,
        226,
        20,
        97,
        1,
        241,
        87,
        128,
        99,
        225,
        119,
        36,
        110,
        20,
        97,
        2,
        8,
        87,
        128,
        99,
        242,
        176,
        101,
        55,
        20,
        97,
        2,
        40,
        87,
        128,
        99,
        248,
        81,
        164,
        64,
        20,
        97,
        2,
        104,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        106,
        66,
        184,
        248,
        20,
        97,
        1,
        173,
        87,
        128,
        99,
        125,
        100,
        95,
        171,
        20,
        97,
        1,
        195,
        87,
        128,
        99,
        177,
        180,
        58,
        229,
        20,
        97,
        1,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        8,
        37,
        243,
        143,
        20,
        97,
        0,
        199,
        87,
        128,
        99,
        14,
        24,
        182,
        129,
        20,
        97,
        0,
        240,
        87,
        128,
        99,
        38,
        120,
        34,
        71,
        20,
        97,
        1,
        7,
        87,
        128,
        99,
        58,
        102,
        249,
        1,
        20,
        97,
        1,
        63,
        87,
        128,
        99,
        77,
        209,
        139,
        245,
        20,
        97,
        1,
        109,
        87,
        128,
        99,
        89,
        31,
        205,
        254,
        20,
        97,
        1,
        141,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        218,
        97,
        0,
        213,
        54,
        96,
        4,
        97,
        12,
        145,
        86,
        91,
        97,
        2,
        136,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        231,
        145,
        144,
        97,
        13,
        146,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        0,
        252,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        5,
        97,
        5,
        250,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        1,
        19,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        84,
        97,
        1,
        39,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        231,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        75,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        95,
        97,
        1,
        90,
        54,
        96,
        4,
        97,
        12,
        145,
        86,
        91,
        97,
        6,
        195,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        231,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        121,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        5,
        97,
        1,
        136,
        54,
        96,
        4,
        97,
        13,
        165,
        86,
        91,
        97,
        8,
        118,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        153,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        5,
        97,
        1,
        168,
        54,
        96,
        4,
        97,
        12,
        145,
        86,
        91,
        97,
        9,
        53,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        185,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        95,
        96,
        2,
        84,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        207,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        95,
        98,
        39,
        141,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        230,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        95,
        98,
        2,
        163,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        253,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        95,
        98,
        18,
        117,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        20,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        5,
        97,
        2,
        35,
        54,
        96,
        4,
        97,
        13,
        192,
        86,
        91,
        97,
        10,
        79,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        52,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        88,
        97,
        2,
        67,
        54,
        96,
        4,
        97,
        13,
        192,
        86,
        91,
        96,
        3,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        231,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        116,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        0,
        84,
        97,
        1,
        39,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        0,
        84,
        96,
        96,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        3,
        16,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        56,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        101,
        120,
        101,
        99,
        117,
        116,
        101,
        84,
        114,
        97,
        110,
        115,
        97,
        99,
        116,
        105,
        111,
        110,
        58,
        32,
        67,
        97,
        96,
        68,
        130,
        1,
        82,
        127,
        108,
        108,
        32,
        109,
        117,
        115,
        116,
        32,
        99,
        111,
        109,
        101,
        32,
        102,
        114,
        111,
        109,
        32,
        97,
        100,
        109,
        105,
        110,
        46,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        134,
        134,
        134,
        134,
        134,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        3,
        43,
        149,
        148,
        147,
        146,
        145,
        144,
        97,
        13,
        217,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        31,
        25,
        129,
        132,
        3,
        1,
        129,
        82,
        145,
        129,
        82,
        129,
        81,
        96,
        32,
        146,
        131,
        1,
        32,
        96,
        0,
        129,
        129,
        82,
        96,
        3,
        144,
        147,
        82,
        145,
        32,
        84,
        144,
        145,
        80,
        96,
        255,
        22,
        97,
        3,
        182,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        61,
        96,
        36,
        130,
        1,
        82,
        96,
        0,
        128,
        81,
        96,
        32,
        97,
        14,
        209,
        131,
        57,
        129,
        81,
        145,
        82,
        96,
        68,
        130,
        1,
        82,
        127,
        97,
        110,
        115,
        97,
        99,
        116,
        105,
        111,
        110,
        32,
        104,
        97,
        115,
        110,
        39,
        116,
        32,
        98,
        101,
        101,
        110,
        32,
        113,
        117,
        101,
        117,
        101,
        100,
        46,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        130,
        66,
        16,
        21,
        97,
        4,
        40,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        69,
        96,
        36,
        130,
        1,
        82,
        96,
        0,
        128,
        81,
        96,
        32,
        97,
        14,
        209,
        131,
        57,
        129,
        81,
        145,
        82,
        96,
        68,
        130,
        1,
        82,
        127,
        97,
        110,
        115,
        97,
        99,
        116,
        105,
        111,
        110,
        32,
        104,
        97,
        115,
        110,
        39,
        116,
        32,
        115,
        117,
        114,
        112,
        97,
        115,
        115,
        101,
        100,
        32,
        116,
        105,
        109,
        101,
        32,
        96,
        100,
        130,
        1,
        82,
        100,
        54,
        55,
        177,
        181,
        151,
        96,
        217,
        27,
        96,
        132,
        130,
        1,
        82,
        96,
        164,
        1,
        97,
        3,
        7,
        86,
        91,
        97,
        4,
        53,
        131,
        98,
        18,
        117,
        0,
        97,
        11,
        212,
        86,
        91,
        66,
        17,
        21,
        97,
        4,
        142,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        51,
        96,
        36,
        130,
        1,
        82,
        96,
        0,
        128,
        81,
        96,
        32,
        97,
        14,
        209,
        131,
        57,
        129,
        81,
        145,
        82,
        96,
        68,
        130,
        1,
        82,
        114,
        48,
        183,
        57,
        176,
        177,
        186,
        52,
        183,
        183,
        16,
        52,
        185,
        144,
        57,
        186,
        48,
        182,
        50,
        151,
        96,
        105,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        3,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        133,
        81,
        96,
        96,
        145,
        3,
        97,
        4,
        181,
        87,
        80,
        131,
        97,
        4,
        225,
        86,
        91,
        133,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        133,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        4,
        207,
        146,
        145,
        144,
        97,
        14,
        37,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        144,
        80,
        91,
        96,
        0,
        128,
        137,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        137,
        132,
        96,
        64,
        81,
        97,
        4,
        253,
        145,
        144,
        97,
        14,
        86,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        5,
        58,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        5,
        63,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        97,
        5,
        165,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        61,
        96,
        36,
        130,
        1,
        82,
        96,
        0,
        128,
        81,
        96,
        32,
        97,
        14,
        209,
        131,
        57,
        129,
        81,
        145,
        82,
        96,
        68,
        130,
        1,
        82,
        127,
        97,
        110,
        115,
        97,
        99,
        116,
        105,
        111,
        110,
        32,
        101,
        120,
        101,
        99,
        117,
        116,
        105,
        111,
        110,
        32,
        114,
        101,
        118,
        101,
        114,
        116,
        101,
        100,
        46,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        137,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        132,
        127,
        165,
        96,
        227,
        25,
        128,
        96,
        162,
        241,
        6,
        112,
        193,
        236,
        91,
        64,
        48,
        119,
        234,
        106,
        233,
        60,
        168,
        222,
        28,
        50,
        180,
        81,
        220,
        26,
        148,
        60,
        214,
        231,
        139,
        139,
        139,
        139,
        96,
        64,
        81,
        97,
        5,
        229,
        148,
        147,
        146,
        145,
        144,
        97,
        14,
        114,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        163,
        153,
        152,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        6,
        122,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        56,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        97,
        99,
        99,
        101,
        112,
        116,
        65,
        100,
        109,
        105,
        110,
        58,
        32,
        67,
        97,
        108,
        108,
        32,
        109,
        117,
        115,
        116,
        96,
        68,
        130,
        1,
        82,
        127,
        32,
        99,
        111,
        109,
        101,
        32,
        102,
        114,
        111,
        109,
        32,
        112,
        101,
        110,
        100,
        105,
        110,
        103,
        65,
        100,
        109,
        105,
        110,
        46,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        96,
        0,
        128,
        84,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        145,
        130,
        22,
        129,
        23,
        131,
        85,
        96,
        1,
        128,
        84,
        144,
        146,
        22,
        144,
        145,
        85,
        96,
        64,
        81,
        144,
        145,
        127,
        113,
        97,
        64,
        113,
        184,
        141,
        238,
        94,
        11,
        42,
        229,
        120,
        169,
        221,
        123,
        46,
        187,
        233,
        174,
        131,
        43,
        164,
        25,
        220,
        2,
        66,
        205,
        6,
        90,
        41,
        11,
        108,
        145,
        162,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        7,
        61,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        54,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        113,
        117,
        101,
        117,
        101,
        84,
        114,
        97,
        110,
        115,
        97,
        99,
        116,
        105,
        111,
        110,
        58,
        32,
        67,
        97,
        108,
        108,
        96,
        68,
        130,
        1,
        82,
        117,
        16,
        54,
        186,
        185,
        186,
        16,
        49,
        183,
        182,
        178,
        144,
        51,
        57,
        55,
        182,
        144,
        48,
        178,
        54,
        180,
        183,
        23,
        96,
        81,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        97,
        7,
        80,
        96,
        2,
        84,
        97,
        7,
        74,
        66,
        144,
        86,
        91,
        144,
        97,
        11,
        212,
        86,
        91,
        130,
        16,
        21,
        97,
        7,
        215,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        73,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        113,
        117,
        101,
        117,
        101,
        84,
        114,
        97,
        110,
        115,
        97,
        99,
        116,
        105,
        111,
        110,
        58,
        32,
        69,
        115,
        116,
        105,
        96,
        68,
        130,
        1,
        82,
        127,
        109,
        97,
        116,
        101,
        100,
        32,
        101,
        120,
        101,
        99,
        117,
        116,
        105,
        111,
        110,
        32,
        98,
        108,
        111,
        99,
        107,
        32,
        109,
        117,
        115,
        116,
        32,
        115,
        97,
        116,
        105,
        115,
        96,
        100,
        130,
        1,
        82,
        104,
        51,
        60,
        144,
        50,
        50,
        182,
        48,
        188,
        151,
        96,
        185,
        27,
        96,
        132,
        130,
        1,
        82,
        96,
        164,
        1,
        97,
        3,
        7,
        86,
        91,
        96,
        0,
        134,
        134,
        134,
        134,
        134,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        7,
        242,
        149,
        148,
        147,
        146,
        145,
        144,
        97,
        13,
        217,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        31,
        25,
        129,
        132,
        3,
        1,
        129,
        82,
        130,
        130,
        82,
        128,
        81,
        96,
        32,
        145,
        130,
        1,
        32,
        96,
        0,
        129,
        129,
        82,
        96,
        3,
        144,
        146,
        82,
        145,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        145,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        136,
        22,
        144,
        130,
        144,
        127,
        118,
        226,
        121,
        109,
        195,
        168,
        29,
        87,
        176,
        232,
        80,
        75,
        100,
        127,
        235,
        203,
        238,
        181,
        244,
        175,
        129,
        142,
        22,
        79,
        17,
        238,
        248,
        19,
        26,
        106,
        118,
        63,
        144,
        97,
        8,
        100,
        144,
        138,
        144,
        138,
        144,
        138,
        144,
        138,
        144,
        97,
        14,
        114,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        163,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        51,
        48,
        20,
        97,
        8,
        235,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        56,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        115,
        101,
        116,
        80,
        101,
        110,
        100,
        105,
        110,
        103,
        65,
        100,
        109,
        105,
        110,
        58,
        32,
        67,
        97,
        108,
        108,
        32,
        96,
        68,
        130,
        1,
        82,
        127,
        109,
        117,
        115,
        116,
        32,
        99,
        111,
        109,
        101,
        32,
        102,
        114,
        111,
        109,
        32,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        46,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        127,
        105,
        215,
        142,
        56,
        160,
        25,
        133,
        251,
        177,
        70,
        41,
        97,
        128,
        155,
        75,
        45,
        101,
        83,
        27,
        201,
        59,
        43,
        148,
        3,
        127,
        51,
        52,
        184,
        44,
        164,
        167,
        86,
        144,
        96,
        0,
        144,
        162,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        9,
        181,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        55,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        99,
        97,
        110,
        99,
        101,
        108,
        84,
        114,
        97,
        110,
        115,
        97,
        99,
        116,
        105,
        111,
        110,
        58,
        32,
        67,
        97,
        108,
        96,
        68,
        130,
        1,
        82,
        127,
        108,
        32,
        109,
        117,
        115,
        116,
        32,
        99,
        111,
        109,
        101,
        32,
        102,
        114,
        111,
        109,
        32,
        97,
        100,
        109,
        105,
        110,
        46,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        96,
        0,
        133,
        133,
        133,
        133,
        133,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        9,
        208,
        149,
        148,
        147,
        146,
        145,
        144,
        97,
        13,
        217,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        31,
        25,
        129,
        132,
        3,
        1,
        129,
        82,
        130,
        130,
        82,
        128,
        81,
        96,
        32,
        145,
        130,
        1,
        32,
        96,
        0,
        129,
        129,
        82,
        96,
        3,
        144,
        146,
        82,
        145,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        145,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        135,
        22,
        144,
        130,
        144,
        127,
        47,
        255,
        192,
        145,
        165,
        1,
        253,
        145,
        191,
        191,
        242,
        113,
        65,
        69,
        13,
        58,
        203,
        64,
        251,
        142,
        109,
        131,
        130,
        178,
        67,
        236,
        122,
        129,
        42,
        58,
        175,
        135,
        144,
        97,
        10,
        63,
        144,
        137,
        144,
        137,
        144,
        137,
        144,
        137,
        144,
        97,
        14,
        114,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        163,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        51,
        48,
        20,
        97,
        10,
        184,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        49,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        115,
        101,
        116,
        68,
        101,
        108,
        97,
        121,
        58,
        32,
        67,
        97,
        108,
        108,
        32,
        109,
        117,
        115,
        116,
        32,
        99,
        111,
        96,
        68,
        130,
        1,
        82,
        112,
        54,
        178,
        144,
        51,
        57,
        55,
        182,
        144,
        42,
        52,
        182,
        178,
        182,
        55,
        177,
        181,
        151,
        96,
        121,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        98,
        2,
        163,
        0,
        129,
        16,
        21,
        97,
        11,
        40,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        52,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        115,
        101,
        116,
        68,
        101,
        108,
        97,
        121,
        58,
        32,
        68,
        101,
        108,
        97,
        121,
        32,
        109,
        117,
        115,
        116,
        32,
        101,
        96,
        68,
        130,
        1,
        82,
        115,
        60,
        49,
        178,
        178,
        178,
        16,
        54,
        180,
        183,
        52,
        182,
        186,
        182,
        144,
        50,
        50,
        182,
        48,
        188,
        151,
        96,
        97,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        98,
        39,
        141,
        0,
        129,
        17,
        21,
        97,
        11,
        161,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        56,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        115,
        101,
        116,
        68,
        101,
        108,
        97,
        121,
        58,
        32,
        68,
        101,
        108,
        97,
        121,
        32,
        109,
        117,
        115,
        116,
        32,
        110,
        96,
        68,
        130,
        1,
        82,
        127,
        111,
        116,
        32,
        101,
        120,
        99,
        101,
        101,
        100,
        32,
        109,
        97,
        120,
        105,
        109,
        117,
        109,
        32,
        100,
        101,
        108,
        97,
        121,
        46,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        7,
        86,
        91,
        96,
        2,
        129,
        144,
        85,
        96,
        64,
        81,
        129,
        144,
        127,
        148,
        139,
        31,
        106,
        66,
        238,
        19,
        139,
        126,
        52,
        5,
        139,
        168,
        90,
        55,
        247,
        22,
        213,
        95,
        242,
        95,
        240,
        90,
        118,
        63,
        21,
        190,
        214,
        160,
        76,
        141,
        44,
        144,
        96,
        0,
        144,
        162,
        80,
        86,
        91,
        96,
        0,
        97,
        11,
        224,
        130,
        132,
        97,
        14,
        175,
        86,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        12,
        0,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        132,
        17,
        21,
        97,
        12,
        54,
        87,
        97,
        12,
        54,
        97,
        12,
        5,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        133,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        130,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        12,
        94,
        87,
        97,
        12,
        94,
        97,
        12,
        5,
        86,
        91,
        129,
        96,
        64,
        82,
        128,
        147,
        80,
        133,
        129,
        82,
        134,
        134,
        134,
        1,
        17,
        21,
        97,
        12,
        119,
        87,
        96,
        0,
        128,
        253,
        91,
        133,
        133,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        96,
        32,
        135,
        131,
        1,
        1,
        82,
        80,
        80,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        97,
        12,
        169,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        12,
        178,
        134,
        97,
        11,
        233,
        86,
        91,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        12,
        214,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        136,
        1,
        145,
        80,
        136,
        96,
        31,
        131,
        1,
        18,
        97,
        12,
        234,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        12,
        249,
        137,
        131,
        53,
        96,
        32,
        133,
        1,
        97,
        12,
        27,
        86,
        91,
        148,
        80,
        96,
        96,
        136,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        13,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        134,
        1,
        96,
        31,
        129,
        1,
        136,
        19,
        97,
        13,
        33,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        13,
        48,
        136,
        130,
        53,
        96,
        32,
        132,
        1,
        97,
        12,
        27,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        146,
        149,
        96,
        128,
        1,
        53,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        13,
        93,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        13,
        69,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        97,
        13,
        126,
        129,
        96,
        32,
        134,
        1,
        96,
        32,
        134,
        1,
        97,
        13,
        66,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        32,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        11,
        224,
        96,
        32,
        131,
        1,
        132,
        97,
        13,
        102,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        183,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        11,
        224,
        130,
        97,
        11,
        233,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        210,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        1,
        128,
        96,
        160,
        27,
        3,
        134,
        22,
        129,
        82,
        132,
        96,
        32,
        130,
        1,
        82,
        96,
        160,
        96,
        64,
        130,
        1,
        82,
        96,
        0,
        97,
        14,
        0,
        96,
        160,
        131,
        1,
        134,
        97,
        13,
        102,
        86,
        91,
        130,
        129,
        3,
        96,
        96,
        132,
        1,
        82,
        97,
        14,
        18,
        129,
        134,
        97,
        13,
        102,
        86,
        91,
        145,
        80,
        80,
        130,
        96,
        128,
        131,
        1,
        82,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        131,
        22,
        129,
        82,
        129,
        81,
        96,
        0,
        144,
        97,
        14,
        72,
        129,
        96,
        4,
        133,
        1,
        96,
        32,
        135,
        1,
        97,
        13,
        66,
        86,
        91,
        145,
        144,
        145,
        1,
        96,
        4,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        14,
        104,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        13,
        66,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        132,
        129,
        82,
        96,
        128,
        96,
        32,
        130,
        1,
        82,
        96,
        0,
        97,
        14,
        139,
        96,
        128,
        131,
        1,
        134,
        97,
        13,
        102,
        86,
        91,
        130,
        129,
        3,
        96,
        64,
        132,
        1,
        82,
        97,
        14,
        157,
        129,
        134,
        97,
        13,
        102,
        86,
        91,
        145,
        80,
        80,
        130,
        96,
        96,
        131,
        1,
        82,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        11,
        227,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        84,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        58,
        58,
        101,
        120,
        101,
        99,
        117,
        116,
        101,
        84,
        114,
        97,
        110,
        115,
        97,
        99,
        116,
        105,
        111,
        110,
        58,
        32,
        84,
        114,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        185,
        150,
        215,
        132,
        89,
        38,
        66,
        246,
        132,
        96,
        133,
        18,
        120,
        104,
        0,
        50,
        182,
        238,
        201,
        32,
        29,
        62,
        173,
        175,
        204,
        201,
        238,
        238,
        36,
        109,
        108,
        213,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    lazy_static::lazy_static! {
            pub static ref TIMELOCK_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from(
            __BYTECODE.to_vec(),
        );
    }
    pub struct Timelock<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for Timelock<M> {
        fn clone(&self) -> Self {
            Timelock(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for Timelock<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for Timelock<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(Timelock))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Timelock<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                TIMELOCK_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                TIMELOCK_ABI.clone(),
                TIMELOCK_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `GRACE_PERIOD` (0xc1a287e2) function
        pub fn grace_period(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([193, 162, 135, 226], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `MAXIMUM_DELAY` (0x7d645fab) function
        pub fn maximum_delay(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([125, 100, 95, 171], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `MINIMUM_DELAY` (0xb1b43ae5) function
        pub fn minimum_delay(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([177, 180, 58, 229], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `acceptAdmin` (0x0e18b681) function
        pub fn accept_admin(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([14, 24, 182, 129], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `admin` (0xf851a440) function
        pub fn admin(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([248, 81, 164, 64], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `cancelTransaction` (0x591fcdfe) function
        pub fn cancel_transaction(
            &self,
            target: ::ethers::core::types::Address,
            value: ::ethers::core::types::U256,
            signature: String,
            data: ::ethers::core::types::Bytes,
            eta: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([89, 31, 205, 254], (target, value, signature, data, eta))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `delay` (0x6a42b8f8) function
        pub fn delay(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([106, 66, 184, 248], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `executeTransaction` (0x0825f38f) function
        pub fn execute_transaction(
            &self,
            target: ::ethers::core::types::Address,
            value: ::ethers::core::types::U256,
            signature: String,
            data: ::ethers::core::types::Bytes,
            eta: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Bytes> {
            self.0
                .method_hash([8, 37, 243, 143], (target, value, signature, data, eta))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `pendingAdmin` (0x26782247) function
        pub fn pending_admin(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([38, 120, 34, 71], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `queueTransaction` (0x3a66f901) function
        pub fn queue_transaction(
            &self,
            target: ::ethers::core::types::Address,
            value: ::ethers::core::types::U256,
            signature: String,
            data: ::ethers::core::types::Bytes,
            eta: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([58, 102, 249, 1], (target, value, signature, data, eta))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `queuedTransactions` (0xf2b06537) function
        pub fn queued_transactions(
            &self,
            p0: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([242, 176, 101, 55], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setDelay` (0xe177246e) function
        pub fn set_delay(
            &self,
            delay: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([225, 119, 36, 110], delay)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setPendingAdmin` (0x4dd18bf5) function
        pub fn set_pending_admin(
            &self,
            pending_admin: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([77, 209, 139, 245], pending_admin)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `CancelTransaction` event
        pub fn cancel_transaction_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, CancelTransactionFilter> {
            self.0.event()
        }
        ///Gets the contract's `ExecuteTransaction` event
        pub fn execute_transaction_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ExecuteTransactionFilter> {
            self.0.event()
        }
        ///Gets the contract's `NewAdmin` event
        pub fn new_admin_filter(&self) -> ::ethers::contract::builders::Event<M, NewAdminFilter> {
            self.0.event()
        }
        ///Gets the contract's `NewDelay` event
        pub fn new_delay_filter(&self) -> ::ethers::contract::builders::Event<M, NewDelayFilter> {
            self.0.event()
        }
        ///Gets the contract's `NewPendingAdmin` event
        pub fn new_pending_admin_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, NewPendingAdminFilter> {
            self.0.event()
        }
        ///Gets the contract's `QueueTransaction` event
        pub fn queue_transaction_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, QueueTransactionFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(&self) -> ::ethers::contract::builders::Event<M, TimelockEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for Timelock<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "CancelTransaction",
        abi = "CancelTransaction(bytes32,address,uint256,string,bytes,uint256)"
    )]
    pub struct CancelTransactionFilter {
        #[ethevent(indexed)]
        pub tx_hash: [u8; 32],
        #[ethevent(indexed)]
        pub target: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
        pub signature: String,
        pub data: ::ethers::core::types::Bytes,
        pub eta: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "ExecuteTransaction",
        abi = "ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)"
    )]
    pub struct ExecuteTransactionFilter {
        #[ethevent(indexed)]
        pub tx_hash: [u8; 32],
        #[ethevent(indexed)]
        pub target: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
        pub signature: String,
        pub data: ::ethers::core::types::Bytes,
        pub eta: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "NewAdmin", abi = "NewAdmin(address)")]
    pub struct NewAdminFilter {
        #[ethevent(indexed)]
        pub new_admin: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "NewDelay", abi = "NewDelay(uint256)")]
    pub struct NewDelayFilter {
        #[ethevent(indexed)]
        pub new_delay: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "NewPendingAdmin", abi = "NewPendingAdmin(address)")]
    pub struct NewPendingAdminFilter {
        #[ethevent(indexed)]
        pub new_pending_admin: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "QueueTransaction",
        abi = "QueueTransaction(bytes32,address,uint256,string,bytes,uint256)"
    )]
    pub struct QueueTransactionFilter {
        #[ethevent(indexed)]
        pub tx_hash: [u8; 32],
        #[ethevent(indexed)]
        pub target: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
        pub signature: String,
        pub data: ::ethers::core::types::Bytes,
        pub eta: ::ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum TimelockEvents {
        CancelTransactionFilter(CancelTransactionFilter),
        ExecuteTransactionFilter(ExecuteTransactionFilter),
        NewAdminFilter(NewAdminFilter),
        NewDelayFilter(NewDelayFilter),
        NewPendingAdminFilter(NewPendingAdminFilter),
        QueueTransactionFilter(QueueTransactionFilter),
    }
    impl ::ethers::contract::EthLogDecode for TimelockEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = CancelTransactionFilter::decode_log(log) {
                return Ok(TimelockEvents::CancelTransactionFilter(decoded));
            }
            if let Ok(decoded) = ExecuteTransactionFilter::decode_log(log) {
                return Ok(TimelockEvents::ExecuteTransactionFilter(decoded));
            }
            if let Ok(decoded) = NewAdminFilter::decode_log(log) {
                return Ok(TimelockEvents::NewAdminFilter(decoded));
            }
            if let Ok(decoded) = NewDelayFilter::decode_log(log) {
                return Ok(TimelockEvents::NewDelayFilter(decoded));
            }
            if let Ok(decoded) = NewPendingAdminFilter::decode_log(log) {
                return Ok(TimelockEvents::NewPendingAdminFilter(decoded));
            }
            if let Ok(decoded) = QueueTransactionFilter::decode_log(log) {
                return Ok(TimelockEvents::QueueTransactionFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for TimelockEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TimelockEvents::CancelTransactionFilter(element) => element.fmt(f),
                TimelockEvents::ExecuteTransactionFilter(element) => element.fmt(f),
                TimelockEvents::NewAdminFilter(element) => element.fmt(f),
                TimelockEvents::NewDelayFilter(element) => element.fmt(f),
                TimelockEvents::NewPendingAdminFilter(element) => element.fmt(f),
                TimelockEvents::QueueTransactionFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `GRACE_PERIOD` function with signature `GRACE_PERIOD()` and selector `0xc1a287e2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "GRACE_PERIOD", abi = "GRACE_PERIOD()")]
    pub struct GracePeriodCall;
    ///Container type for all input parameters for the `MAXIMUM_DELAY` function with signature `MAXIMUM_DELAY()` and selector `0x7d645fab`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "MAXIMUM_DELAY", abi = "MAXIMUM_DELAY()")]
    pub struct MaximumDelayCall;
    ///Container type for all input parameters for the `MINIMUM_DELAY` function with signature `MINIMUM_DELAY()` and selector `0xb1b43ae5`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "MINIMUM_DELAY", abi = "MINIMUM_DELAY()")]
    pub struct MinimumDelayCall;
    ///Container type for all input parameters for the `acceptAdmin` function with signature `acceptAdmin()` and selector `0x0e18b681`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "acceptAdmin", abi = "acceptAdmin()")]
    pub struct AcceptAdminCall;
    ///Container type for all input parameters for the `admin` function with signature `admin()` and selector `0xf851a440`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "admin", abi = "admin()")]
    pub struct AdminCall;
    ///Container type for all input parameters for the `cancelTransaction` function with signature `cancelTransaction(address,uint256,string,bytes,uint256)` and selector `0x591fcdfe`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "cancelTransaction",
        abi = "cancelTransaction(address,uint256,string,bytes,uint256)"
    )]
    pub struct CancelTransactionCall {
        pub target: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
        pub signature: String,
        pub data: ::ethers::core::types::Bytes,
        pub eta: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `delay` function with signature `delay()` and selector `0x6a42b8f8`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "delay", abi = "delay()")]
    pub struct DelayCall;
    ///Container type for all input parameters for the `executeTransaction` function with signature `executeTransaction(address,uint256,string,bytes,uint256)` and selector `0x0825f38f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "executeTransaction",
        abi = "executeTransaction(address,uint256,string,bytes,uint256)"
    )]
    pub struct ExecuteTransactionCall {
        pub target: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
        pub signature: String,
        pub data: ::ethers::core::types::Bytes,
        pub eta: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `pendingAdmin` function with signature `pendingAdmin()` and selector `0x26782247`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "pendingAdmin", abi = "pendingAdmin()")]
    pub struct PendingAdminCall;
    ///Container type for all input parameters for the `queueTransaction` function with signature `queueTransaction(address,uint256,string,bytes,uint256)` and selector `0x3a66f901`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "queueTransaction",
        abi = "queueTransaction(address,uint256,string,bytes,uint256)"
    )]
    pub struct QueueTransactionCall {
        pub target: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
        pub signature: String,
        pub data: ::ethers::core::types::Bytes,
        pub eta: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `queuedTransactions` function with signature `queuedTransactions(bytes32)` and selector `0xf2b06537`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "queuedTransactions", abi = "queuedTransactions(bytes32)")]
    pub struct QueuedTransactionsCall(pub [u8; 32]);
    ///Container type for all input parameters for the `setDelay` function with signature `setDelay(uint256)` and selector `0xe177246e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setDelay", abi = "setDelay(uint256)")]
    pub struct SetDelayCall {
        pub delay: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `setPendingAdmin` function with signature `setPendingAdmin(address)` and selector `0x4dd18bf5`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setPendingAdmin", abi = "setPendingAdmin(address)")]
    pub struct SetPendingAdminCall {
        pub pending_admin: ::ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum TimelockCalls {
        GracePeriod(GracePeriodCall),
        MaximumDelay(MaximumDelayCall),
        MinimumDelay(MinimumDelayCall),
        AcceptAdmin(AcceptAdminCall),
        Admin(AdminCall),
        CancelTransaction(CancelTransactionCall),
        Delay(DelayCall),
        ExecuteTransaction(ExecuteTransactionCall),
        PendingAdmin(PendingAdminCall),
        QueueTransaction(QueueTransactionCall),
        QueuedTransactions(QueuedTransactionsCall),
        SetDelay(SetDelayCall),
        SetPendingAdmin(SetPendingAdminCall),
    }
    impl ::ethers::core::abi::AbiDecode for TimelockCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <GracePeriodCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::GracePeriod(decoded));
            }
            if let Ok(decoded) =
                <MaximumDelayCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::MaximumDelay(decoded));
            }
            if let Ok(decoded) =
                <MinimumDelayCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::MinimumDelay(decoded));
            }
            if let Ok(decoded) =
                <AcceptAdminCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::AcceptAdmin(decoded));
            }
            if let Ok(decoded) =
                <AdminCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::Admin(decoded));
            }
            if let Ok(decoded) =
                <CancelTransactionCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::CancelTransaction(decoded));
            }
            if let Ok(decoded) =
                <DelayCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::Delay(decoded));
            }
            if let Ok(decoded) =
                <ExecuteTransactionCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::ExecuteTransaction(decoded));
            }
            if let Ok(decoded) =
                <PendingAdminCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::PendingAdmin(decoded));
            }
            if let Ok(decoded) =
                <QueueTransactionCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::QueueTransaction(decoded));
            }
            if let Ok(decoded) =
                <QueuedTransactionsCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::QueuedTransactions(decoded));
            }
            if let Ok(decoded) =
                <SetDelayCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::SetDelay(decoded));
            }
            if let Ok(decoded) =
                <SetPendingAdminCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TimelockCalls::SetPendingAdmin(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for TimelockCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                TimelockCalls::GracePeriod(element) => element.encode(),
                TimelockCalls::MaximumDelay(element) => element.encode(),
                TimelockCalls::MinimumDelay(element) => element.encode(),
                TimelockCalls::AcceptAdmin(element) => element.encode(),
                TimelockCalls::Admin(element) => element.encode(),
                TimelockCalls::CancelTransaction(element) => element.encode(),
                TimelockCalls::Delay(element) => element.encode(),
                TimelockCalls::ExecuteTransaction(element) => element.encode(),
                TimelockCalls::PendingAdmin(element) => element.encode(),
                TimelockCalls::QueueTransaction(element) => element.encode(),
                TimelockCalls::QueuedTransactions(element) => element.encode(),
                TimelockCalls::SetDelay(element) => element.encode(),
                TimelockCalls::SetPendingAdmin(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for TimelockCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TimelockCalls::GracePeriod(element) => element.fmt(f),
                TimelockCalls::MaximumDelay(element) => element.fmt(f),
                TimelockCalls::MinimumDelay(element) => element.fmt(f),
                TimelockCalls::AcceptAdmin(element) => element.fmt(f),
                TimelockCalls::Admin(element) => element.fmt(f),
                TimelockCalls::CancelTransaction(element) => element.fmt(f),
                TimelockCalls::Delay(element) => element.fmt(f),
                TimelockCalls::ExecuteTransaction(element) => element.fmt(f),
                TimelockCalls::PendingAdmin(element) => element.fmt(f),
                TimelockCalls::QueueTransaction(element) => element.fmt(f),
                TimelockCalls::QueuedTransactions(element) => element.fmt(f),
                TimelockCalls::SetDelay(element) => element.fmt(f),
                TimelockCalls::SetPendingAdmin(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<GracePeriodCall> for TimelockCalls {
        fn from(var: GracePeriodCall) -> Self {
            TimelockCalls::GracePeriod(var)
        }
    }
    impl ::std::convert::From<MaximumDelayCall> for TimelockCalls {
        fn from(var: MaximumDelayCall) -> Self {
            TimelockCalls::MaximumDelay(var)
        }
    }
    impl ::std::convert::From<MinimumDelayCall> for TimelockCalls {
        fn from(var: MinimumDelayCall) -> Self {
            TimelockCalls::MinimumDelay(var)
        }
    }
    impl ::std::convert::From<AcceptAdminCall> for TimelockCalls {
        fn from(var: AcceptAdminCall) -> Self {
            TimelockCalls::AcceptAdmin(var)
        }
    }
    impl ::std::convert::From<AdminCall> for TimelockCalls {
        fn from(var: AdminCall) -> Self {
            TimelockCalls::Admin(var)
        }
    }
    impl ::std::convert::From<CancelTransactionCall> for TimelockCalls {
        fn from(var: CancelTransactionCall) -> Self {
            TimelockCalls::CancelTransaction(var)
        }
    }
    impl ::std::convert::From<DelayCall> for TimelockCalls {
        fn from(var: DelayCall) -> Self {
            TimelockCalls::Delay(var)
        }
    }
    impl ::std::convert::From<ExecuteTransactionCall> for TimelockCalls {
        fn from(var: ExecuteTransactionCall) -> Self {
            TimelockCalls::ExecuteTransaction(var)
        }
    }
    impl ::std::convert::From<PendingAdminCall> for TimelockCalls {
        fn from(var: PendingAdminCall) -> Self {
            TimelockCalls::PendingAdmin(var)
        }
    }
    impl ::std::convert::From<QueueTransactionCall> for TimelockCalls {
        fn from(var: QueueTransactionCall) -> Self {
            TimelockCalls::QueueTransaction(var)
        }
    }
    impl ::std::convert::From<QueuedTransactionsCall> for TimelockCalls {
        fn from(var: QueuedTransactionsCall) -> Self {
            TimelockCalls::QueuedTransactions(var)
        }
    }
    impl ::std::convert::From<SetDelayCall> for TimelockCalls {
        fn from(var: SetDelayCall) -> Self {
            TimelockCalls::SetDelay(var)
        }
    }
    impl ::std::convert::From<SetPendingAdminCall> for TimelockCalls {
        fn from(var: SetPendingAdminCall) -> Self {
            TimelockCalls::SetPendingAdmin(var)
        }
    }
    ///Container type for all return fields from the `GRACE_PERIOD` function with signature `GRACE_PERIOD()` and selector `0xc1a287e2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GracePeriodReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `MAXIMUM_DELAY` function with signature `MAXIMUM_DELAY()` and selector `0x7d645fab`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct MaximumDelayReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `MINIMUM_DELAY` function with signature `MINIMUM_DELAY()` and selector `0xb1b43ae5`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct MinimumDelayReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `admin` function with signature `admin()` and selector `0xf851a440`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct AdminReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `delay` function with signature `delay()` and selector `0x6a42b8f8`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct DelayReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `executeTransaction` function with signature `executeTransaction(address,uint256,string,bytes,uint256)` and selector `0x0825f38f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct ExecuteTransactionReturn(pub ::ethers::core::types::Bytes);
    ///Container type for all return fields from the `pendingAdmin` function with signature `pendingAdmin()` and selector `0x26782247`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct PendingAdminReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `queueTransaction` function with signature `queueTransaction(address,uint256,string,bytes,uint256)` and selector `0x3a66f901`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct QueueTransactionReturn(pub [u8; 32]);
    ///Container type for all return fields from the `queuedTransactions` function with signature `queuedTransactions(bytes32)` and selector `0xf2b06537`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct QueuedTransactionsReturn(pub bool);
}
