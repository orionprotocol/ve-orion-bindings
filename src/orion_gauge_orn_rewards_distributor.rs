pub use orion_gauge_orn_rewards_distributor::*;
#[allow(
    clippy::too_many_arguments,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
pub mod orion_gauge_orn_rewards_distributor {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!OrionGaugeORNRewardsDistributor was auto-generated with ethers-rs Abigen. More information at: <https://github.com/gakonst/ethers-rs>
    use ::ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ::ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ::ethers::providers::Middleware;
    use std::sync::Arc;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_curator_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_reward_token_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_gauge_controller_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"distibutions_state\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"DistributionsToggled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge_address\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"is_middleman\",\"type\":\"bool\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"is_active\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"GaugeStateChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OwnerChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OwnerNominated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RecoveredERC20\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge_address\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RewardDistributed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"acceptOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"curator_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"distributeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weeks_elapsed\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"reward_tally\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"distributionsOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gauge_controller\",\"outputs\":[{\"internalType\":\"contract IOrionGaugeController\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gauge_whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_middleman\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"last_time_gauge_paid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"nominateNewOwner\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recoverERC20\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_curator_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setCurator\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge_controller_address\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setGaugeController\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_is_middleman\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_is_active\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setGaugeState\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_timelock\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setTimelock\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"toggleDistributions\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static ORIONGAUGEORNREWARDSDISTRIBUTOR_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        98,
        0,
        0,
        17,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        0,
        19,
        0,
        56,
        3,
        128,
        98,
        0,
        19,
        0,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        98,
        0,
        0,
        52,
        145,
        98,
        0,
        1,
        111,
        86,
        91,
        132,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        98,
        0,
        0,
        144,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        25,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        101,
        114,
        32,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        32,
        99,
        97,
        110,
        110,
        111,
        116,
        32,
        98,
        101,
        32,
        48,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        129,
        23,
        130,
        85,
        96,
        64,
        128,
        81,
        146,
        131,
        82,
        96,
        32,
        131,
        1,
        145,
        144,
        145,
        82,
        127,
        181,
        50,
        7,
        59,
        56,
        200,
        49,
        69,
        227,
        229,
        19,
        83,
        119,
        160,
        139,
        249,
        170,
        181,
        91,
        192,
        253,
        124,
        17,
        121,
        205,
        79,
        185,
        149,
        210,
        165,
        21,
        156,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        96,
        1,
        96,
        2,
        129,
        144,
        85,
        96,
        6,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        144,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        150,
        135,
        22,
        23,
        144,
        145,
        85,
        96,
        5,
        128,
        84,
        130,
        22,
        150,
        134,
        22,
        150,
        144,
        150,
        23,
        144,
        149,
        85,
        96,
        3,
        128,
        84,
        134,
        22,
        147,
        133,
        22,
        147,
        144,
        147,
        23,
        144,
        146,
        85,
        96,
        4,
        128,
        84,
        144,
        148,
        22,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        145,
        85,
        96,
        10,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        145,
        23,
        144,
        85,
        80,
        98,
        0,
        1,
        223,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        98,
        0,
        1,
        106,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        98,
        0,
        1,
        136,
        87,
        96,
        0,
        128,
        253,
        91,
        98,
        0,
        1,
        147,
        134,
        98,
        0,
        1,
        82,
        86,
        91,
        148,
        80,
        98,
        0,
        1,
        163,
        96,
        32,
        135,
        1,
        98,
        0,
        1,
        82,
        86,
        91,
        147,
        80,
        98,
        0,
        1,
        179,
        96,
        64,
        135,
        1,
        98,
        0,
        1,
        82,
        86,
        91,
        146,
        80,
        98,
        0,
        1,
        195,
        96,
        96,
        135,
        1,
        98,
        0,
        1,
        82,
        86,
        91,
        145,
        80,
        98,
        0,
        1,
        211,
        96,
        128,
        135,
        1,
        98,
        0,
        1,
        82,
        86,
        91,
        144,
        80,
        146,
        149,
        80,
        146,
        149,
        144,
        147,
        80,
        86,
        91,
        97,
        17,
        17,
        128,
        98,
        0,
        1,
        239,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        1,
        43,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        121,
        186,
        80,
        151,
        17,
        97,
        0,
        173,
        87,
        128,
        99,
        201,
        32,
        115,
        193,
        17,
        97,
        0,
        113,
        87,
        128,
        99,
        201,
        32,
        115,
        193,
        20,
        97,
        2,
        163,
        87,
        128,
        99,
        216,
        185,
        160,
        24,
        20,
        97,
        2,
        182,
        87,
        128,
        99,
        220,
        102,
        99,
        199,
        20,
        97,
        2,
        201,
        87,
        128,
        99,
        232,
        30,
        23,
        198,
        20,
        97,
        2,
        220,
        87,
        128,
        99,
        233,
        9,
        86,
        207,
        20,
        97,
        2,
        252,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        121,
        186,
        80,
        151,
        20,
        97,
        2,
        65,
        87,
        128,
        99,
        137,
        128,
        241,
        31,
        20,
        97,
        2,
        73,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        2,
        92,
        87,
        128,
        99,
        157,
        24,
        228,
        176,
        20,
        97,
        2,
        111,
        87,
        128,
        99,
        189,
        172,
        179,
        3,
        20,
        97,
        2,
        144,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        48,
        93,
        109,
        95,
        17,
        97,
        0,
        244,
        87,
        128,
        99,
        48,
        93,
        109,
        95,
        20,
        97,
        1,
        197,
        87,
        128,
        99,
        83,
        164,
        123,
        183,
        20,
        97,
        1,
        205,
        87,
        128,
        99,
        87,
        11,
        30,
        153,
        20,
        97,
        1,
        248,
        87,
        128,
        99,
        103,
        138,
        34,
        38,
        20,
        97,
        2,
        11,
        87,
        128,
        99,
        108,
        168,
        28,
        28,
        20,
        97,
        2,
        30,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        98,
        145,
        210,
        184,
        20,
        97,
        1,
        48,
        87,
        128,
        99,
        9,
        33,
        147,
        171,
        20,
        97,
        1,
        69,
        87,
        128,
        99,
        22,
        39,
        84,
        12,
        20,
        97,
        1,
        114,
        87,
        128,
        99,
        31,
        138,
        126,
        223,
        20,
        97,
        1,
        133,
        87,
        128,
        99,
        47,
        211,
        123,
        8,
        20,
        97,
        1,
        162,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        67,
        97,
        1,
        62,
        54,
        96,
        4,
        97,
        15,
        19,
        86,
        91,
        97,
        3,
        15,
        86,
        91,
        0,
        91,
        97,
        1,
        88,
        97,
        1,
        83,
        54,
        96,
        4,
        97,
        15,
        19,
        86,
        91,
        97,
        3,
        121,
        86,
        91,
        96,
        64,
        128,
        81,
        146,
        131,
        82,
        96,
        32,
        131,
        1,
        145,
        144,
        145,
        82,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        67,
        97,
        1,
        128,
        54,
        96,
        4,
        97,
        15,
        19,
        86,
        91,
        97,
        7,
        182,
        86,
        91,
        96,
        10,
        84,
        97,
        1,
        146,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        105,
        86,
        91,
        97,
        1,
        146,
        97,
        1,
        176,
        54,
        96,
        4,
        97,
        15,
        19,
        86,
        91,
        96,
        7,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        1,
        67,
        97,
        8,
        124,
        86,
        91,
        96,
        1,
        84,
        97,
        1,
        224,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        105,
        86,
        91,
        97,
        1,
        67,
        97,
        2,
        6,
        54,
        96,
        4,
        97,
        15,
        63,
        86,
        91,
        97,
        9,
        77,
        86,
        91,
        96,
        3,
        84,
        97,
        1,
        224,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        1,
        146,
        97,
        2,
        44,
        54,
        96,
        4,
        97,
        15,
        19,
        86,
        91,
        96,
        8,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        1,
        67,
        97,
        10,
        11,
        86,
        91,
        97,
        1,
        67,
        97,
        2,
        87,
        54,
        96,
        4,
        97,
        15,
        136,
        86,
        91,
        97,
        10,
        245,
        86,
        91,
        96,
        0,
        84,
        97,
        1,
        224,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        2,
        130,
        97,
        2,
        125,
        54,
        96,
        4,
        97,
        15,
        19,
        86,
        91,
        97,
        11,
        146,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        105,
        86,
        91,
        97,
        1,
        67,
        97,
        2,
        158,
        54,
        96,
        4,
        97,
        15,
        19,
        86,
        91,
        97,
        12,
        138,
        86,
        91,
        96,
        6,
        84,
        97,
        1,
        224,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        4,
        84,
        97,
        1,
        224,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        5,
        84,
        97,
        1,
        224,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        2,
        130,
        97,
        2,
        234,
        54,
        96,
        4,
        97,
        15,
        19,
        86,
        91,
        96,
        9,
        96,
        32,
        82,
        96,
        0,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        1,
        67,
        97,
        3,
        10,
        54,
        96,
        4,
        97,
        15,
        19,
        86,
        91,
        97,
        12,
        235,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        3,
        50,
        87,
        80,
        96,
        5,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        3,
        87,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        78,
        144,
        97,
        15,
        178,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        4,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        10,
        84,
        96,
        0,
        144,
        129,
        144,
        96,
        255,
        22,
        21,
        21,
        96,
        1,
        20,
        97,
        3,
        205,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        21,
        96,
        36,
        130,
        1,
        82,
        116,
        34,
        52,
        185,
        186,
        57,
        52,
        177,
        58,
        186,
        52,
        183,
        183,
        57,
        144,
        48,
        185,
        50,
        144,
        55,
        179,
        51,
        96,
        89,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        78,
        86,
        91,
        97,
        3,
        213,
        97,
        13,
        76,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        7,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        4,
        53,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        21,
        96,
        36,
        130,
        1,
        82,
        116,
        17,
        216,
        93,
        89,
        217,
        72,
        27,
        155,
        221,
        8,
        29,
        218,
        26,
        93,
        25,
        91,
        26,
        92,
        221,
        25,
        89,
        96,
        90,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        78,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        9,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        144,
        129,
        144,
        3,
        97,
        4,
        95,
        87,
        96,
        1,
        146,
        80,
        97,
        4,
        169,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        9,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        98,
        9,
        58,
        128,
        144,
        97,
        4,
        136,
        144,
        66,
        144,
        97,
        13,
        163,
        86,
        91,
        97,
        4,
        146,
        145,
        144,
        97,
        15,
        247,
        86,
        91,
        146,
        80,
        130,
        96,
        0,
        3,
        97,
        4,
        169,
        87,
        96,
        0,
        128,
        146,
        80,
        146,
        80,
        80,
        97,
        7,
        167,
        86,
        91,
        96,
        0,
        145,
        80,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        6,
        159,
        87,
        96,
        0,
        129,
        96,
        0,
        3,
        97,
        5,
        65,
        87,
        96,
        4,
        128,
        84,
        96,
        64,
        81,
        99,
        100,
        114,
        238,
        225,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        137,
        129,
        22,
        147,
        130,
        1,
        147,
        144,
        147,
        82,
        66,
        96,
        36,
        130,
        1,
        82,
        145,
        22,
        144,
        99,
        100,
        114,
        238,
        225,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        5,
        22,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        58,
        145,
        144,
        97,
        16,
        25,
        86,
        91,
        144,
        80,
        97,
        5,
        218,
        86,
        91,
        96,
        4,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        211,
        7,
        140,
        148,
        135,
        97,
        5,
        106,
        97,
        5,
        99,
        134,
        98,
        9,
        58,
        128,
        97,
        16,
        50,
        86,
        91,
        66,
        144,
        97,
        13,
        163,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        96,
        224,
        133,
        144,
        27,
        22,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        5,
        179,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        5,
        215,
        145,
        144,
        97,
        16,
        25,
        86,
        91,
        144,
        80,
        91,
        96,
        0,
        97,
        6,
        111,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        6,
        105,
        132,
        96,
        4,
        96,
        0,
        144,
        84,
        144,
        97,
        1,
        0,
        10,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        10,
        59,
        231,
        87,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        6,
        63,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        6,
        99,
        145,
        144,
        97,
        16,
        25,
        86,
        91,
        144,
        97,
        13,
        184,
        86,
        91,
        144,
        97,
        13,
        196,
        86,
        91,
        144,
        80,
        97,
        6,
        136,
        97,
        6,
        129,
        130,
        98,
        9,
        58,
        128,
        97,
        13,
        184,
        86,
        91,
        134,
        144,
        97,
        13,
        208,
        86,
        91,
        148,
        80,
        80,
        80,
        128,
        128,
        97,
        6,
        151,
        144,
        97,
        16,
        73,
        86,
        91,
        145,
        80,
        80,
        97,
        4,
        176,
        86,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        9,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        66,
        144,
        85,
        96,
        8,
        144,
        145,
        82,
        144,
        32,
        84,
        96,
        255,
        22,
        21,
        97,
        7,
        75,
        87,
        96,
        3,
        84,
        96,
        64,
        81,
        99,
        9,
        94,
        167,
        179,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        96,
        36,
        130,
        1,
        133,
        144,
        82,
        144,
        145,
        22,
        144,
        99,
        9,
        94,
        167,
        179,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        7,
        33,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        7,
        69,
        145,
        144,
        97,
        16,
        98,
        86,
        91,
        80,
        97,
        7,
        98,
        86,
        91,
        96,
        3,
        84,
        97,
        7,
        98,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        132,
        97,
        13,
        220,
        86,
        91,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        227,
        73,
        24,
        255,
        28,
        112,
        132,
        151,
        0,
        104,
        181,
        63,
        215,
        26,
        214,
        216,
        176,
        78,
        159,
        21,
        211,
        136,
        108,
        191,
        0,
        100,
        67,
        230,
        205,
        197,
        46,
        166,
        131,
        96,
        64,
        81,
        97,
        7,
        157,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        91,
        97,
        7,
        177,
        96,
        1,
        96,
        2,
        85,
        86,
        91,
        145,
        80,
        145,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        8,
        40,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        47,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        110,
        108,
        121,
        32,
        116,
        104,
        101,
        32,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        109,
        97,
        121,
        32,
        112,
        101,
        114,
        102,
        96,
        68,
        130,
        1,
        82,
        110,
        55,
        185,
        54,
        144,
        58,
        52,
        52,
        185,
        144,
        48,
        177,
        186,
        52,
        183,
        183,
        96,
        137,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        78,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        144,
        106,
        28,
        107,
        215,
        227,
        9,
        30,
        168,
        102,
        147,
        221,
        2,
        154,
        131,
        28,
        25,
        4,
        156,
        231,
        127,
        29,
        206,
        44,
        224,
        186,
        177,
        202,
        203,
        171,
        206,
        34,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        8,
        159,
        87,
        80,
        96,
        6,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        128,
        97,
        8,
        180,
        87,
        80,
        96,
        5,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        9,
        0,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        78,
        111,
        116,
        32,
        111,
        119,
        110,
        101,
        114,
        44,
        32,
        99,
        117,
        114,
        97,
        116,
        111,
        114,
        44,
        32,
        111,
        114,
        32,
        116,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        78,
        86,
        91,
        96,
        10,
        128,
        84,
        96,
        255,
        128,
        130,
        22,
        21,
        96,
        255,
        25,
        144,
        146,
        22,
        130,
        23,
        144,
        146,
        85,
        96,
        64,
        81,
        145,
        22,
        21,
        21,
        129,
        82,
        127,
        164,
        126,
        35,
        99,
        112,
        228,
        120,
        185,
        209,
        99,
        9,
        140,
        124,
        31,
        79,
        103,
        182,
        239,
        187,
        102,
        131,
        238,
        176,
        166,
        105,
        240,
        79,
        48,
        38,
        83,
        119,
        157,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        9,
        112,
        87,
        80,
        96,
        5,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        9,
        140,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        78,
        144,
        97,
        15,
        178,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        8,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        135,
        21,
        21,
        96,
        255,
        25,
        145,
        130,
        22,
        129,
        23,
        144,
        146,
        85,
        96,
        7,
        132,
        82,
        147,
        130,
        144,
        32,
        128,
        84,
        135,
        21,
        21,
        149,
        22,
        133,
        23,
        144,
        85,
        129,
        81,
        148,
        133,
        82,
        145,
        132,
        1,
        145,
        144,
        145,
        82,
        130,
        1,
        82,
        127,
        64,
        79,
        34,
        217,
        59,
        86,
        167,
        231,
        55,
        19,
        215,
        187,
        229,
        67,
        176,
        22,
        8,
        77,
        77,
        117,
        180,
        217,
        23,
        126,
        139,
        138,
        178,
        81,
        246,
        232,
        119,
        208,
        144,
        96,
        96,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        10,
        131,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        53,
        96,
        36,
        130,
        1,
        82,
        127,
        89,
        111,
        117,
        32,
        109,
        117,
        115,
        116,
        32,
        98,
        101,
        32,
        110,
        111,
        109,
        105,
        110,
        97,
        116,
        101,
        100,
        32,
        98,
        101,
        102,
        111,
        114,
        101,
        32,
        121,
        111,
        117,
        96,
        68,
        130,
        1,
        82,
        116,
        2,
        6,
        54,
        22,
        226,
        6,
        22,
        54,
        54,
        87,
        7,
        66,
        6,
        247,
        118,
        230,
        87,
        39,
        54,
        134,
        151,
        96,
        92,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        78,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        84,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        132,
        22,
        129,
        82,
        146,
        144,
        145,
        22,
        96,
        32,
        131,
        1,
        82,
        127,
        181,
        50,
        7,
        59,
        56,
        200,
        49,
        69,
        227,
        229,
        19,
        83,
        119,
        160,
        139,
        249,
        170,
        181,
        91,
        192,
        253,
        124,
        17,
        121,
        205,
        79,
        185,
        149,
        210,
        165,
        21,
        156,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        1,
        128,
        84,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        144,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        23,
        144,
        145,
        85,
        22,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        11,
        24,
        87,
        80,
        96,
        5,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        11,
        52,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        78,
        144,
        97,
        15,
        178,
        86,
        91,
        96,
        0,
        84,
        97,
        11,
        76,
        144,
        131,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        97,
        13,
        220,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        129,
        82,
        96,
        32,
        129,
        1,
        131,
        144,
        82,
        127,
        85,
        53,
        6,
        16,
        254,
        87,
        9,
        109,
        140,
        15,
        250,
        48,
        190,
        237,
        233,
        135,
        50,
        107,
        204,
        252,
        176,
        180,
        65,
        88,
        4,
        22,
        77,
        13,
        213,
        12,
        232,
        177,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        86,
        91,
        96,
        4,
        128,
        84,
        96,
        64,
        81,
        99,
        52,
        193,
        227,
        37,
        96,
        226,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        147,
        130,
        1,
        147,
        144,
        147,
        82,
        66,
        96,
        36,
        130,
        1,
        82,
        96,
        0,
        146,
        131,
        146,
        22,
        144,
        99,
        211,
        7,
        140,
        148,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        11,
        232,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        12,
        12,
        145,
        144,
        97,
        16,
        25,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        12,
        115,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        97,
        6,
        105,
        132,
        96,
        4,
        96,
        0,
        144,
        84,
        144,
        97,
        1,
        0,
        10,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        10,
        59,
        231,
        87,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        6,
        63,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        144,
        80,
        97,
        12,
        130,
        129,
        98,
        9,
        58,
        128,
        97,
        13,
        184,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        12,
        173,
        87,
        80,
        96,
        5,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        12,
        201,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        78,
        144,
        97,
        15,
        178,
        86,
        91,
        96,
        5,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        128,
        97,
        13,
        14,
        87,
        80,
        96,
        5,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        91,
        97,
        13,
        42,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        78,
        144,
        97,
        15,
        178,
        86,
        91,
        96,
        6,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        2,
        128,
        84,
        3,
        97,
        13,
        157,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        78,
        86,
        91,
        96,
        2,
        128,
        85,
        86,
        91,
        96,
        0,
        97,
        13,
        175,
        130,
        132,
        97,
        16,
        134,
        86,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        13,
        175,
        130,
        132,
        97,
        16,
        50,
        86,
        91,
        96,
        0,
        97,
        13,
        175,
        130,
        132,
        97,
        15,
        247,
        86,
        91,
        96,
        0,
        97,
        13,
        175,
        130,
        132,
        97,
        16,
        153,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        129,
        22,
        96,
        36,
        131,
        1,
        82,
        96,
        68,
        128,
        131,
        1,
        133,
        144,
        82,
        131,
        81,
        128,
        132,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        100,
        144,
        146,
        1,
        131,
        82,
        96,
        32,
        130,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        23,
        144,
        82,
        145,
        81,
        96,
        0,
        146,
        131,
        146,
        144,
        135,
        22,
        145,
        97,
        14,
        56,
        145,
        144,
        97,
        16,
        172,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        134,
        90,
        241,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        14,
        117,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        14,
        122,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        128,
        21,
        97,
        14,
        164,
        87,
        80,
        128,
        81,
        21,
        128,
        97,
        14,
        164,
        87,
        80,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        14,
        164,
        145,
        144,
        97,
        16,
        98,
        86,
        91,
        97,
        14,
        240,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        84,
        114,
        97,
        110,
        115,
        102,
        101,
        114,
        72,
        101,
        108,
        112,
        101,
        114,
        58,
        32,
        84,
        82,
        65,
        78,
        83,
        70,
        69,
        82,
        95,
        70,
        65,
        73,
        76,
        69,
        68,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        78,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        15,
        14,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        15,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        13,
        175,
        130,
        97,
        14,
        247,
        86,
        91,
        128,
        21,
        21,
        129,
        20,
        97,
        15,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        15,
        84,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        15,
        93,
        132,
        97,
        14,
        247,
        86,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        97,
        15,
        109,
        129,
        97,
        15,
        46,
        86,
        91,
        145,
        80,
        96,
        64,
        132,
        1,
        53,
        97,
        15,
        125,
        129,
        97,
        15,
        46,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        15,
        155,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        15,
        164,
        131,
        97,
        14,
        247,
        86,
        91,
        148,
        96,
        32,
        147,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        96,
        21,
        144,
        130,
        1,
        82,
        116,
        78,
        111,
        116,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        111,
        114,
        32,
        116,
        105,
        109,
        101,
        108,
        111,
        99,
        107,
        96,
        88,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        130,
        97,
        16,
        20,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        16,
        43,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        13,
        178,
        87,
        97,
        13,
        178,
        97,
        15,
        225,
        86,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        16,
        91,
        87,
        97,
        16,
        91,
        97,
        15,
        225,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        16,
        116,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        16,
        127,
        129,
        97,
        15,
        46,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        97,
        13,
        178,
        87,
        97,
        13,
        178,
        97,
        15,
        225,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        13,
        178,
        87,
        97,
        13,
        178,
        97,
        15,
        225,
        86,
        91,
        96,
        0,
        130,
        81,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        16,
        205,
        87,
        96,
        32,
        129,
        134,
        1,
        129,
        1,
        81,
        133,
        131,
        1,
        82,
        1,
        97,
        16,
        179,
        86,
        91,
        80,
        96,
        0,
        146,
        1,
        145,
        130,
        82,
        80,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        135,
        73,
        150,
        210,
        218,
        116,
        98,
        76,
        161,
        186,
        156,
        30,
        170,
        132,
        156,
        62,
        70,
        136,
        160,
        138,
        176,
        8,
        196,
        68,
        93,
        154,
        209,
        216,
        225,
        28,
        252,
        30,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    lazy_static::lazy_static! {
            pub static ref ORIONGAUGEORNREWARDSDISTRIBUTOR_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from(
            __BYTECODE.to_vec(),
        );
    }
    pub struct OrionGaugeORNRewardsDistributor<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for OrionGaugeORNRewardsDistributor<M> {
        fn clone(&self) -> Self {
            OrionGaugeORNRewardsDistributor(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for OrionGaugeORNRewardsDistributor<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for OrionGaugeORNRewardsDistributor<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(OrionGaugeORNRewardsDistributor))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> OrionGaugeORNRewardsDistributor<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                ORIONGAUGEORNREWARDSDISTRIBUTOR_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                ORIONGAUGEORNREWARDSDISTRIBUTOR_ABI.clone(),
                ORIONGAUGEORNREWARDSDISTRIBUTOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `acceptOwnership` (0x79ba5097) function
        pub fn accept_ownership(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([121, 186, 80, 151], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `curator_address` (0xc92073c1) function
        pub fn curator_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([201, 32, 115, 193], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `currentReward` (0x9d18e4b0) function
        pub fn current_reward(
            &self,
            gauge_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([157, 24, 228, 176], gauge_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `distributeReward` (0x092193ab) function
        pub fn distribute_reward(
            &self,
            gauge_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (::ethers::core::types::U256, ::ethers::core::types::U256),
        > {
            self.0
                .method_hash([9, 33, 147, 171], gauge_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `distributionsOn` (0x1f8a7edf) function
        pub fn distributions_on(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([31, 138, 126, 223], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `gauge_controller` (0xd8b9a018) function
        pub fn gauge_controller(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([216, 185, 160, 24], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `gauge_whitelist` (0x2fd37b08) function
        pub fn gauge_whitelist(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([47, 211, 123, 8], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `is_middleman` (0x6ca81c1c) function
        pub fn is_middleman(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([108, 168, 28, 28], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `last_time_gauge_paid` (0xe81e17c6) function
        pub fn last_time_gauge_paid(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([232, 30, 23, 198], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `nominateNewOwner` (0x1627540c) function
        pub fn nominate_new_owner(
            &self,
            owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([22, 39, 84, 12], owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `nominatedOwner` (0x53a47bb7) function
        pub fn nominated_owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([83, 164, 123, 183], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `recoverERC20` (0x8980f11f) function
        pub fn recover_erc20(
            &self,
            token_address: ::ethers::core::types::Address,
            token_amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([137, 128, 241, 31], (token_address, token_amount))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `reward_token_address` (0x678a2226) function
        pub fn reward_token_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([103, 138, 34, 38], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setCurator` (0xe90956cf) function
        pub fn set_curator(
            &self,
            new_curator_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 9, 86, 207], new_curator_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setGaugeController` (0x0091d2b8) function
        pub fn set_gauge_controller(
            &self,
            gauge_controller_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([0, 145, 210, 184], gauge_controller_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setGaugeState` (0x570b1e99) function
        pub fn set_gauge_state(
            &self,
            gauge_address: ::ethers::core::types::Address,
            is_middleman: bool,
            is_active: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([87, 11, 30, 153], (gauge_address, is_middleman, is_active))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setTimelock` (0xbdacb303) function
        pub fn set_timelock(
            &self,
            new_timelock: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([189, 172, 179, 3], new_timelock)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `timelock_address` (0xdc6663c7) function
        pub fn timelock_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([220, 102, 99, 199], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `toggleDistributions` (0x305d6d5f) function
        pub fn toggle_distributions(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([48, 93, 109, 95], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `DistributionsToggled` event
        pub fn distributions_toggled_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, DistributionsToggledFilter> {
            self.0.event()
        }
        ///Gets the contract's `GaugeStateChanged` event
        pub fn gauge_state_changed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, GaugeStateChangedFilter> {
            self.0.event()
        }
        ///Gets the contract's `OwnerChanged` event
        pub fn owner_changed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnerChangedFilter> {
            self.0.event()
        }
        ///Gets the contract's `OwnerNominated` event
        pub fn owner_nominated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnerNominatedFilter> {
            self.0.event()
        }
        ///Gets the contract's `RecoveredERC20` event
        pub fn recovered_erc20_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RecoveredERC20Filter> {
            self.0.event()
        }
        ///Gets the contract's `RewardDistributed` event
        pub fn reward_distributed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RewardDistributedFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OrionGaugeORNRewardsDistributorEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for OrionGaugeORNRewardsDistributor<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "DistributionsToggled", abi = "DistributionsToggled(bool)")]
    pub struct DistributionsToggledFilter {
        pub distibutions_state: bool,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "GaugeStateChanged",
        abi = "GaugeStateChanged(address,bool,bool)"
    )]
    pub struct GaugeStateChangedFilter {
        pub gauge_address: ::ethers::core::types::Address,
        pub is_middleman: bool,
        pub is_active: bool,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "OwnerChanged", abi = "OwnerChanged(address,address)")]
    pub struct OwnerChangedFilter {
        pub old_owner: ::ethers::core::types::Address,
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "OwnerNominated", abi = "OwnerNominated(address)")]
    pub struct OwnerNominatedFilter {
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "RecoveredERC20", abi = "RecoveredERC20(address,uint256)")]
    pub struct RecoveredERC20Filter {
        pub token: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethevent(name = "RewardDistributed", abi = "RewardDistributed(address,uint256)")]
    pub struct RewardDistributedFilter {
        #[ethevent(indexed)]
        pub gauge_address: ::ethers::core::types::Address,
        pub reward_amount: ::ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum OrionGaugeORNRewardsDistributorEvents {
        DistributionsToggledFilter(DistributionsToggledFilter),
        GaugeStateChangedFilter(GaugeStateChangedFilter),
        OwnerChangedFilter(OwnerChangedFilter),
        OwnerNominatedFilter(OwnerNominatedFilter),
        RecoveredERC20Filter(RecoveredERC20Filter),
        RewardDistributedFilter(RewardDistributedFilter),
    }
    impl ::ethers::contract::EthLogDecode for OrionGaugeORNRewardsDistributorEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = DistributionsToggledFilter::decode_log(log) {
                return Ok(
                    OrionGaugeORNRewardsDistributorEvents::DistributionsToggledFilter(decoded),
                );
            }
            if let Ok(decoded) = GaugeStateChangedFilter::decode_log(log) {
                return Ok(OrionGaugeORNRewardsDistributorEvents::GaugeStateChangedFilter(decoded));
            }
            if let Ok(decoded) = OwnerChangedFilter::decode_log(log) {
                return Ok(OrionGaugeORNRewardsDistributorEvents::OwnerChangedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = OwnerNominatedFilter::decode_log(log) {
                return Ok(OrionGaugeORNRewardsDistributorEvents::OwnerNominatedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = RecoveredERC20Filter::decode_log(log) {
                return Ok(OrionGaugeORNRewardsDistributorEvents::RecoveredERC20Filter(
                    decoded,
                ));
            }
            if let Ok(decoded) = RewardDistributedFilter::decode_log(log) {
                return Ok(OrionGaugeORNRewardsDistributorEvents::RewardDistributedFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for OrionGaugeORNRewardsDistributorEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OrionGaugeORNRewardsDistributorEvents::DistributionsToggledFilter(element) => {
                    element.fmt(f)
                }
                OrionGaugeORNRewardsDistributorEvents::GaugeStateChangedFilter(element) => {
                    element.fmt(f)
                }
                OrionGaugeORNRewardsDistributorEvents::OwnerChangedFilter(element) => {
                    element.fmt(f)
                }
                OrionGaugeORNRewardsDistributorEvents::OwnerNominatedFilter(element) => {
                    element.fmt(f)
                }
                OrionGaugeORNRewardsDistributorEvents::RecoveredERC20Filter(element) => {
                    element.fmt(f)
                }
                OrionGaugeORNRewardsDistributorEvents::RewardDistributedFilter(element) => {
                    element.fmt(f)
                }
            }
        }
    }
    ///Container type for all input parameters for the `acceptOwnership` function with signature `acceptOwnership()` and selector `0x79ba5097`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "acceptOwnership", abi = "acceptOwnership()")]
    pub struct AcceptOwnershipCall;
    ///Container type for all input parameters for the `curator_address` function with signature `curator_address()` and selector `0xc92073c1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "curator_address", abi = "curator_address()")]
    pub struct CuratorAddressCall;
    ///Container type for all input parameters for the `currentReward` function with signature `currentReward(address)` and selector `0x9d18e4b0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "currentReward", abi = "currentReward(address)")]
    pub struct CurrentRewardCall {
        pub gauge_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `distributeReward` function with signature `distributeReward(address)` and selector `0x092193ab`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "distributeReward", abi = "distributeReward(address)")]
    pub struct DistributeRewardCall {
        pub gauge_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `distributionsOn` function with signature `distributionsOn()` and selector `0x1f8a7edf`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "distributionsOn", abi = "distributionsOn()")]
    pub struct DistributionsOnCall;
    ///Container type for all input parameters for the `gauge_controller` function with signature `gauge_controller()` and selector `0xd8b9a018`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "gauge_controller", abi = "gauge_controller()")]
    pub struct GaugeControllerCall;
    ///Container type for all input parameters for the `gauge_whitelist` function with signature `gauge_whitelist(address)` and selector `0x2fd37b08`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "gauge_whitelist", abi = "gauge_whitelist(address)")]
    pub struct GaugeWhitelistCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `is_middleman` function with signature `is_middleman(address)` and selector `0x6ca81c1c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "is_middleman", abi = "is_middleman(address)")]
    pub struct IsMiddlemanCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `last_time_gauge_paid` function with signature `last_time_gauge_paid(address)` and selector `0xe81e17c6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "last_time_gauge_paid", abi = "last_time_gauge_paid(address)")]
    pub struct LastTimeGaugePaidCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `nominateNewOwner` function with signature `nominateNewOwner(address)` and selector `0x1627540c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "nominateNewOwner", abi = "nominateNewOwner(address)")]
    pub struct NominateNewOwnerCall {
        pub owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `nominatedOwner` function with signature `nominatedOwner()` and selector `0x53a47bb7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "nominatedOwner", abi = "nominatedOwner()")]
    pub struct NominatedOwnerCall;
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `recoverERC20` function with signature `recoverERC20(address,uint256)` and selector `0x8980f11f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "recoverERC20", abi = "recoverERC20(address,uint256)")]
    pub struct RecoverERC20Call {
        pub token_address: ::ethers::core::types::Address,
        pub token_amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `reward_token_address` function with signature `reward_token_address()` and selector `0x678a2226`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "reward_token_address", abi = "reward_token_address()")]
    pub struct RewardTokenAddressCall;
    ///Container type for all input parameters for the `setCurator` function with signature `setCurator(address)` and selector `0xe90956cf`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setCurator", abi = "setCurator(address)")]
    pub struct SetCuratorCall {
        pub new_curator_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `setGaugeController` function with signature `setGaugeController(address)` and selector `0x0091d2b8`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setGaugeController", abi = "setGaugeController(address)")]
    pub struct SetGaugeControllerCall {
        pub gauge_controller_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `setGaugeState` function with signature `setGaugeState(address,bool,bool)` and selector `0x570b1e99`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setGaugeState", abi = "setGaugeState(address,bool,bool)")]
    pub struct SetGaugeStateCall {
        pub gauge_address: ::ethers::core::types::Address,
        pub is_middleman: bool,
        pub is_active: bool,
    }
    ///Container type for all input parameters for the `setTimelock` function with signature `setTimelock(address)` and selector `0xbdacb303`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "setTimelock", abi = "setTimelock(address)")]
    pub struct SetTimelockCall {
        pub new_timelock: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `timelock_address` function with signature `timelock_address()` and selector `0xdc6663c7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "timelock_address", abi = "timelock_address()")]
    pub struct TimelockAddressCall;
    ///Container type for all input parameters for the `toggleDistributions` function with signature `toggleDistributions()` and selector `0x305d6d5f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "toggleDistributions", abi = "toggleDistributions()")]
    pub struct ToggleDistributionsCall;
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum OrionGaugeORNRewardsDistributorCalls {
        AcceptOwnership(AcceptOwnershipCall),
        CuratorAddress(CuratorAddressCall),
        CurrentReward(CurrentRewardCall),
        DistributeReward(DistributeRewardCall),
        DistributionsOn(DistributionsOnCall),
        GaugeController(GaugeControllerCall),
        GaugeWhitelist(GaugeWhitelistCall),
        IsMiddleman(IsMiddlemanCall),
        LastTimeGaugePaid(LastTimeGaugePaidCall),
        NominateNewOwner(NominateNewOwnerCall),
        NominatedOwner(NominatedOwnerCall),
        Owner(OwnerCall),
        RecoverERC20(RecoverERC20Call),
        RewardTokenAddress(RewardTokenAddressCall),
        SetCurator(SetCuratorCall),
        SetGaugeController(SetGaugeControllerCall),
        SetGaugeState(SetGaugeStateCall),
        SetTimelock(SetTimelockCall),
        TimelockAddress(TimelockAddressCall),
        ToggleDistributions(ToggleDistributionsCall),
    }
    impl ::ethers::core::abi::AbiDecode for OrionGaugeORNRewardsDistributorCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AcceptOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::AcceptOwnership(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <CuratorAddressCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::CuratorAddress(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <CurrentRewardCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::CurrentReward(decoded));
            }
            if let Ok(decoded) =
                <DistributeRewardCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::DistributeReward(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <DistributionsOnCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::DistributionsOn(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GaugeControllerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::GaugeController(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GaugeWhitelistCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::GaugeWhitelist(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <IsMiddlemanCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::IsMiddleman(decoded));
            }
            if let Ok(decoded) =
                <LastTimeGaugePaidCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::LastTimeGaugePaid(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <NominateNewOwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::NominateNewOwner(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <NominatedOwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::NominatedOwner(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::Owner(decoded));
            }
            if let Ok(decoded) =
                <RecoverERC20Call as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::RecoverERC20(decoded));
            }
            if let Ok(decoded) =
                <RewardTokenAddressCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::RewardTokenAddress(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <SetCuratorCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::SetCurator(decoded));
            }
            if let Ok(decoded) =
                <SetGaugeControllerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::SetGaugeController(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <SetGaugeStateCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::SetGaugeState(decoded));
            }
            if let Ok(decoded) =
                <SetTimelockCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::SetTimelock(decoded));
            }
            if let Ok(decoded) =
                <TimelockAddressCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::TimelockAddress(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <ToggleDistributionsCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OrionGaugeORNRewardsDistributorCalls::ToggleDistributions(
                    decoded,
                ));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for OrionGaugeORNRewardsDistributorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                OrionGaugeORNRewardsDistributorCalls::AcceptOwnership(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::CuratorAddress(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::CurrentReward(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::DistributeReward(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::DistributionsOn(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::GaugeController(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::GaugeWhitelist(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::IsMiddleman(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::LastTimeGaugePaid(element) => {
                    element.encode()
                }
                OrionGaugeORNRewardsDistributorCalls::NominateNewOwner(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::NominatedOwner(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::Owner(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::RecoverERC20(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::RewardTokenAddress(element) => {
                    element.encode()
                }
                OrionGaugeORNRewardsDistributorCalls::SetCurator(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::SetGaugeController(element) => {
                    element.encode()
                }
                OrionGaugeORNRewardsDistributorCalls::SetGaugeState(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::SetTimelock(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::TimelockAddress(element) => element.encode(),
                OrionGaugeORNRewardsDistributorCalls::ToggleDistributions(element) => {
                    element.encode()
                }
            }
        }
    }
    impl ::std::fmt::Display for OrionGaugeORNRewardsDistributorCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OrionGaugeORNRewardsDistributorCalls::AcceptOwnership(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::CuratorAddress(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::CurrentReward(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::DistributeReward(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::DistributionsOn(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::GaugeController(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::GaugeWhitelist(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::IsMiddleman(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::LastTimeGaugePaid(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::NominateNewOwner(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::NominatedOwner(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::Owner(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::RecoverERC20(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::RewardTokenAddress(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::SetCurator(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::SetGaugeController(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::SetGaugeState(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::SetTimelock(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::TimelockAddress(element) => element.fmt(f),
                OrionGaugeORNRewardsDistributorCalls::ToggleDistributions(element) => {
                    element.fmt(f)
                }
            }
        }
    }
    impl ::std::convert::From<AcceptOwnershipCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: AcceptOwnershipCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::AcceptOwnership(var)
        }
    }
    impl ::std::convert::From<CuratorAddressCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: CuratorAddressCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::CuratorAddress(var)
        }
    }
    impl ::std::convert::From<CurrentRewardCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: CurrentRewardCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::CurrentReward(var)
        }
    }
    impl ::std::convert::From<DistributeRewardCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: DistributeRewardCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::DistributeReward(var)
        }
    }
    impl ::std::convert::From<DistributionsOnCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: DistributionsOnCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::DistributionsOn(var)
        }
    }
    impl ::std::convert::From<GaugeControllerCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: GaugeControllerCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::GaugeController(var)
        }
    }
    impl ::std::convert::From<GaugeWhitelistCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: GaugeWhitelistCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::GaugeWhitelist(var)
        }
    }
    impl ::std::convert::From<IsMiddlemanCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: IsMiddlemanCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::IsMiddleman(var)
        }
    }
    impl ::std::convert::From<LastTimeGaugePaidCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: LastTimeGaugePaidCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::LastTimeGaugePaid(var)
        }
    }
    impl ::std::convert::From<NominateNewOwnerCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: NominateNewOwnerCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::NominateNewOwner(var)
        }
    }
    impl ::std::convert::From<NominatedOwnerCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: NominatedOwnerCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::NominatedOwner(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: OwnerCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::Owner(var)
        }
    }
    impl ::std::convert::From<RecoverERC20Call> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: RecoverERC20Call) -> Self {
            OrionGaugeORNRewardsDistributorCalls::RecoverERC20(var)
        }
    }
    impl ::std::convert::From<RewardTokenAddressCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: RewardTokenAddressCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::RewardTokenAddress(var)
        }
    }
    impl ::std::convert::From<SetCuratorCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: SetCuratorCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::SetCurator(var)
        }
    }
    impl ::std::convert::From<SetGaugeControllerCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: SetGaugeControllerCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::SetGaugeController(var)
        }
    }
    impl ::std::convert::From<SetGaugeStateCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: SetGaugeStateCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::SetGaugeState(var)
        }
    }
    impl ::std::convert::From<SetTimelockCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: SetTimelockCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::SetTimelock(var)
        }
    }
    impl ::std::convert::From<TimelockAddressCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: TimelockAddressCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::TimelockAddress(var)
        }
    }
    impl ::std::convert::From<ToggleDistributionsCall> for OrionGaugeORNRewardsDistributorCalls {
        fn from(var: ToggleDistributionsCall) -> Self {
            OrionGaugeORNRewardsDistributorCalls::ToggleDistributions(var)
        }
    }
    ///Container type for all return fields from the `curator_address` function with signature `curator_address()` and selector `0xc92073c1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct CuratorAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `currentReward` function with signature `currentReward(address)` and selector `0x9d18e4b0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct CurrentRewardReturn {
        pub reward_amount: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `distributeReward` function with signature `distributeReward(address)` and selector `0x092193ab`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct DistributeRewardReturn {
        pub weeks_elapsed: ::ethers::core::types::U256,
        pub reward_tally: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `distributionsOn` function with signature `distributionsOn()` and selector `0x1f8a7edf`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct DistributionsOnReturn(pub bool);
    ///Container type for all return fields from the `gauge_controller` function with signature `gauge_controller()` and selector `0xd8b9a018`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GaugeControllerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `gauge_whitelist` function with signature `gauge_whitelist(address)` and selector `0x2fd37b08`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GaugeWhitelistReturn(pub bool);
    ///Container type for all return fields from the `is_middleman` function with signature `is_middleman(address)` and selector `0x6ca81c1c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct IsMiddlemanReturn(pub bool);
    ///Container type for all return fields from the `last_time_gauge_paid` function with signature `last_time_gauge_paid(address)` and selector `0xe81e17c6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LastTimeGaugePaidReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `nominatedOwner` function with signature `nominatedOwner()` and selector `0x53a47bb7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct NominatedOwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `reward_token_address` function with signature `reward_token_address()` and selector `0x678a2226`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct RewardTokenAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `timelock_address` function with signature `timelock_address()` and selector `0xdc6663c7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct TimelockAddressReturn(pub ::ethers::core::types::Address);
}
