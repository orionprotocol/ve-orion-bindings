pub use lp_token_wrapper::*;
#[allow(
    clippy::too_many_arguments,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
pub mod lp_token_wrapper {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!LPTokenWrapper was auto-generated with ethers-rs Abigen. More information at: <https://github.com/gakonst/ethers-rs>
    use ::ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ::ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ::ethers::providers::Middleware;
    use std::sync::Arc;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stake\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"uni\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static LPTOKENWRAPPER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        6,
        54,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        87,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        24,
        22,
        13,
        221,
        20,
        97,
        0,
        92,
        87,
        128,
        99,
        46,
        26,
        125,
        77,
        20,
        97,
        0,
        118,
        87,
        128,
        99,
        112,
        160,
        130,
        49,
        20,
        97,
        0,
        149,
        87,
        128,
        99,
        166,
        148,
        252,
        58,
        20,
        97,
        0,
        187,
        87,
        128,
        99,
        237,
        201,
        175,
        149,
        20,
        97,
        0,
        216,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        100,
        97,
        0,
        252,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        147,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        1,
        2,
        86,
        91,
        0,
        91,
        97,
        0,
        100,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        171,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        1,
        102,
        86,
        91,
        97,
        0,
        147,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        209,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        1,
        129,
        86,
        91,
        97,
        0,
        224,
        97,
        1,
        227,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        96,
        1,
        84,
        144,
        86,
        91,
        96,
        1,
        84,
        97,
        1,
        21,
        144,
        130,
        99,
        255,
        255,
        255,
        255,
        97,
        1,
        242,
        22,
        86,
        91,
        96,
        1,
        85,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        97,
        1,
        56,
        144,
        130,
        99,
        255,
        255,
        255,
        255,
        97,
        1,
        242,
        22,
        86,
        91,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        146,
        144,
        146,
        85,
        144,
        84,
        97,
        1,
        99,
        145,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        131,
        97,
        2,
        59,
        86,
        91,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        144,
        86,
        91,
        96,
        1,
        84,
        97,
        1,
        148,
        144,
        130,
        99,
        255,
        255,
        255,
        255,
        97,
        2,
        146,
        22,
        86,
        91,
        96,
        1,
        85,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        97,
        1,
        183,
        144,
        130,
        99,
        255,
        255,
        255,
        255,
        97,
        2,
        146,
        22,
        86,
        91,
        51,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        146,
        144,
        146,
        85,
        144,
        84,
        97,
        1,
        99,
        145,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        48,
        132,
        97,
        2,
        236,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        0,
        97,
        2,
        52,
        131,
        131,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        30,
        129,
        82,
        96,
        32,
        1,
        127,
        83,
        97,
        102,
        101,
        77,
        97,
        116,
        104,
        58,
        32,
        115,
        117,
        98,
        116,
        114,
        97,
        99,
        116,
        105,
        111,
        110,
        32,
        111,
        118,
        101,
        114,
        102,
        108,
        111,
        119,
        0,
        0,
        129,
        82,
        80,
        97,
        3,
        76,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        128,
        130,
        1,
        132,
        144,
        82,
        130,
        81,
        128,
        131,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        100,
        144,
        145,
        1,
        144,
        145,
        82,
        96,
        32,
        129,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        23,
        144,
        82,
        97,
        2,
        141,
        144,
        132,
        144,
        97,
        3,
        227,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        130,
        1,
        131,
        129,
        16,
        21,
        97,
        2,
        52,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        27,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        77,
        97,
        116,
        104,
        58,
        32,
        97,
        100,
        100,
        105,
        116,
        105,
        111,
        110,
        32,
        111,
        118,
        101,
        114,
        102,
        108,
        111,
        119,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        129,
        22,
        96,
        36,
        131,
        1,
        82,
        132,
        22,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        128,
        130,
        1,
        132,
        144,
        82,
        130,
        81,
        128,
        131,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        132,
        144,
        145,
        1,
        144,
        145,
        82,
        96,
        32,
        129,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        23,
        144,
        82,
        97,
        3,
        70,
        144,
        133,
        144,
        97,
        3,
        227,
        86,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        132,
        132,
        17,
        21,
        97,
        3,
        219,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        128,
        128,
        96,
        32,
        1,
        130,
        129,
        3,
        130,
        82,
        131,
        129,
        129,
        81,
        129,
        82,
        96,
        32,
        1,
        145,
        80,
        128,
        81,
        144,
        96,
        32,
        1,
        144,
        128,
        131,
        131,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        3,
        160,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        3,
        136,
        86,
        91,
        80,
        80,
        80,
        80,
        144,
        80,
        144,
        129,
        1,
        144,
        96,
        31,
        22,
        128,
        21,
        97,
        3,
        205,
        87,
        128,
        130,
        3,
        128,
        81,
        96,
        1,
        131,
        96,
        32,
        3,
        97,
        1,
        0,
        10,
        3,
        25,
        22,
        129,
        82,
        96,
        32,
        1,
        145,
        80,
        91,
        80,
        146,
        80,
        80,
        80,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        80,
        144,
        3,
        144,
        86,
        91,
        97,
        3,
        245,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        5,
        155,
        86,
        91,
        97,
        4,
        70,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        96,
        0,
        96,
        96,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        96,
        64,
        81,
        128,
        130,
        128,
        81,
        144,
        96,
        32,
        1,
        144,
        128,
        131,
        131,
        91,
        96,
        32,
        131,
        16,
        97,
        4,
        132,
        87,
        128,
        81,
        130,
        82,
        96,
        31,
        25,
        144,
        146,
        1,
        145,
        96,
        32,
        145,
        130,
        1,
        145,
        1,
        97,
        4,
        101,
        86,
        91,
        96,
        1,
        131,
        96,
        32,
        3,
        97,
        1,
        0,
        10,
        3,
        128,
        25,
        130,
        81,
        22,
        129,
        132,
        81,
        22,
        128,
        130,
        23,
        133,
        82,
        80,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        1,
        145,
        80,
        80,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        134,
        90,
        241,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        4,
        230,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        4,
        235,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        97,
        5,
        66,
        87,
        96,
        64,
        128,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        96,
        68,
        130,
        1,
        82,
        144,
        81,
        144,
        129,
        144,
        3,
        96,
        100,
        1,
        144,
        253,
        91,
        128,
        81,
        21,
        97,
        3,
        70,
        87,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        96,
        32,
        129,
        16,
        21,
        97,
        5,
        94,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        97,
        3,
        70,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        128,
        128,
        96,
        32,
        1,
        130,
        129,
        3,
        130,
        82,
        96,
        42,
        129,
        82,
        96,
        32,
        1,
        128,
        97,
        5,
        216,
        96,
        42,
        145,
        57,
        96,
        64,
        1,
        145,
        80,
        80,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        129,
        63,
        127,
        197,
        210,
        70,
        1,
        134,
        247,
        35,
        60,
        146,
        126,
        125,
        178,
        220,
        199,
        3,
        192,
        229,
        0,
        182,
        83,
        202,
        130,
        39,
        59,
        123,
        250,
        216,
        4,
        93,
        133,
        164,
        112,
        129,
        21,
        128,
        21,
        144,
        97,
        5,
        207,
        87,
        80,
        128,
        130,
        20,
        21,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        254,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        69,
        82,
        67,
        50,
        48,
        32,
        111,
        112,
        101,
        114,
        97,
        116,
        105,
        111,
        110,
        32,
        100,
        105,
        100,
        32,
        110,
        111,
        116,
        32,
        115,
        117,
        99,
        99,
        101,
        101,
        100,
        162,
        101,
        98,
        122,
        122,
        114,
        49,
        88,
        32,
        92,
        167,
        64,
        175,
        249,
        89,
        155,
        32,
        32,
        14,
        124,
        150,
        163,
        253,
        61,
        78,
        68,
        24,
        196,
        49,
        216,
        42,
        217,
        71,
        37,
        9,
        78,
        30,
        146,
        218,
        141,
        142,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        5,
        17,
        0,
        50,
    ];
    ///The bytecode of the contract.
    lazy_static::lazy_static! {
            pub static ref LPTOKENWRAPPER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from(
            __BYTECODE.to_vec(),
        );
    }
    pub struct LPTokenWrapper<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for LPTokenWrapper<M> {
        fn clone(&self) -> Self {
            LPTokenWrapper(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for LPTokenWrapper<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for LPTokenWrapper<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(LPTokenWrapper))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> LPTokenWrapper<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                LPTOKENWRAPPER_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                LPTOKENWRAPPER_ABI.clone(),
                LPTOKENWRAPPER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `balanceOf` (0x70a08231) function
        pub fn balance_of(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([112, 160, 130, 49], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `stake` (0xa694fc3a) function
        pub fn stake(
            &self,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([166, 148, 252, 58], amount)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalSupply` (0x18160ddd) function
        pub fn total_supply(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([24, 22, 13, 221], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `uni` (0xedc9af95) function
        pub fn uni(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([237, 201, 175, 149], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `withdraw` (0x2e1a7d4d) function
        pub fn withdraw(
            &self,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([46, 26, 125, 77], amount)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for LPTokenWrapper<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `balanceOf` function with signature `balanceOf(address)` and selector `0x70a08231`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "balanceOf", abi = "balanceOf(address)")]
    pub struct BalanceOfCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `stake` function with signature `stake(uint256)` and selector `0xa694fc3a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "stake", abi = "stake(uint256)")]
    pub struct StakeCall {
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `totalSupply` function with signature `totalSupply()` and selector `0x18160ddd`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "totalSupply", abi = "totalSupply()")]
    pub struct TotalSupplyCall;
    ///Container type for all input parameters for the `uni` function with signature `uni()` and selector `0xedc9af95`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "uni", abi = "uni()")]
    pub struct UniCall;
    ///Container type for all input parameters for the `withdraw` function with signature `withdraw(uint256)` and selector `0x2e1a7d4d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "withdraw", abi = "withdraw(uint256)")]
    pub struct WithdrawCall {
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum LPTokenWrapperCalls {
        BalanceOf(BalanceOfCall),
        Stake(StakeCall),
        TotalSupply(TotalSupplyCall),
        Uni(UniCall),
        Withdraw(WithdrawCall),
    }
    impl ::ethers::core::abi::AbiDecode for LPTokenWrapperCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <BalanceOfCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LPTokenWrapperCalls::BalanceOf(decoded));
            }
            if let Ok(decoded) =
                <StakeCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LPTokenWrapperCalls::Stake(decoded));
            }
            if let Ok(decoded) =
                <TotalSupplyCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LPTokenWrapperCalls::TotalSupply(decoded));
            }
            if let Ok(decoded) = <UniCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LPTokenWrapperCalls::Uni(decoded));
            }
            if let Ok(decoded) =
                <WithdrawCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LPTokenWrapperCalls::Withdraw(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for LPTokenWrapperCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                LPTokenWrapperCalls::BalanceOf(element) => element.encode(),
                LPTokenWrapperCalls::Stake(element) => element.encode(),
                LPTokenWrapperCalls::TotalSupply(element) => element.encode(),
                LPTokenWrapperCalls::Uni(element) => element.encode(),
                LPTokenWrapperCalls::Withdraw(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for LPTokenWrapperCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                LPTokenWrapperCalls::BalanceOf(element) => element.fmt(f),
                LPTokenWrapperCalls::Stake(element) => element.fmt(f),
                LPTokenWrapperCalls::TotalSupply(element) => element.fmt(f),
                LPTokenWrapperCalls::Uni(element) => element.fmt(f),
                LPTokenWrapperCalls::Withdraw(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<BalanceOfCall> for LPTokenWrapperCalls {
        fn from(var: BalanceOfCall) -> Self {
            LPTokenWrapperCalls::BalanceOf(var)
        }
    }
    impl ::std::convert::From<StakeCall> for LPTokenWrapperCalls {
        fn from(var: StakeCall) -> Self {
            LPTokenWrapperCalls::Stake(var)
        }
    }
    impl ::std::convert::From<TotalSupplyCall> for LPTokenWrapperCalls {
        fn from(var: TotalSupplyCall) -> Self {
            LPTokenWrapperCalls::TotalSupply(var)
        }
    }
    impl ::std::convert::From<UniCall> for LPTokenWrapperCalls {
        fn from(var: UniCall) -> Self {
            LPTokenWrapperCalls::Uni(var)
        }
    }
    impl ::std::convert::From<WithdrawCall> for LPTokenWrapperCalls {
        fn from(var: WithdrawCall) -> Self {
            LPTokenWrapperCalls::Withdraw(var)
        }
    }
    ///Container type for all return fields from the `balanceOf` function with signature `balanceOf(address)` and selector `0x70a08231`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct BalanceOfReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `totalSupply` function with signature `totalSupply()` and selector `0x18160ddd`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct TotalSupplyReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `uni` function with signature `uni()` and selector `0xedc9af95`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct UniReturn(pub ::ethers::core::types::Address);
}
