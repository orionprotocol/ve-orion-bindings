pub use lib_validator::*;
#[allow(
    clippy::too_many_arguments,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
pub mod lib_validator {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!LibValidator was auto-generated with ethers-rs Abigen. More information at: <https://github.com/gakonst/ethers-rs>
    use ::ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ::ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ::ethers::providers::Middleware;
    use std::sync::Arc;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_SALT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"LIQUIDATION_INFO_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct LibValidator.LiquidationOrder\",\"name\":\"liquidationOrder\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"accountToLiquidate\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"instrumentAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"int112\",\"name\":\"position\",\"type\":\"int112\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"checkLiquidationOrder\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"struct LibValidator.Order\",\"name\":\"buyOrder\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"instrumentAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[]}]},{\"internalType\":\"struct LibValidator.Order\",\"name\":\"sellOrder\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"instrumentAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[]}]},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"filledPrice\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"allowedMatcher\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"checkOrdersInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct LibValidator.Order\",\"name\":\"_order\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"instrumentAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getEthSignedOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"instrumentAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"validatePersonal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"instrumentAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"validateV3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static LIBVALIDATOR_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        97,
        22,
        220,
        97,
        0,
        58,
        96,
        11,
        130,
        130,
        130,
        57,
        128,
        81,
        96,
        0,
        26,
        96,
        115,
        20,
        97,
        0,
        45,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        0,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        48,
        96,
        0,
        82,
        96,
        115,
        129,
        83,
        130,
        129,
        243,
        254,
        115,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        48,
        20,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        217,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        172,
        184,
        204,
        73,
        17,
        97,
        0,
        150,
        87,
        128,
        99,
        201,
        86,
        163,
        183,
        17,
        97,
        0,
        112,
        87,
        128,
        99,
        201,
        86,
        163,
        183,
        20,
        97,
        1,
        182,
        87,
        128,
        99,
        231,
        230,
        82,
        237,
        20,
        97,
        1,
        201,
        87,
        128,
        99,
        232,
        29,
        23,
        233,
        20,
        97,
        1,
        220,
        87,
        128,
        99,
        249,
        115,
        162,
        9,
        20,
        97,
        1,
        241,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        172,
        184,
        204,
        73,
        20,
        97,
        1,
        123,
        87,
        128,
        99,
        176,
        114,
        183,
        117,
        20,
        97,
        1,
        155,
        87,
        128,
        99,
        199,
        151,
        123,
        231,
        20,
        97,
        1,
        174,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        14,
        88,
        235,
        101,
        20,
        97,
        0,
        222,
        87,
        128,
        99,
        27,
        156,
        13,
        74,
        20,
        97,
        0,
        249,
        87,
        128,
        99,
        54,
        68,
        229,
        21,
        20,
        97,
        1,
        28,
        87,
        128,
        99,
        109,
        132,
        90,
        168,
        20,
        97,
        1,
        36,
        87,
        128,
        99,
        121,
        111,
        7,
        123,
        20,
        97,
        1,
        57,
        87,
        128,
        99,
        133,
        225,
        244,
        208,
        20,
        97,
        1,
        115,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        230,
        97,
        1,
        249,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        12,
        97,
        1,
        7,
        54,
        96,
        4,
        97,
        17,
        196,
        86,
        91,
        97,
        2,
        33,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        240,
        86,
        91,
        97,
        0,
        230,
        97,
        2,
        94,
        86,
        91,
        97,
        0,
        230,
        96,
        0,
        128,
        81,
        96,
        32,
        97,
        22,
        135,
        131,
        57,
        129,
        81,
        145,
        82,
        129,
        86,
        91,
        97,
        1,
        102,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        14,
        129,
        82,
        96,
        32,
        1,
        109,
        79,
        114,
        105,
        111,
        110,
        32,
        69,
        120,
        99,
        104,
        97,
        110,
        103,
        101,
        96,
        144,
        27,
        129,
        82,
        80,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        240,
        145,
        144,
        97,
        18,
        0,
        86,
        91,
        97,
        0,
        230,
        96,
        1,
        129,
        86,
        91,
        97,
        1,
        102,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        1,
        129,
        82,
        96,
        32,
        1,
        96,
        49,
        96,
        248,
        27,
        129,
        82,
        80,
        129,
        86,
        91,
        97,
        0,
        230,
        97,
        1,
        169,
        54,
        96,
        4,
        97,
        17,
        196,
        86,
        91,
        97,
        3,
        58,
        86,
        91,
        97,
        0,
        230,
        97,
        3,
        166,
        86,
        91,
        97,
        1,
        12,
        97,
        1,
        196,
        54,
        96,
        4,
        97,
        18,
        85,
        86,
        91,
        97,
        3,
        181,
        86,
        91,
        97,
        1,
        12,
        97,
        1,
        215,
        54,
        96,
        4,
        97,
        17,
        196,
        86,
        91,
        97,
        8,
        37,
        86,
        91,
        97,
        1,
        239,
        97,
        1,
        234,
        54,
        96,
        4,
        97,
        18,
        246,
        86,
        91,
        97,
        9,
        122,
        86,
        91,
        0,
        91,
        97,
        0,
        230,
        97,
        11,
        93,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        8,
        144,
        97,
        19,
        191,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        129,
        86,
        91,
        96,
        0,
        128,
        97,
        2,
        45,
        131,
        97,
        3,
        58,
        86,
        91,
        131,
        81,
        97,
        1,
        64,
        133,
        1,
        81,
        145,
        146,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        97,
        2,
        77,
        144,
        131,
        144,
        97,
        11,
        108,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        109,
        144,
        97,
        20,
        90,
        86,
        91,
        96,
        64,
        128,
        81,
        128,
        131,
        3,
        96,
        31,
        25,
        1,
        129,
        82,
        130,
        130,
        82,
        128,
        81,
        96,
        32,
        145,
        130,
        1,
        32,
        131,
        131,
        1,
        131,
        82,
        96,
        14,
        132,
        82,
        109,
        79,
        114,
        105,
        111,
        110,
        32,
        69,
        120,
        99,
        104,
        97,
        110,
        103,
        101,
        96,
        144,
        27,
        147,
        130,
        1,
        147,
        144,
        147,
        82,
        129,
        81,
        128,
        131,
        1,
        131,
        82,
        96,
        1,
        128,
        130,
        82,
        96,
        49,
        96,
        248,
        27,
        145,
        131,
        1,
        145,
        144,
        145,
        82,
        130,
        81,
        145,
        130,
        1,
        147,
        144,
        147,
        82,
        127,
        171,
        237,
        113,
        234,
        36,
        69,
        161,
        60,
        153,
        228,
        228,
        175,
        166,
        43,
        112,
        142,
        154,
        175,
        108,
        209,
        48,
        65,
        186,
        134,
        72,
        46,
        108,
        191,
        131,
        251,
        196,
        207,
        145,
        129,
        1,
        145,
        144,
        145,
        82,
        127,
        200,
        158,
        253,
        170,
        84,
        192,
        242,
        12,
        122,
        223,
        97,
        40,
        130,
        223,
        9,
        80,
        245,
        169,
        81,
        99,
        126,
        3,
        7,
        205,
        203,
        76,
        103,
        47,
        41,
        139,
        139,
        198,
        96,
        96,
        130,
        1,
        82,
        96,
        128,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        0,
        128,
        81,
        96,
        32,
        97,
        22,
        135,
        131,
        57,
        129,
        81,
        145,
        82,
        96,
        160,
        130,
        1,
        82,
        96,
        192,
        1,
        97,
        2,
        8,
        86,
        91,
        96,
        0,
        97,
        3,
        160,
        130,
        96,
        0,
        1,
        81,
        131,
        96,
        32,
        1,
        81,
        132,
        96,
        64,
        1,
        81,
        133,
        96,
        96,
        1,
        81,
        134,
        96,
        128,
        1,
        81,
        135,
        96,
        160,
        1,
        81,
        136,
        96,
        192,
        1,
        81,
        137,
        96,
        224,
        1,
        81,
        138,
        97,
        1,
        0,
        1,
        81,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        3,
        133,
        153,
        152,
        151,
        150,
        149,
        148,
        147,
        146,
        145,
        144,
        97,
        20,
        183,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        97,
        11,
        144,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        8,
        144,
        97,
        20,
        90,
        86,
        91,
        96,
        0,
        135,
        97,
        1,
        32,
        1,
        81,
        97,
        4,
        6,
        87,
        97,
        3,
        202,
        136,
        97,
        8,
        37,
        86,
        91,
        97,
        4,
        1,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        34,
        153,
        33,
        96,
        233,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        4,
        68,
        86,
        91,
        97,
        4,
        15,
        136,
        97,
        2,
        33,
        86,
        91,
        97,
        4,
        68,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        248,
        144,
        96,
        32,
        128,
        130,
        82,
        96,
        4,
        144,
        130,
        1,
        82,
        99,
        4,
        83,
        36,
        37,
        96,
        228,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        91,
        134,
        97,
        1,
        32,
        1,
        81,
        97,
        4,
        142,
        87,
        97,
        4,
        87,
        135,
        97,
        8,
        37,
        86,
        91,
        97,
        4,
        137,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        69,
        50,
        83,
        96,
        232,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        97,
        4,
        204,
        86,
        91,
        97,
        4,
        151,
        135,
        97,
        2,
        33,
        86,
        91,
        97,
        4,
        204,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        248,
        144,
        96,
        32,
        128,
        130,
        82,
        96,
        4,
        144,
        130,
        1,
        82,
        99,
        4,
        83,
        37,
        53,
        96,
        228,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        91,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        136,
        96,
        32,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        128,
        21,
        97,
        5,
        6,
        87,
        80,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        135,
        96,
        32,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        91,
        97,
        5,
        56,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        69,
        51,
        77,
        96,
        232,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        96,
        224,
        136,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        48,
        20,
        97,
        5,
        122,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        36,
        164,
        161,
        96,
        233,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        96,
        224,
        135,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        48,
        20,
        97,
        5,
        188,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        73,
        73,
        83,
        96,
        232,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        21,
        97,
        6,
        25,
        87,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        136,
        96,
        32,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        6,
        25,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        248,
        144,
        96,
        32,
        128,
        130,
        82,
        96,
        4,
        144,
        130,
        1,
        82,
        99,
        34,
        153,
        166,
        153,
        96,
        225,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        91,
        135,
        96,
        64,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        22,
        133,
        17,
        21,
        97,
        6,
        94,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        5,
        96,
        36,
        130,
        1,
        82,
        100,
        34,
        153,
        160,
        182,
        161,
        96,
        217,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        134,
        96,
        64,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        22,
        133,
        17,
        21,
        97,
        6,
        163,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        5,
        96,
        36,
        130,
        1,
        82,
        100,
        69,
        51,
        65,
        109,
        83,
        96,
        216,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        135,
        96,
        96,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        22,
        132,
        17,
        21,
        97,
        6,
        229,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        2,
        96,
        36,
        130,
        1,
        82,
        97,
        69,
        51,
        96,
        240,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        134,
        96,
        96,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        22,
        132,
        16,
        21,
        97,
        7,
        39,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        2,
        96,
        36,
        130,
        1,
        82,
        97,
        69,
        51,
        96,
        240,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        130,
        97,
        3,
        232,
        137,
        96,
        192,
        1,
        81,
        97,
        7,
        58,
        145,
        144,
        97,
        21,
        107,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        22,
        16,
        21,
        97,
        7,
        119,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        34,
        154,
        33,
        96,
        233,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        130,
        97,
        3,
        232,
        136,
        96,
        192,
        1,
        81,
        97,
        7,
        138,
        145,
        144,
        97,
        21,
        107,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        22,
        16,
        21,
        97,
        7,
        199,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        69,
        52,
        83,
        96,
        232,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        135,
        97,
        1,
        0,
        1,
        81,
        96,
        255,
        22,
        96,
        1,
        20,
        128,
        21,
        97,
        7,
        229,
        87,
        80,
        97,
        1,
        0,
        135,
        1,
        81,
        96,
        255,
        22,
        21,
        91,
        97,
        8,
        23,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        17,
        76,
        209,
        96,
        234,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        80,
        96,
        1,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        8,
        55,
        144,
        97,
        20,
        90,
        86,
        91,
        96,
        64,
        128,
        81,
        128,
        131,
        3,
        96,
        31,
        25,
        1,
        129,
        82,
        130,
        130,
        82,
        128,
        81,
        96,
        32,
        145,
        130,
        1,
        32,
        131,
        131,
        1,
        131,
        82,
        96,
        14,
        132,
        82,
        109,
        79,
        114,
        105,
        111,
        110,
        32,
        69,
        120,
        99,
        104,
        97,
        110,
        103,
        101,
        96,
        144,
        27,
        147,
        130,
        1,
        147,
        144,
        147,
        82,
        129,
        81,
        128,
        131,
        1,
        131,
        82,
        96,
        1,
        128,
        130,
        82,
        96,
        49,
        96,
        248,
        27,
        145,
        131,
        1,
        145,
        144,
        145,
        82,
        130,
        81,
        145,
        130,
        1,
        147,
        144,
        147,
        82,
        127,
        171,
        237,
        113,
        234,
        36,
        69,
        161,
        60,
        153,
        228,
        228,
        175,
        166,
        43,
        112,
        142,
        154,
        175,
        108,
        209,
        48,
        65,
        186,
        134,
        72,
        46,
        108,
        191,
        131,
        251,
        196,
        207,
        145,
        129,
        1,
        145,
        144,
        145,
        82,
        127,
        200,
        158,
        253,
        170,
        84,
        192,
        242,
        12,
        122,
        223,
        97,
        40,
        130,
        223,
        9,
        80,
        245,
        169,
        81,
        99,
        126,
        3,
        7,
        205,
        203,
        76,
        103,
        47,
        41,
        139,
        139,
        198,
        96,
        96,
        130,
        1,
        82,
        96,
        128,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        0,
        128,
        81,
        96,
        32,
        97,
        22,
        135,
        131,
        57,
        129,
        81,
        145,
        82,
        96,
        160,
        130,
        1,
        82,
        96,
        192,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        97,
        9,
        30,
        132,
        97,
        11,
        228,
        86,
        91,
        96,
        64,
        81,
        97,
        25,
        1,
        96,
        240,
        27,
        96,
        32,
        130,
        1,
        82,
        96,
        34,
        129,
        1,
        146,
        144,
        146,
        82,
        96,
        66,
        130,
        1,
        82,
        96,
        98,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        130,
        96,
        0,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        2,
        77,
        132,
        97,
        1,
        64,
        1,
        81,
        131,
        97,
        11,
        108,
        144,
        145,
        144,
        99,
        255,
        255,
        255,
        255,
        22,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        9,
        139,
        144,
        97,
        20,
        90,
        86,
        91,
        96,
        64,
        128,
        81,
        128,
        131,
        3,
        96,
        31,
        25,
        1,
        129,
        82,
        130,
        130,
        82,
        128,
        81,
        96,
        32,
        145,
        130,
        1,
        32,
        131,
        131,
        1,
        131,
        82,
        96,
        14,
        132,
        82,
        109,
        79,
        114,
        105,
        111,
        110,
        32,
        69,
        120,
        99,
        104,
        97,
        110,
        103,
        101,
        96,
        144,
        27,
        147,
        130,
        1,
        147,
        144,
        147,
        82,
        129,
        81,
        128,
        131,
        1,
        131,
        82,
        96,
        1,
        128,
        130,
        82,
        96,
        49,
        96,
        248,
        27,
        145,
        131,
        1,
        145,
        144,
        145,
        82,
        130,
        81,
        145,
        130,
        1,
        147,
        144,
        147,
        82,
        127,
        171,
        237,
        113,
        234,
        36,
        69,
        161,
        60,
        153,
        228,
        228,
        175,
        166,
        43,
        112,
        142,
        154,
        175,
        108,
        209,
        48,
        65,
        186,
        134,
        72,
        46,
        108,
        191,
        131,
        251,
        196,
        207,
        145,
        129,
        1,
        145,
        144,
        145,
        82,
        127,
        200,
        158,
        253,
        170,
        84,
        192,
        242,
        12,
        122,
        223,
        97,
        40,
        130,
        223,
        9,
        80,
        245,
        169,
        81,
        99,
        126,
        3,
        7,
        205,
        203,
        76,
        103,
        47,
        41,
        139,
        139,
        198,
        96,
        96,
        130,
        1,
        82,
        96,
        128,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        0,
        128,
        81,
        96,
        32,
        97,
        22,
        135,
        131,
        57,
        129,
        81,
        145,
        82,
        96,
        160,
        130,
        1,
        82,
        96,
        192,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        97,
        10,
        114,
        131,
        97,
        12,
        176,
        86,
        91,
        96,
        64,
        81,
        97,
        25,
        1,
        96,
        240,
        27,
        96,
        32,
        130,
        1,
        82,
        96,
        34,
        129,
        1,
        146,
        144,
        146,
        82,
        96,
        66,
        130,
        1,
        82,
        96,
        98,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        66,
        97,
        3,
        232,
        131,
        96,
        96,
        1,
        81,
        97,
        10,
        187,
        145,
        144,
        97,
        21,
        107,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        22,
        16,
        21,
        97,
        10,
        248,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        34,
        154,
        33,
        96,
        233,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        129,
        96,
        32,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        11,
        29,
        131,
        96,
        160,
        1,
        81,
        131,
        97,
        11,
        108,
        144,
        145,
        144,
        99,
        255,
        255,
        255,
        255,
        22,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        97,
        11,
        89,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        3,
        96,
        36,
        130,
        1,
        82,
        98,
        17,
        82,
        83,
        96,
        234,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        8,
        144,
        97,
        21,
        159,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        97,
        11,
        123,
        133,
        133,
        97,
        13,
        55,
        86,
        91,
        145,
        80,
        145,
        80,
        97,
        11,
        136,
        129,
        97,
        13,
        124,
        86,
        91,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        127,
        25,
        69,
        116,
        104,
        101,
        114,
        101,
        117,
        109,
        32,
        83,
        105,
        103,
        110,
        101,
        100,
        32,
        77,
        101,
        115,
        115,
        97,
        103,
        101,
        58,
        10,
        51,
        50,
        0,
        0,
        0,
        0,
        96,
        32,
        130,
        1,
        82,
        96,
        60,
        129,
        1,
        130,
        144,
        82,
        96,
        0,
        144,
        96,
        92,
        1,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        11,
        245,
        144,
        97,
        21,
        159,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        130,
        96,
        0,
        1,
        81,
        131,
        96,
        32,
        1,
        81,
        132,
        96,
        64,
        1,
        81,
        133,
        96,
        96,
        1,
        81,
        134,
        96,
        128,
        1,
        81,
        135,
        96,
        160,
        1,
        81,
        136,
        96,
        192,
        1,
        81,
        137,
        96,
        224,
        1,
        81,
        138,
        97,
        1,
        0,
        1,
        81,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        11,
        199,
        154,
        153,
        152,
        151,
        150,
        149,
        148,
        147,
        146,
        145,
        144,
        153,
        138,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        152,
        137,
        22,
        96,
        32,
        139,
        1,
        82,
        150,
        136,
        22,
        96,
        64,
        138,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        149,
        134,
        22,
        96,
        96,
        138,
        1,
        82,
        147,
        133,
        22,
        96,
        128,
        137,
        1,
        82,
        145,
        132,
        22,
        96,
        160,
        136,
        1,
        82,
        131,
        22,
        96,
        192,
        135,
        1,
        82,
        144,
        145,
        22,
        96,
        224,
        133,
        1,
        82,
        144,
        145,
        22,
        97,
        1,
        0,
        131,
        1,
        82,
        96,
        255,
        22,
        97,
        1,
        32,
        130,
        1,
        82,
        97,
        1,
        64,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        12,
        193,
        144,
        97,
        19,
        191,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        31,
        25,
        129,
        132,
        3,
        1,
        129,
        82,
        130,
        130,
        82,
        128,
        81,
        96,
        32,
        145,
        130,
        1,
        32,
        133,
        81,
        134,
        131,
        1,
        81,
        135,
        133,
        1,
        81,
        96,
        96,
        128,
        138,
        1,
        81,
        96,
        128,
        128,
        140,
        1,
        81,
        151,
        138,
        1,
        150,
        144,
        150,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        148,
        133,
        22,
        151,
        137,
        1,
        151,
        144,
        151,
        82,
        145,
        131,
        22,
        145,
        135,
        1,
        145,
        144,
        145,
        82,
        22,
        144,
        132,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        144,
        145,
        22,
        96,
        160,
        131,
        1,
        82,
        96,
        13,
        11,
        96,
        192,
        130,
        1,
        82,
        96,
        224,
        1,
        97,
        11,
        199,
        86,
        91,
        96,
        0,
        128,
        130,
        81,
        96,
        65,
        3,
        97,
        13,
        109,
        87,
        96,
        32,
        131,
        1,
        81,
        96,
        64,
        132,
        1,
        81,
        96,
        96,
        133,
        1,
        81,
        96,
        0,
        26,
        97,
        13,
        97,
        135,
        130,
        133,
        133,
        97,
        14,
        201,
        86,
        91,
        148,
        80,
        148,
        80,
        80,
        80,
        80,
        97,
        13,
        117,
        86,
        91,
        80,
        96,
        0,
        144,
        80,
        96,
        2,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        13,
        144,
        87,
        97,
        13,
        144,
        97,
        22,
        112,
        86,
        91,
        3,
        97,
        13,
        152,
        87,
        80,
        86,
        91,
        96,
        1,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        13,
        172,
        87,
        97,
        13,
        172,
        97,
        22,
        112,
        86,
        91,
        3,
        97,
        13,
        249,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        24,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        67,
        68,
        83,
        65,
        58,
        32,
        105,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        115,
        105,
        103,
        110,
        97,
        116,
        117,
        114,
        101,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        96,
        2,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        14,
        13,
        87,
        97,
        14,
        13,
        97,
        22,
        112,
        86,
        91,
        3,
        97,
        14,
        90,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        67,
        68,
        83,
        65,
        58,
        32,
        105,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        115,
        105,
        103,
        110,
        97,
        116,
        117,
        114,
        101,
        32,
        108,
        101,
        110,
        103,
        116,
        104,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        248,
        86,
        91,
        96,
        3,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        14,
        110,
        87,
        97,
        14,
        110,
        97,
        22,
        112,
        86,
        91,
        3,
        97,
        14,
        198,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        69,
        67,
        68,
        83,
        65,
        58,
        32,
        105,
        110,
        118,
        97,
        108,
        105,
        100,
        32,
        115,
        105,
        103,
        110,
        97,
        116,
        117,
        114,
        101,
        32,
        39,
        115,
        39,
        32,
        118,
        97,
        108,
        96,
        68,
        130,
        1,
        82,
        97,
        117,
        101,
        96,
        240,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        3,
        248,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        127,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        93,
        87,
        110,
        115,
        87,
        164,
        80,
        29,
        223,
        233,
        47,
        70,
        104,
        27,
        32,
        160,
        131,
        17,
        21,
        97,
        15,
        0,
        87,
        80,
        96,
        0,
        144,
        80,
        96,
        3,
        97,
        15,
        132,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        0,
        128,
        130,
        82,
        96,
        32,
        130,
        1,
        128,
        132,
        82,
        137,
        144,
        82,
        96,
        255,
        136,
        22,
        146,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        96,
        129,
        1,
        134,
        144,
        82,
        96,
        128,
        129,
        1,
        133,
        144,
        82,
        96,
        1,
        144,
        96,
        160,
        1,
        96,
        32,
        96,
        64,
        81,
        96,
        32,
        129,
        3,
        144,
        128,
        132,
        3,
        144,
        133,
        90,
        250,
        21,
        128,
        21,
        97,
        15,
        84,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        96,
        64,
        81,
        96,
        31,
        25,
        1,
        81,
        145,
        80,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        15,
        125,
        87,
        96,
        0,
        96,
        1,
        146,
        80,
        146,
        80,
        80,
        97,
        15,
        132,
        86,
        91,
        145,
        80,
        96,
        0,
        144,
        80,
        91,
        148,
        80,
        148,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        97,
        1,
        96,
        129,
        1,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        15,
        198,
        87,
        97,
        15,
        198,
        97,
        15,
        141,
        86,
        91,
        96,
        64,
        82,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        192,
        129,
        1,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        15,
        198,
        87,
        97,
        15,
        198,
        97,
        15,
        141,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        16,
        5,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        16,
        5,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        53,
        96,
        255,
        129,
        22,
        129,
        20,
        97,
        16,
        5,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        16,
        5,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        16,
        83,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        128,
        130,
        17,
        21,
        97,
        16,
        109,
        87,
        97,
        16,
        109,
        97,
        15,
        141,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        131,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        130,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        16,
        149,
        87,
        97,
        16,
        149,
        97,
        15,
        141,
        86,
        91,
        129,
        96,
        64,
        82,
        131,
        129,
        82,
        134,
        96,
        32,
        133,
        136,
        1,
        1,
        17,
        21,
        97,
        16,
        174,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        96,
        32,
        135,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        96,
        32,
        133,
        131,
        1,
        1,
        82,
        128,
        148,
        80,
        80,
        80,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        1,
        96,
        130,
        132,
        3,
        18,
        21,
        97,
        16,
        225,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        16,
        233,
        97,
        15,
        163,
        86,
        91,
        144,
        80,
        97,
        16,
        244,
        130,
        97,
        15,
        238,
        86,
        91,
        129,
        82,
        97,
        17,
        2,
        96,
        32,
        131,
        1,
        97,
        15,
        238,
        86,
        91,
        96,
        32,
        130,
        1,
        82,
        97,
        17,
        19,
        96,
        64,
        131,
        1,
        97,
        16,
        10,
        86,
        91,
        96,
        64,
        130,
        1,
        82,
        97,
        17,
        36,
        96,
        96,
        131,
        1,
        97,
        16,
        10,
        86,
        91,
        96,
        96,
        130,
        1,
        82,
        97,
        17,
        53,
        96,
        128,
        131,
        1,
        97,
        16,
        10,
        86,
        91,
        96,
        128,
        130,
        1,
        82,
        97,
        17,
        70,
        96,
        160,
        131,
        1,
        97,
        16,
        10,
        86,
        91,
        96,
        160,
        130,
        1,
        82,
        97,
        17,
        87,
        96,
        192,
        131,
        1,
        97,
        16,
        10,
        86,
        91,
        96,
        192,
        130,
        1,
        82,
        97,
        17,
        104,
        96,
        224,
        131,
        1,
        97,
        15,
        238,
        86,
        91,
        96,
        224,
        130,
        1,
        82,
        97,
        1,
        0,
        97,
        17,
        123,
        129,
        132,
        1,
        97,
        16,
        33,
        86,
        91,
        144,
        130,
        1,
        82,
        97,
        1,
        32,
        97,
        17,
        141,
        131,
        130,
        1,
        97,
        16,
        50,
        86,
        91,
        144,
        130,
        1,
        82,
        97,
        1,
        64,
        130,
        129,
        1,
        53,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        21,
        97,
        17,
        172,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        17,
        184,
        133,
        130,
        134,
        1,
        97,
        16,
        66,
        86,
        91,
        130,
        132,
        1,
        82,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        17,
        214,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        21,
        97,
        17,
        236,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        17,
        248,
        132,
        130,
        133,
        1,
        97,
        16,
        206,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        82,
        131,
        81,
        128,
        130,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        18,
        45,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        18,
        17,
        86,
        91,
        129,
        129,
        17,
        21,
        97,
        18,
        63,
        87,
        96,
        0,
        96,
        64,
        131,
        135,
        1,
        1,
        82,
        91,
        80,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        64,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        224,
        136,
        138,
        3,
        18,
        21,
        97,
        18,
        112,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        53,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        128,
        130,
        17,
        21,
        97,
        18,
        135,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        18,
        147,
        139,
        131,
        140,
        1,
        97,
        16,
        206,
        86,
        91,
        152,
        80,
        96,
        32,
        138,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        18,
        169,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        18,
        182,
        138,
        130,
        139,
        1,
        97,
        16,
        206,
        86,
        91,
        150,
        80,
        80,
        97,
        18,
        197,
        96,
        64,
        137,
        1,
        97,
        15,
        238,
        86,
        91,
        148,
        80,
        96,
        96,
        136,
        1,
        53,
        147,
        80,
        96,
        128,
        136,
        1,
        53,
        146,
        80,
        96,
        160,
        136,
        1,
        53,
        145,
        80,
        97,
        18,
        232,
        96,
        192,
        137,
        1,
        97,
        15,
        238,
        86,
        91,
        144,
        80,
        146,
        149,
        152,
        145,
        148,
        151,
        80,
        146,
        149,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        19,
        8,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        128,
        130,
        17,
        21,
        97,
        19,
        31,
        87,
        96,
        0,
        128,
        253,
        91,
        144,
        131,
        1,
        144,
        96,
        192,
        130,
        134,
        3,
        18,
        21,
        97,
        19,
        51,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        19,
        59,
        97,
        15,
        204,
        86,
        91,
        97,
        19,
        68,
        131,
        97,
        15,
        238,
        86,
        91,
        129,
        82,
        97,
        19,
        82,
        96,
        32,
        132,
        1,
        97,
        15,
        238,
        86,
        91,
        96,
        32,
        130,
        1,
        82,
        97,
        19,
        99,
        96,
        64,
        132,
        1,
        97,
        15,
        238,
        86,
        91,
        96,
        64,
        130,
        1,
        82,
        97,
        19,
        116,
        96,
        96,
        132,
        1,
        97,
        16,
        10,
        86,
        91,
        96,
        96,
        130,
        1,
        82,
        96,
        128,
        131,
        1,
        53,
        128,
        96,
        13,
        11,
        129,
        20,
        97,
        19,
        141,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        128,
        130,
        1,
        82,
        96,
        160,
        131,
        1,
        53,
        130,
        129,
        17,
        21,
        97,
        19,
        164,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        19,
        176,
        135,
        130,
        134,
        1,
        97,
        16,
        66,
        86,
        91,
        96,
        160,
        131,
        1,
        82,
        80,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        127,
        76,
        105,
        113,
        117,
        105,
        100,
        97,
        116,
        105,
        111,
        110,
        73,
        110,
        102,
        111,
        40,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        32,
        97,
        99,
        99,
        111,
        117,
        110,
        116,
        84,
        129,
        82,
        127,
        111,
        76,
        105,
        113,
        117,
        105,
        100,
        97,
        116,
        101,
        44,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        32,
        108,
        105,
        113,
        117,
        105,
        100,
        97,
        116,
        111,
        114,
        44,
        97,
        100,
        96,
        32,
        130,
        1,
        82,
        127,
        100,
        114,
        101,
        115,
        115,
        32,
        105,
        110,
        115,
        116,
        114,
        117,
        109,
        101,
        110,
        116,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        44,
        117,
        105,
        110,
        116,
        54,
        52,
        32,
        101,
        96,
        64,
        130,
        1,
        82,
        127,
        120,
        112,
        105,
        114,
        97,
        116,
        105,
        111,
        110,
        44,
        105,
        110,
        116,
        49,
        49,
        50,
        32,
        112,
        111,
        115,
        105,
        116,
        105,
        111,
        110,
        41,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        96,
        130,
        1,
        82,
        96,
        122,
        1,
        144,
        86,
        91,
        127,
        69,
        73,
        80,
        55,
        49,
        50,
        68,
        111,
        109,
        97,
        105,
        110,
        40,
        115,
        116,
        114,
        105,
        110,
        103,
        32,
        110,
        97,
        109,
        101,
        44,
        115,
        116,
        114,
        105,
        110,
        103,
        32,
        129,
        82,
        127,
        118,
        101,
        114,
        115,
        105,
        111,
        110,
        44,
        117,
        105,
        110,
        116,
        50,
        53,
        54,
        32,
        99,
        104,
        97,
        105,
        110,
        73,
        100,
        44,
        98,
        121,
        116,
        101,
        115,
        51,
        50,
        32,
        96,
        32,
        130,
        1,
        82,
        100,
        115,
        97,
        108,
        116,
        41,
        96,
        216,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        69,
        1,
        144,
        86,
        91,
        100,
        55,
        185,
        50,
        50,
        185,
        96,
        217,
        27,
        129,
        82,
        107,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        25,
        96,
        96,
        139,
        129,
        27,
        130,
        22,
        96,
        5,
        132,
        1,
        82,
        138,
        144,
        27,
        22,
        96,
        25,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        192,
        27,
        3,
        25,
        96,
        192,
        137,
        129,
        27,
        130,
        22,
        96,
        45,
        132,
        1,
        82,
        136,
        129,
        27,
        130,
        22,
        96,
        53,
        132,
        1,
        82,
        135,
        129,
        27,
        130,
        22,
        96,
        61,
        132,
        1,
        82,
        134,
        129,
        27,
        130,
        22,
        96,
        69,
        132,
        1,
        82,
        133,
        144,
        27,
        22,
        96,
        77,
        130,
        1,
        82,
        96,
        0,
        97,
        21,
        65,
        96,
        85,
        131,
        1,
        133,
        96,
        96,
        27,
        107,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        25,
        22,
        144,
        82,
        86,
        91,
        97,
        21,
        90,
        96,
        105,
        131,
        1,
        132,
        96,
        248,
        27,
        96,
        1,
        96,
        1,
        96,
        248,
        27,
        3,
        25,
        22,
        144,
        82,
        86,
        91,
        80,
        96,
        106,
        1,
        153,
        152,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        128,
        132,
        22,
        128,
        97,
        21,
        147,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        146,
        22,
        145,
        144,
        145,
        4,
        146,
        145,
        80,
        80,
        86,
        91,
        127,
        79,
        114,
        100,
        101,
        114,
        40,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        32,
        115,
        101,
        110,
        100,
        101,
        114,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        44,
        97,
        100,
        100,
        114,
        129,
        82,
        127,
        101,
        115,
        115,
        32,
        109,
        97,
        116,
        99,
        104,
        101,
        114,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        44,
        117,
        105,
        110,
        116,
        54,
        52,
        32,
        97,
        109,
        111,
        117,
        110,
        116,
        96,
        32,
        130,
        1,
        82,
        127,
        44,
        117,
        105,
        110,
        116,
        54,
        52,
        32,
        112,
        114,
        105,
        99,
        101,
        44,
        117,
        105,
        110,
        116,
        54,
        52,
        32,
        109,
        97,
        116,
        99,
        104,
        101,
        114,
        70,
        101,
        101,
        44,
        96,
        64,
        130,
        1,
        82,
        127,
        117,
        105,
        110,
        116,
        54,
        52,
        32,
        110,
        111,
        110,
        99,
        101,
        44,
        117,
        105,
        110,
        116,
        54,
        52,
        32,
        101,
        120,
        112,
        105,
        114,
        97,
        116,
        105,
        111,
        110,
        44,
        97,
        96,
        96,
        130,
        1,
        82,
        127,
        100,
        100,
        114,
        101,
        115,
        115,
        32,
        105,
        110,
        115,
        116,
        114,
        117,
        109,
        101,
        110,
        116,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        44,
        117,
        105,
        110,
        116,
        56,
        32,
        98,
        96,
        128,
        130,
        1,
        82,
        102,
        117,
        121,
        83,
        105,
        100,
        101,
        41,
        96,
        200,
        27,
        96,
        160,
        130,
        1,
        82,
        96,
        167,
        1,
        144,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        242,
        216,
        87,
        244,
        163,
        237,
        203,
        155,
        120,
        180,
        213,
        3,
        191,
        231,
        51,
        219,
        30,
        63,
        108,
        220,
        43,
        121,
        113,
        238,
        115,
        150,
        38,
        201,
        126,
        134,
        165,
        87,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        70,
        53,
        222,
        40,
        211,
        29,
        68,
        44,
        7,
        196,
        215,
        197,
        67,
        189,
        229,
        129,
        140,
        249,
        98,
        252,
        31,
        144,
        127,
        85,
        248,
        143,
        254,
        176,
        238,
        124,
        108,
        146,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        15,
        0,
        51,
    ];
    ///The bytecode of the contract.
    lazy_static::lazy_static! {
            pub static ref LIBVALIDATOR_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from(
            __BYTECODE.to_vec(),
        );
    }
    pub struct LibValidator<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for LibValidator<M> {
        fn clone(&self) -> Self {
            LibValidator(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for LibValidator<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for LibValidator<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(LibValidator))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> LibValidator<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                LIBVALIDATOR_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                LIBVALIDATOR_ABI.clone(),
                LIBVALIDATOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `CHAIN_ID` (0x85e1f4d0) function
        pub fn chain_id(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([133, 225, 244, 208], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `DOMAIN_NAME` (0x796f077b) function
        pub fn domain_name(&self) -> ::ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([121, 111, 7, 123], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `DOMAIN_SALT` (0x6d845aa8) function
        pub fn domain_salt(&self) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([109, 132, 90, 168], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `DOMAIN_SEPARATOR` (0x3644e515) function
        pub fn domain_separator(&self) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([54, 68, 229, 21], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `DOMAIN_VERSION` (0xacb8cc49) function
        pub fn domain_version(&self) -> ::ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([172, 184, 204, 73], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `EIP712_DOMAIN_TYPEHASH` (0xc7977be7) function
        pub fn eip712_domain_typehash(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([199, 151, 123, 231], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `LIQUIDATION_INFO_TYPEHASH` (0x0e58eb65) function
        pub fn liquidation_info_typehash(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([14, 88, 235, 101], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ORDER_TYPEHASH` (0xf973a209) function
        pub fn order_typehash(&self) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([249, 115, 162, 9], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `checkLiquidationOrder` (0xd451150d) function
        pub fn check_liquidation_order(
            &self,
            liquidation_order: LiquidationOrder,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([212, 81, 21, 13], (liquidation_order,))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `checkOrdersInfo` (0xfe4d6e77) function
        pub fn check_orders_info(
            &self,
            buy_order: Order,
            sell_order: Order,
            sender: ::ethers::core::types::Address,
            filled_amount: ::ethers::core::types::U256,
            filled_price: ::ethers::core::types::U256,
            current_time: ::ethers::core::types::U256,
            allowed_matcher: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash(
                    [254, 77, 110, 119],
                    (
                        buy_order,
                        sell_order,
                        sender,
                        filled_amount,
                        filled_price,
                        current_time,
                        allowed_matcher,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getEthSignedOrderHash` (0x22bf072b) function
        pub fn get_eth_signed_order_hash(
            &self,
            order: Order,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([34, 191, 7, 43], (order,))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `validatePersonal` (0x61b1b66e) function
        pub fn validate_personal(
            &self,
            order: Order,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([97, 177, 182, 110], (order,))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `validateV3` (0x74738af6) function
        pub fn validate_v3(
            &self,
            order: Order,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([116, 115, 138, 246], (order,))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for LibValidator<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `CHAIN_ID` function with signature `CHAIN_ID()` and selector `0x85e1f4d0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "CHAIN_ID", abi = "CHAIN_ID()")]
    pub struct ChainIdCall;
    ///Container type for all input parameters for the `DOMAIN_NAME` function with signature `DOMAIN_NAME()` and selector `0x796f077b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "DOMAIN_NAME", abi = "DOMAIN_NAME()")]
    pub struct DomainNameCall;
    ///Container type for all input parameters for the `DOMAIN_SALT` function with signature `DOMAIN_SALT()` and selector `0x6d845aa8`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "DOMAIN_SALT", abi = "DOMAIN_SALT()")]
    pub struct DomainSaltCall;
    ///Container type for all input parameters for the `DOMAIN_SEPARATOR` function with signature `DOMAIN_SEPARATOR()` and selector `0x3644e515`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "DOMAIN_SEPARATOR", abi = "DOMAIN_SEPARATOR()")]
    pub struct DomainSeparatorCall;
    ///Container type for all input parameters for the `DOMAIN_VERSION` function with signature `DOMAIN_VERSION()` and selector `0xacb8cc49`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "DOMAIN_VERSION", abi = "DOMAIN_VERSION()")]
    pub struct DomainVersionCall;
    ///Container type for all input parameters for the `EIP712_DOMAIN_TYPEHASH` function with signature `EIP712_DOMAIN_TYPEHASH()` and selector `0xc7977be7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "EIP712_DOMAIN_TYPEHASH", abi = "EIP712_DOMAIN_TYPEHASH()")]
    pub struct Eip712DomainTypehashCall;
    ///Container type for all input parameters for the `LIQUIDATION_INFO_TYPEHASH` function with signature `LIQUIDATION_INFO_TYPEHASH()` and selector `0x0e58eb65`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "LIQUIDATION_INFO_TYPEHASH",
        abi = "LIQUIDATION_INFO_TYPEHASH()"
    )]
    pub struct LiquidationInfoTypehashCall;
    ///Container type for all input parameters for the `ORDER_TYPEHASH` function with signature `ORDER_TYPEHASH()` and selector `0xf973a209`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(name = "ORDER_TYPEHASH", abi = "ORDER_TYPEHASH()")]
    pub struct OrderTypehashCall;
    ///Container type for all input parameters for the `checkLiquidationOrder` function with signature `checkLiquidationOrder((address,address,address,uint64,int112,bytes))` and selector `0xd451150d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "checkLiquidationOrder",
        abi = "checkLiquidationOrder((address,address,address,uint64,int112,bytes))"
    )]
    pub struct CheckLiquidationOrderCall {
        pub liquidation_order: LiquidationOrder,
    }
    ///Container type for all input parameters for the `checkOrdersInfo` function with signature `checkOrdersInfo((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes),(address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes),address,uint256,uint256,uint256,address)` and selector `0xfe4d6e77`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "checkOrdersInfo",
        abi = "checkOrdersInfo((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes),(address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes),address,uint256,uint256,uint256,address)"
    )]
    pub struct CheckOrdersInfoCall {
        pub buy_order: Order,
        pub sell_order: Order,
        pub sender: ::ethers::core::types::Address,
        pub filled_amount: ::ethers::core::types::U256,
        pub filled_price: ::ethers::core::types::U256,
        pub current_time: ::ethers::core::types::U256,
        pub allowed_matcher: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `getEthSignedOrderHash` function with signature `getEthSignedOrderHash((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes))` and selector `0x22bf072b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "getEthSignedOrderHash",
        abi = "getEthSignedOrderHash((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes))"
    )]
    pub struct GetEthSignedOrderHashCall {
        pub order: Order,
    }
    ///Container type for all input parameters for the `validatePersonal` function with signature `validatePersonal((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes))` and selector `0x61b1b66e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "validatePersonal",
        abi = "validatePersonal((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes))"
    )]
    pub struct ValidatePersonalCall {
        pub order: Order,
    }
    ///Container type for all input parameters for the `validateV3` function with signature `validateV3((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes))` and selector `0x74738af6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "validateV3",
        abi = "validateV3((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes))"
    )]
    pub struct ValidateV3Call {
        pub order: Order,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum LibValidatorCalls {
        ChainId(ChainIdCall),
        DomainName(DomainNameCall),
        DomainSalt(DomainSaltCall),
        DomainSeparator(DomainSeparatorCall),
        DomainVersion(DomainVersionCall),
        Eip712DomainTypehash(Eip712DomainTypehashCall),
        LiquidationInfoTypehash(LiquidationInfoTypehashCall),
        OrderTypehash(OrderTypehashCall),
        CheckLiquidationOrder(CheckLiquidationOrderCall),
        CheckOrdersInfo(CheckOrdersInfoCall),
        GetEthSignedOrderHash(GetEthSignedOrderHashCall),
        ValidatePersonal(ValidatePersonalCall),
        ValidateV3(ValidateV3Call),
    }
    impl ::ethers::core::abi::AbiDecode for LibValidatorCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <ChainIdCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::ChainId(decoded));
            }
            if let Ok(decoded) =
                <DomainNameCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::DomainName(decoded));
            }
            if let Ok(decoded) =
                <DomainSaltCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::DomainSalt(decoded));
            }
            if let Ok(decoded) =
                <DomainSeparatorCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::DomainSeparator(decoded));
            }
            if let Ok(decoded) =
                <DomainVersionCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::DomainVersion(decoded));
            }
            if let Ok(decoded) =
                <Eip712DomainTypehashCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::Eip712DomainTypehash(decoded));
            }
            if let Ok(decoded) =
                <LiquidationInfoTypehashCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LibValidatorCalls::LiquidationInfoTypehash(decoded));
            }
            if let Ok(decoded) =
                <OrderTypehashCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::OrderTypehash(decoded));
            }
            if let Ok(decoded) =
                <CheckLiquidationOrderCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::CheckLiquidationOrder(decoded));
            }
            if let Ok(decoded) =
                <CheckOrdersInfoCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::CheckOrdersInfo(decoded));
            }
            if let Ok(decoded) =
                <GetEthSignedOrderHashCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::GetEthSignedOrderHash(decoded));
            }
            if let Ok(decoded) =
                <ValidatePersonalCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::ValidatePersonal(decoded));
            }
            if let Ok(decoded) =
                <ValidateV3Call as ::ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LibValidatorCalls::ValidateV3(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for LibValidatorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                LibValidatorCalls::ChainId(element) => element.encode(),
                LibValidatorCalls::DomainName(element) => element.encode(),
                LibValidatorCalls::DomainSalt(element) => element.encode(),
                LibValidatorCalls::DomainSeparator(element) => element.encode(),
                LibValidatorCalls::DomainVersion(element) => element.encode(),
                LibValidatorCalls::Eip712DomainTypehash(element) => element.encode(),
                LibValidatorCalls::LiquidationInfoTypehash(element) => element.encode(),
                LibValidatorCalls::OrderTypehash(element) => element.encode(),
                LibValidatorCalls::CheckLiquidationOrder(element) => element.encode(),
                LibValidatorCalls::CheckOrdersInfo(element) => element.encode(),
                LibValidatorCalls::GetEthSignedOrderHash(element) => element.encode(),
                LibValidatorCalls::ValidatePersonal(element) => element.encode(),
                LibValidatorCalls::ValidateV3(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for LibValidatorCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                LibValidatorCalls::ChainId(element) => element.fmt(f),
                LibValidatorCalls::DomainName(element) => element.fmt(f),
                LibValidatorCalls::DomainSalt(element) => element.fmt(f),
                LibValidatorCalls::DomainSeparator(element) => element.fmt(f),
                LibValidatorCalls::DomainVersion(element) => element.fmt(f),
                LibValidatorCalls::Eip712DomainTypehash(element) => element.fmt(f),
                LibValidatorCalls::LiquidationInfoTypehash(element) => element.fmt(f),
                LibValidatorCalls::OrderTypehash(element) => element.fmt(f),
                LibValidatorCalls::CheckLiquidationOrder(element) => element.fmt(f),
                LibValidatorCalls::CheckOrdersInfo(element) => element.fmt(f),
                LibValidatorCalls::GetEthSignedOrderHash(element) => element.fmt(f),
                LibValidatorCalls::ValidatePersonal(element) => element.fmt(f),
                LibValidatorCalls::ValidateV3(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<ChainIdCall> for LibValidatorCalls {
        fn from(var: ChainIdCall) -> Self {
            LibValidatorCalls::ChainId(var)
        }
    }
    impl ::std::convert::From<DomainNameCall> for LibValidatorCalls {
        fn from(var: DomainNameCall) -> Self {
            LibValidatorCalls::DomainName(var)
        }
    }
    impl ::std::convert::From<DomainSaltCall> for LibValidatorCalls {
        fn from(var: DomainSaltCall) -> Self {
            LibValidatorCalls::DomainSalt(var)
        }
    }
    impl ::std::convert::From<DomainSeparatorCall> for LibValidatorCalls {
        fn from(var: DomainSeparatorCall) -> Self {
            LibValidatorCalls::DomainSeparator(var)
        }
    }
    impl ::std::convert::From<DomainVersionCall> for LibValidatorCalls {
        fn from(var: DomainVersionCall) -> Self {
            LibValidatorCalls::DomainVersion(var)
        }
    }
    impl ::std::convert::From<Eip712DomainTypehashCall> for LibValidatorCalls {
        fn from(var: Eip712DomainTypehashCall) -> Self {
            LibValidatorCalls::Eip712DomainTypehash(var)
        }
    }
    impl ::std::convert::From<LiquidationInfoTypehashCall> for LibValidatorCalls {
        fn from(var: LiquidationInfoTypehashCall) -> Self {
            LibValidatorCalls::LiquidationInfoTypehash(var)
        }
    }
    impl ::std::convert::From<OrderTypehashCall> for LibValidatorCalls {
        fn from(var: OrderTypehashCall) -> Self {
            LibValidatorCalls::OrderTypehash(var)
        }
    }
    impl ::std::convert::From<CheckLiquidationOrderCall> for LibValidatorCalls {
        fn from(var: CheckLiquidationOrderCall) -> Self {
            LibValidatorCalls::CheckLiquidationOrder(var)
        }
    }
    impl ::std::convert::From<CheckOrdersInfoCall> for LibValidatorCalls {
        fn from(var: CheckOrdersInfoCall) -> Self {
            LibValidatorCalls::CheckOrdersInfo(var)
        }
    }
    impl ::std::convert::From<GetEthSignedOrderHashCall> for LibValidatorCalls {
        fn from(var: GetEthSignedOrderHashCall) -> Self {
            LibValidatorCalls::GetEthSignedOrderHash(var)
        }
    }
    impl ::std::convert::From<ValidatePersonalCall> for LibValidatorCalls {
        fn from(var: ValidatePersonalCall) -> Self {
            LibValidatorCalls::ValidatePersonal(var)
        }
    }
    impl ::std::convert::From<ValidateV3Call> for LibValidatorCalls {
        fn from(var: ValidateV3Call) -> Self {
            LibValidatorCalls::ValidateV3(var)
        }
    }
    ///Container type for all return fields from the `CHAIN_ID` function with signature `CHAIN_ID()` and selector `0x85e1f4d0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct ChainIdReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `DOMAIN_NAME` function with signature `DOMAIN_NAME()` and selector `0x796f077b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct DomainNameReturn(pub String);
    ///Container type for all return fields from the `DOMAIN_SALT` function with signature `DOMAIN_SALT()` and selector `0x6d845aa8`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct DomainSaltReturn(pub [u8; 32]);
    ///Container type for all return fields from the `DOMAIN_SEPARATOR` function with signature `DOMAIN_SEPARATOR()` and selector `0x3644e515`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct DomainSeparatorReturn(pub [u8; 32]);
    ///Container type for all return fields from the `DOMAIN_VERSION` function with signature `DOMAIN_VERSION()` and selector `0xacb8cc49`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct DomainVersionReturn(pub String);
    ///Container type for all return fields from the `EIP712_DOMAIN_TYPEHASH` function with signature `EIP712_DOMAIN_TYPEHASH()` and selector `0xc7977be7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct Eip712DomainTypehashReturn(pub [u8; 32]);
    ///Container type for all return fields from the `LIQUIDATION_INFO_TYPEHASH` function with signature `LIQUIDATION_INFO_TYPEHASH()` and selector `0x0e58eb65`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct LiquidationInfoTypehashReturn(pub [u8; 32]);
    ///Container type for all return fields from the `ORDER_TYPEHASH` function with signature `ORDER_TYPEHASH()` and selector `0xf973a209`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct OrderTypehashReturn(pub [u8; 32]);
    ///Container type for all return fields from the `checkOrdersInfo` function with signature `checkOrdersInfo((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes),(address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes),address,uint256,uint256,uint256,address)` and selector `0xfe4d6e77`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct CheckOrdersInfoReturn {
        pub success: bool,
    }
    ///Container type for all return fields from the `getEthSignedOrderHash` function with signature `getEthSignedOrderHash((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes))` and selector `0x22bf072b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct GetEthSignedOrderHashReturn(pub [u8; 32]);
    ///Container type for all return fields from the `validatePersonal` function with signature `validatePersonal((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes))` and selector `0x61b1b66e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct ValidatePersonalReturn(pub bool);
    ///Container type for all return fields from the `validateV3` function with signature `validateV3((address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes))` and selector `0x74738af6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
    )]
    pub struct ValidateV3Return(pub bool);
    ///`LiquidationOrder(address,address,address,uint64,int112,bytes)`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    pub struct LiquidationOrder {
        pub account_to_liquidate: ::ethers::core::types::Address,
        pub liquidator: ::ethers::core::types::Address,
        pub instrument_address: ::ethers::core::types::Address,
        pub expiration: u64,
        pub position: i128,
        pub signature: ::ethers::core::types::Bytes,
    }
    ///`Order(address,address,uint64,uint64,uint64,uint64,uint64,address,uint8,bool,bytes)`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    pub struct Order {
        pub sender_address: ::ethers::core::types::Address,
        pub matcher_address: ::ethers::core::types::Address,
        pub amount: u64,
        pub price: u64,
        pub matcher_fee: u64,
        pub nonce: u64,
        pub expiration: u64,
        pub instrument_address: ::ethers::core::types::Address,
        pub buy_side: u8,
        pub is_personal_sign: bool,
        pub signature: ::ethers::core::types::Bytes,
    }
}
